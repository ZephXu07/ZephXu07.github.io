<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title>springboot</title>
    <url>/2020/07/27/springboot-pdf/</url>
    <content><![CDATA[<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&#123;% pdf mydocument.pdf %&#125;</span><br></pre></td></tr></table></figure>



]]></content>
      <tags>
        <tag>笔记</tag>
        <tag>java</tag>
        <tag>springboot</tag>
      </tags>
  </entry>
  <entry>
    <title>Git简单命令</title>
    <url>/2020/02/29/Git%E7%AE%80%E5%8D%95%E5%91%BD%E4%BB%A4/</url>
    <content><![CDATA[<p><a href="https://github.com/hongiii/gitNotes_from_Liao/blob/master/gitNotes_from_Liao.md" target="_blank" rel="noopener">来源</a></p>
<a id="more"></a>

<h3 id="Git配置"><a href="#Git配置" class="headerlink" title="Git配置"></a>Git配置</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">$ git config --global user.name &quot;Your Name&quot;</span><br><span class="line">$ git config --global user.email &quot;email@example.com&quot;</span><br></pre></td></tr></table></figure>

<p><code>git config</code>命令的<code>--global</code>参数，表明这台机器上的所有Git仓库都会使用这个配置，也可以对某个仓库指定不同的用户名和邮箱地址。</p>
<h3 id="创建版本库"><a href="#创建版本库" class="headerlink" title="创建版本库"></a>创建版本库</h3><h4 id="初始化一个Git仓库"><a href="#初始化一个Git仓库" class="headerlink" title="初始化一个Git仓库"></a>初始化一个Git仓库</h4><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">$ git init</span><br></pre></td></tr></table></figure>

<h4 id="添加文件到Git仓库"><a href="#添加文件到Git仓库" class="headerlink" title="添加文件到Git仓库"></a>添加文件到Git仓库</h4><p>包括两步：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">$ git add &lt;file&gt;</span><br><span class="line">$ git commit -m &quot;description&quot;</span><br></pre></td></tr></table></figure>

<p><code>git add</code>可以反复多次使用，添加多个文件，<code>git commit</code>可以一次提交很多文件，<code>-m</code>后面输入的是本次提交的说明，可以输入任意内容。</p>
<h3 id="查看工作区状态"><a href="#查看工作区状态" class="headerlink" title="查看工作区状态"></a>查看工作区状态</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">$ git status</span><br></pre></td></tr></table></figure>

<h3 id="查看修改内容"><a href="#查看修改内容" class="headerlink" title="查看修改内容"></a>查看修改内容</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">$ git diff</span><br><span class="line">$ git diff --cached</span><br><span class="line">$ git diff HEAD -- &lt;file&gt;</span><br></pre></td></tr></table></figure>

<ul>
<li><code>git diff</code> 可以查看工作区(work dict)和暂存区(stage)的区别</li>
<li><code>git diff --cached</code> 可以查看暂存区(stage)和分支(master)的区别</li>
<li><code>git diff HEAD --</code> 可以查看工作区和版本库里面最新版本的区别</li>
</ul>
<h3 id="查看提交日志"><a href="#查看提交日志" class="headerlink" title="查看提交日志"></a>查看提交日志</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">$ git log</span><br></pre></td></tr></table></figure>

<p>简化日志输出信息</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">$ git log --pretty&#x3D;oneline</span><br></pre></td></tr></table></figure>

<h3 id="查看命令历史"><a href="#查看命令历史" class="headerlink" title="查看命令历史"></a>查看命令历史</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">$ git reflog</span><br></pre></td></tr></table></figure>

<h3 id="版本回退"><a href="#版本回退" class="headerlink" title="版本回退"></a>版本回退</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">$ git reset --hard HEAD^</span><br></pre></td></tr></table></figure>

<p>以上命令是返回上一个版本，在Git中，用<code>HEAD</code>表示当前版本，上一个版本就是<code>HEAD^</code>，上上一个版本是<code>HEAD^^</code>，往上100个版本写成<code>HEAD~100</code>。</p>
<h3 id="回退指定版本号"><a href="#回退指定版本号" class="headerlink" title="回退指定版本号"></a>回退指定版本号</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">$ git reset --hard commit_id</span><br></pre></td></tr></table></figure>

<p>commit_id是版本号，是一个用SHA1计算出的序列</p>
<h3 id="工作区、暂存区和版本库"><a href="#工作区、暂存区和版本库" class="headerlink" title="工作区、暂存区和版本库"></a>工作区、暂存区和版本库</h3><p>工作区：在电脑里能看到的目录； 版本库：在工作区有一个隐藏目录<code>.git</code>，是Git的版本库。 Git的版本库中存了很多东西，其中最重要的就是称为stage（或者称为index）的暂存区，还有Git自动创建的<code>master</code>，以及指向<code>master</code>的指针<code>HEAD</code>。</p>
<p><a href="https://camo.githubusercontent.com/b3d7b546b4a699a8c010c58a3f28571757682bfc/68747470733a2f2f63646e2e6c69616f78756566656e672e636f6d2f63646e2f66696c65732f6174746163686d656e74732f30303133383439303737323034353865353637353164663163343734343835623639373537353037336334306165393030302f30" target="_blank" rel="noopener"><img src="https://camo.githubusercontent.com/b3d7b546b4a699a8c010c58a3f28571757682bfc/68747470733a2f2f63646e2e6c69616f78756566656e672e636f6d2f63646e2f66696c65732f6174746163686d656e74732f30303133383439303737323034353865353637353164663163343734343835623639373537353037336334306165393030302f30" alt="理解"></a></p>
<p>进一步解释一些命令：</p>
<ul>
<li><code>git add</code>实际上是把文件添加到暂存区</li>
<li><code>git commit</code>实际上是把暂存区的所有内容提交到当前分支</li>
</ul>
<h3 id="撤销修改"><a href="#撤销修改" class="headerlink" title="撤销修改"></a>撤销修改</h3><h4 id="丢弃工作区的修改"><a href="#丢弃工作区的修改" class="headerlink" title="丢弃工作区的修改"></a>丢弃工作区的修改</h4><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">$ git checkout -- &lt;file&gt;</span><br></pre></td></tr></table></figure>

<p>该命令是指将文件在工作区的修改全部撤销，这里有两种情况：</p>
<ol>
<li>一种是file自修改后还没有被放到暂存区，现在，撤销修改就回到和版本库一模一样的状态；</li>
<li>一种是file已经添加到暂存区后，又作了修改，现在，撤销修改就回到添加到暂存区后的状态。</li>
</ol>
<p>总之，就是让这个文件回到最近一次git commit或git add时的状态。</p>
<h4 id="丢弃暂存区的修改"><a href="#丢弃暂存区的修改" class="headerlink" title="丢弃暂存区的修改"></a>丢弃暂存区的修改</h4><p>分两步： 第一步，把暂存区的修改撤销掉(unstage)，重新放回工作区：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">$ git reset HEAD &lt;file&gt;</span><br></pre></td></tr></table></figure>

<p>第二步，撤销工作区的修改</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">$ git checkout -- &lt;file&gt;</span><br></pre></td></tr></table></figure>

<p>小结：</p>
<ol>
<li>当你改乱了工作区某个文件的内容，想直接丢弃工作区的修改时，用命令<code>git checkout --</code>。</li>
<li>当你不但改乱了工作区某个文件的内容，还添加到了暂存区时，想丢弃修改，分两步，第一步用命令<code>git reset HEAD</code>，就回到了第一步，第二步按第一步操作。</li>
<li>已经提交了不合适的修改到版本库时，想要撤销本次提交，进行版本回退，前提是没有推送到远程库。</li>
</ol>
<h3 id="删除文件"><a href="#删除文件" class="headerlink" title="删除文件"></a>删除文件</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">$ git rm &lt;file&gt;</span><br></pre></td></tr></table></figure>

<p><code>git rm</code>相当于执行</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">$ rm &lt;file&gt;</span><br><span class="line">$ git add &lt;file&gt;</span><br></pre></td></tr></table></figure>

<h4 id="进一步的解释"><a href="#进一步的解释" class="headerlink" title="进一步的解释"></a>进一步的解释</h4><p>Q：比如执行了<code>rm text.txt</code> 误删了怎么恢复？ A：执行<code>git checkout -- text.txt</code> 把版本库的东西重新写回工作区就行了 Q：如果执行了<code>git rm text.txt</code>我们会发现工作区的text.txt也删除了，怎么恢复？ A：先撤销暂存区修改，重新放回工作区，然后再从版本库写回到工作区</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">$ git reset head text.txt</span><br><span class="line">$ git checkout -- text.txt</span><br></pre></td></tr></table></figure>

<p>Q：如果真的想从版本库里面删除文件怎么做？ A：执行<code>git commit -m &quot;delete text.txt&quot;</code>，提交后最新的版本库将不包含这个文件</p>
<h3 id="远程仓库"><a href="#远程仓库" class="headerlink" title="远程仓库"></a>远程仓库</h3><h4 id="创建SSH-Key"><a href="#创建SSH-Key" class="headerlink" title="创建SSH Key"></a>创建SSH Key</h4><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">$ ssh-keygen -t rsa -C &quot;youremail@example.com&quot;</span><br></pre></td></tr></table></figure>

<h4 id="关联远程仓库"><a href="#关联远程仓库" class="headerlink" title="关联远程仓库"></a>关联远程仓库</h4><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">$ git remote add origin https:&#x2F;&#x2F;github.com&#x2F;username&#x2F;repositoryname.git</span><br></pre></td></tr></table></figure>

<h4 id="推送到远程仓库"><a href="#推送到远程仓库" class="headerlink" title="推送到远程仓库"></a>推送到远程仓库</h4><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">$ git push -u origin master</span><br></pre></td></tr></table></figure>

<p><code>-u</code> 表示第一次推送master分支的所有内容，此后，每次本地提交后，只要有必要，就可以使用命令<code>git push origin master</code>推送最新修改。</p>
<h4 id="从远程克隆"><a href="#从远程克隆" class="headerlink" title="从远程克隆"></a>从远程克隆</h4><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">$ git clone https:&#x2F;&#x2F;github.com&#x2F;usern&#x2F;repositoryname.git</span><br></pre></td></tr></table></figure>

<h3 id="分支"><a href="#分支" class="headerlink" title="分支"></a>分支</h3><h4 id="创建分支"><a href="#创建分支" class="headerlink" title="创建分支"></a>创建分支</h4><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">$ git branch &lt;branchname&gt;</span><br></pre></td></tr></table></figure>

<h4 id="查看分支"><a href="#查看分支" class="headerlink" title="查看分支"></a>查看分支</h4><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">$ git branch</span><br></pre></td></tr></table></figure>

<p><code>git branch</code>命令会列出所有分支，当前分支前面会标一个*号。</p>
<h4 id="切换分支"><a href="#切换分支" class="headerlink" title="切换分支"></a>切换分支</h4><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">$ git checkout &lt;branchname&gt;</span><br></pre></td></tr></table></figure>

<h4 id="创建-切换分支"><a href="#创建-切换分支" class="headerlink" title="创建+切换分支"></a>创建+切换分支</h4><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">$ git checkout -b &lt;branchname&gt;</span><br></pre></td></tr></table></figure>

<h4 id="合并某分支到当前分支"><a href="#合并某分支到当前分支" class="headerlink" title="合并某分支到当前分支"></a>合并某分支到当前分支</h4><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">$ git merge &lt;branchname&gt;</span><br></pre></td></tr></table></figure>

<h4 id="删除分支"><a href="#删除分支" class="headerlink" title="删除分支"></a>删除分支</h4><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">$ git branch -d &lt;branchname&gt;</span><br></pre></td></tr></table></figure>

<h4 id="查看分支合并图"><a href="#查看分支合并图" class="headerlink" title="查看分支合并图"></a>查看分支合并图</h4><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">$ git log --graph</span><br></pre></td></tr></table></figure>

<p>当Git无法自动合并分支时，就必须首先解决冲突。解决冲突后，再提交，合并完成。用<code>git log --graph</code>命令可以看到分支合并图。</p>
<h4 id="普通模式合并分支"><a href="#普通模式合并分支" class="headerlink" title="普通模式合并分支"></a>普通模式合并分支</h4><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">$ git merge --no-ff -m &quot;description&quot; &lt;branchname&gt;</span><br></pre></td></tr></table></figure>

<p>因为本次合并要创建一个新的commit，所以加上<code>-m</code>参数，把commit描述写进去。合并分支时，加上<code>--no-ff</code>参数就可以用普通模式合并，能看出来曾经做过合并，包含作者和时间戳等信息，而fast forward合并就看不出来曾经做过合并。</p>
<h4 id="保存工作现场"><a href="#保存工作现场" class="headerlink" title="保存工作现场"></a>保存工作现场</h4><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">$ git stash</span><br></pre></td></tr></table></figure>

<h4 id="查看工作现场"><a href="#查看工作现场" class="headerlink" title="查看工作现场"></a>查看工作现场</h4><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">$ git stash list</span><br></pre></td></tr></table></figure>

<h4 id="恢复工作现场"><a href="#恢复工作现场" class="headerlink" title="恢复工作现场"></a>恢复工作现场</h4><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">$ git stash pop</span><br></pre></td></tr></table></figure>

<h4 id="丢弃一个没有合并过的分支"><a href="#丢弃一个没有合并过的分支" class="headerlink" title="丢弃一个没有合并过的分支"></a>丢弃一个没有合并过的分支</h4><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">$ git branch -D &lt;branchname&gt;</span><br></pre></td></tr></table></figure>

<h4 id="查看远程库信息"><a href="#查看远程库信息" class="headerlink" title="查看远程库信息"></a>查看远程库信息</h4><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">$ git remote -v</span><br></pre></td></tr></table></figure>

<h4 id="在本地创建和远程分支对应的分支"><a href="#在本地创建和远程分支对应的分支" class="headerlink" title="在本地创建和远程分支对应的分支"></a>在本地创建和远程分支对应的分支</h4><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">$ git checkout -b branch-name origin&#x2F;branch-name，</span><br></pre></td></tr></table></figure>

<p>本地和远程分支的名称最好一致；</p>
<h4 id="建立本地分支和远程分支的关联"><a href="#建立本地分支和远程分支的关联" class="headerlink" title="建立本地分支和远程分支的关联"></a>建立本地分支和远程分支的关联</h4><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">$ git branch --set-upstream branch-name origin&#x2F;branch-name；</span><br></pre></td></tr></table></figure>

<h4 id="从本地推送分支"><a href="#从本地推送分支" class="headerlink" title="从本地推送分支"></a>从本地推送分支</h4><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">$ git push origin branch-name</span><br></pre></td></tr></table></figure>

<p>如果推送失败，先用git pull抓取远程的新提交；</p>
<h4 id="从远程抓取分支"><a href="#从远程抓取分支" class="headerlink" title="从远程抓取分支"></a>从远程抓取分支</h4><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">$ git pull</span><br></pre></td></tr></table></figure>

<p>如果有冲突，要先处理冲突。</p>
<h3 id="标签"><a href="#标签" class="headerlink" title="标签"></a>标签</h3><p>tag就是一个让人容易记住的有意义的名字，它跟某个commit绑在一起。</p>
<h4 id="新建一个标签"><a href="#新建一个标签" class="headerlink" title="新建一个标签"></a>新建一个标签</h4><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">$ git tag &lt;tagname&gt;</span><br></pre></td></tr></table></figure>

<p>命令<code>git tag</code>用于新建一个标签，默认为HEAD，也可以指定一个commit id。</p>
<h4 id="指定标签信息"><a href="#指定标签信息" class="headerlink" title="指定标签信息"></a>指定标签信息</h4><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">$ git tag -a &lt;tagname&gt; -m &lt;description&gt; &lt;branchname&gt; or commit_id</span><br></pre></td></tr></table></figure>

<p><code>git tag -a  -m &quot;blablabla...&quot;</code>可以指定标签信息。</p>
<h4 id="PGP签名标签"><a href="#PGP签名标签" class="headerlink" title="PGP签名标签"></a>PGP签名标签</h4><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">$ git tag -s &lt;tagname&gt; -m &lt;description&gt; &lt;branchname&gt; or commit_id</span><br></pre></td></tr></table></figure>

<p><code>git tag -s  -m &quot;blablabla...&quot;</code>可以用PGP签名标签。</p>
<h4 id="查看所有标签"><a href="#查看所有标签" class="headerlink" title="查看所有标签"></a>查看所有标签</h4><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">$ git tag</span><br></pre></td></tr></table></figure>

<h4 id="推送一个本地标签"><a href="#推送一个本地标签" class="headerlink" title="推送一个本地标签"></a>推送一个本地标签</h4><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">$ git push origin &lt;tagname&gt;</span><br></pre></td></tr></table></figure>

<h4 id="推送全部未推送过的本地标签"><a href="#推送全部未推送过的本地标签" class="headerlink" title="推送全部未推送过的本地标签"></a>推送全部未推送过的本地标签</h4><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">$ git push origin --tags</span><br></pre></td></tr></table></figure>

<h4 id="删除一个本地标签"><a href="#删除一个本地标签" class="headerlink" title="删除一个本地标签"></a>删除一个本地标签</h4><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">$ git tag -d &lt;tagname&gt;</span><br></pre></td></tr></table></figure>

<h4 id="删除一个远程标签"><a href="#删除一个远程标签" class="headerlink" title="删除一个远程标签"></a>删除一个远程标签</h4><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">$ git push origin :refs&#x2F;tags&#x2F;&lt;tagname&gt;</span><br></pre></td></tr></table></figure>]]></content>
      <tags>
        <tag>笔记</tag>
        <tag>git</tag>
      </tags>
  </entry>
  <entry>
    <title>GitNotes</title>
    <url>/2020/02/23/GitNotes/</url>
    <content><![CDATA[<h1 id="一、Git教程来源"><a href="#一、Git教程来源" class="headerlink" title="一、Git教程来源"></a>一、Git教程来源</h1><p><a href="https://www.liaoxuefeng.com/wiki/896043488029600/896067074338496" target="_blank" rel="noopener">廖雪峰教程</a></p>
<a id="more"></a>

<h1 id="二、安装Git"><a href="#二、安装Git" class="headerlink" title="二、安装Git"></a>二、安装Git</h1><h3 id="1、Git官网下载"><a href="#1、Git官网下载" class="headerlink" title="1、Git官网下载"></a>1、<a href="https://git-scm.com/downloads" target="_blank" rel="noopener">Git官网下载</a></h3><h3 id="2、命令行设置"><a href="#2、命令行设置" class="headerlink" title="2、命令行设置"></a>2、命令行设置</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">git config --global user.name &quot;ZephXu07&quot;</span><br><span class="line">git config --global user.email &quot;zephaniaxu0701@gmail.com&quot;</span><br></pre></td></tr></table></figure>

<h1 id="三、创建版本库"><a href="#三、创建版本库" class="headerlink" title="三、创建版本库"></a>三、创建版本库</h1><h2 id="1、版本库定义："><a href="#1、版本库定义：" class="headerlink" title="1、版本库定义："></a>1、版本库定义：</h2><p>版本库又名仓库，英文名<strong>repository</strong>，可以简单理解成一个目录，这个目录里面的所有文件都可以被Git管理起来，每个文件的修改、删除，Git都能跟踪，以便任何时刻都可以追踪历史，或者在将来某个时刻可以“还原”。</p>
<h2 id="2、创建"><a href="#2、创建" class="headerlink" title="2、创建"></a>2、创建</h2><p>选择一个合适的地方，创建一个空目录：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">mkdir learngit</span><br><span class="line">cd learngit</span><br><span class="line">pwd</span><br><span class="line">&#x2F;e&#x2F;Desktop&#x2F;learngit</span><br></pre></td></tr></table></figure>

<p>==使用Windows系统，为了避免遇到各种莫名其妙的问题，确保目录名（包括父目录）不包含中文。==</p>
<h2 id="3、git-init"><a href="#3、git-init" class="headerlink" title="3、git init"></a>3、git init</h2><ul>
<li>此命令把这个目录变成Git可以管理的仓库：</li>
</ul>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">git init</span><br><span class="line">Initialized empty Git repository in E:&#x2F;Desktop&#x2F;learngit&#x2F;.git&#x2F;</span><br></pre></td></tr></table></figure>

<ul>
<li><p>创建后仓库为空仓库，但当前目录下多了一个<code>.git</code>目录，这个目录是Git来跟踪管理版本库的，不可随意更改。</p>
</li>
<li><p><code>.git</code>目录，那是因为这个目录默认是隐藏的，用<code>ls -ah</code>命令就可以看见。</p>
</li>
<li><p>windows可在任务管理器上方的查看中勾选<strong>隐藏的项目</strong>。</p>
</li>
</ul>
<h2 id="4、非空目录也可以进行上述命令"><a href="#4、非空目录也可以进行上述命令" class="headerlink" title="4、非空目录也可以进行上述命令"></a>4、非空目录也可以进行上述命令</h2><p>学习时尽量使用空目录。</p>
<h2 id="5、把文件添加到版本库"><a href="#5、把文件添加到版本库" class="headerlink" title="5、把文件添加到版本库"></a>5、把文件添加到版本库</h2><hr>
<p>所有的版本控制系统，其实只能跟踪文本文件的改动，比如TXT文件，网页，所有的程序代码等等，Git也不例外。版本控制系统可以告诉你每次的改动，比如在第5行加了一个单词“Linux”，在第8行删了一个单词“Windows”。而图片、视频这些二进制文件，虽然也能由版本控制系统管理，但没法跟踪文件的变化，只能把二进制文件每次改动串起来，也就是只知道图片从100KB改成了120KB，但到底改了啥，版本控制系统不知道，也没法知道。</p>
<p>不幸的是，Microsoft的Word格式是二进制格式，因此，版本控制系统是没法跟踪Word文件的改动的，前面我们举的例子只是为了演示，如果要真正使用版本控制系统，就要以纯文本方式编写文件。</p>
<p>因为文本是有编码的，比如中文有常用的GBK编码，日文有Shift_JIS编码，如果没有历史遗留问题，强烈建议使用标准的UTF-8编码，所有语言使用同一种编码，既没有冲突，又被所有平台所支持。</p>
<p>==使用Windows注意：==</p>
<p>不要使用Windows自带的<strong>记事本</strong>编辑任何文本文件。原因是Microsoft开发记事本的团队使用了一个非常弱智的行为来保存UTF-8编码的文件，他们自作聪明地在每个文件开头添加了0xefbbbf（十六进制）的字符，你会遇到很多不可思议的问题，比如，网页第一行可能会显示一个“?”，明明正确的程序一编译就报语法错误，等等，都是由记事本的弱智行为带来的。建议你下载<a href="http://notepad-plus-plus.org/" target="_blank" rel="noopener">Notepad++</a>代替记事本，不但功能强大，而且免费！记得把Notepad++的默认编码设置为==UTF-8==。</p>
<hr>
<h3 id="a、编写一个readme-txt文件，内容如下："><a href="#a、编写一个readme-txt文件，内容如下：" class="headerlink" title="a、编写一个readme.txt文件，内容如下："></a>a、编写一个<code>readme.txt</code>文件，内容如下：</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">Git is a version control system.</span><br><span class="line">Git is free software.</span><br></pre></td></tr></table></figure>

<p><strong>放到<code>learngit</code>目录下（子目录也行）。</strong></p>
<h3 id="b、git-add文件添加到仓库"><a href="#b、git-add文件添加到仓库" class="headerlink" title="b、git add文件添加到仓库"></a>b、<code>git add</code>文件添加到仓库</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">git add readme.txt</span><br></pre></td></tr></table></figure>

<p>执行上面的命令，没有任何显示，Unix的哲学是“没有消息就是好消息”，说明添加成功。</p>
<h3 id="c、git-commit文件提交到仓库"><a href="#c、git-commit文件提交到仓库" class="headerlink" title="c、git commit文件提交到仓库"></a>c、<code>git commit</code>文件提交到仓库</h3><figure class="highlight plain"><figcaption><span>commit -m"write a readme file"</span></figcaption><table><tr><td class="code"><pre><span class="line">[master (root-commit) ef9db22] write a readme file</span><br><span class="line"> 1 file changed, 2 insertions(+)</span><br><span class="line"> create mode 100644 readme.txt</span><br></pre></td></tr></table></figure>

<p><strong>解释：</strong></p>
<p><code>git commit</code>命令，<code>-m</code>后面输入的是本次提交的说明，可以输入任意内容，当然最好是有意义的，这样你就能从历史记录里方便地找到改动记录。</p>
<p>==建议按以上格式输入。==</p>
<p><code>git commit</code>命令执行成功后会告诉你，<code>1 file changed</code>：1个文件被改动（我们新添加的readme.txt文件）；<code>2 insertions</code>：插入了两行内容（readme.txt有两行内容）。</p>
<h3 id="d、为什么两步"><a href="#d、为什么两步" class="headerlink" title="d、为什么两步"></a>d、为什么两步</h3><p>因为<code>commit</code>可以一次提交很多文件，所以可以多次<code>add</code>不同的文件，比如：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">git add file1.txt</span><br><span class="line">git add file2.txt file3.txt</span><br><span class="line">git commit -m &quot;add 3 files.&quot;</span><br></pre></td></tr></table></figure>

<h3 id="e、小结"><a href="#e、小结" class="headerlink" title="e、小结"></a>e、小结</h3><p>初始化一个Git仓库，使用<code>git init</code>命令。</p>
<p>添加文件到Git仓库，分两步：</p>
<ol>
<li>使用命令<code>git add</code>，注意，可反复多次使用，添加多个文件；</li>
<li>使用命令<code>git commit -m&quot;message&quot;</code>，完成。</li>
</ol>
<h1 id="四、时光机穿梭"><a href="#四、时光机穿梭" class="headerlink" title="四、时光机穿梭"></a>四、时光机穿梭</h1><h2 id="1、"><a href="#1、" class="headerlink" title="1、"></a>1、</h2><p>继续修改readme.txt文件，改成如下内容：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">Git is a distributed version control system.</span><br><span class="line">Git is free software.</span><br></pre></td></tr></table></figure>

<p>运行<code>git status</code>命令看看结果：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">git status</span><br><span class="line">On branch master</span><br><span class="line">Changes not staged for commit:</span><br><span class="line">  (use &quot;git add &lt;file&gt;...&quot; to update what will be committed)</span><br><span class="line">  (use &quot;git restore &lt;file&gt;...&quot; to discard changes in working directory)</span><br><span class="line">        modified:   readme.txt</span><br><span class="line"></span><br><span class="line">no changes added to commit (use &quot;git add&quot; and&#x2F;or &quot;git commit -a&quot;)</span><br></pre></td></tr></table></figure>

<p><code>git status</code>命令可以让我们时刻掌握仓库当前的状态，上面的命令输出告诉我们，<code>readme.txt</code>被修改过了，但还没有准备提交的修改。</p>
<p>Git告诉我们<code>readme.txt</code>被修改了，但如果能看看具体修改了什么内容，自然是很好的。比如你休假两周从国外回来，第一天上班时，已经记不清上次怎么修改的<code>readme.txt</code>，所以，需要用<code>git diff</code>这个命令看看。</p>
<p><code>git diff</code>顾名思义就是查看difference，显示的格式正是Unix通用的diff格式，可以从上面的命令输出看到，我们在第一行添加了一个<code>distributed</code>单词。</p>
<p>知道了对<code>readme.txt</code>作了什么修改后，再把它提交到仓库就放心多了，提交修改和提交新文件是一样的两步，第一步是<code>git add</code>：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">$ git add readme.txt</span><br></pre></td></tr></table></figure>

<p>同样没有任何输出。在执行第二步<code>git commit</code>之前，我们再运行<code>git status</code>看看当前仓库的状态：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">$ git status</span><br><span class="line">On branch master</span><br><span class="line">Changes to be committed:</span><br><span class="line">  (use &quot;git reset HEAD &lt;file&gt;...&quot; to unstage)</span><br><span class="line"></span><br><span class="line">	modified:   readme.txt</span><br></pre></td></tr></table></figure>

<p><code>git status</code>告诉我们，将要被提交的修改包括<code>readme.txt</code>，下一步，就可以放心地提交了：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">$ git commit -m &quot;add distributed&quot;</span><br><span class="line">[master e475afc] add distributed</span><br><span class="line"> 1 file changed, 1 insertion(+), 1 deletion(-)</span><br></pre></td></tr></table></figure>

<p>提交后，我们再用<code>git status</code>命令看看仓库的当前状态：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">$ git status</span><br><span class="line">On branch master</span><br><span class="line">nothing to commit, working tree clean</span><br></pre></td></tr></table></figure>

<p>Git告诉我们当前没有需要提交的修改，而且，工作目录是干净（working tree clean）的。</p>
<p><strong>小结：</strong></p>
<ul>
<li>要随时掌握工作区的状态，使用<code>git status</code>命令。</li>
<li>如果<code>git status</code>告诉你有文件被修改过，用<code>git diff</code>可以查看修改内容。</li>
</ul>
<h2 id="2、版本回退"><a href="#2、版本回退" class="headerlink" title="2、版本回退"></a>2、<span id="VersionBack">版本回退</span></h2><h3 id="a、修改、提交文件"><a href="#a、修改、提交文件" class="headerlink" title="a、修改、提交文件"></a>a、修改、提交文件</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">Git is a distributed version control system.</span><br><span class="line">Git is free software distributed under the GPL.</span><br></pre></td></tr></table></figure>

<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">git add readme.txt</span><br><span class="line">git commit -m &quot;appened GPL&quot;</span><br><span class="line">[master d82eeb4] appened GPL</span><br><span class="line"> 1 file changed, 2 insertions(+), 2 deletions(-)</span><br></pre></td></tr></table></figure>

<p>像这样，不断对文件进行修改，然后不断提交修改到版本库里，就好比玩RPG游戏时，每通过一关就会自动把游戏状态存盘，如果某一关没过去，还可以选择读取前一关的状态。有些时候，在打Boss之前，会手动存盘，以便万一打Boss失败了，可以从最近的地方重新开始。Git也是一样，每当觉得文件修改到一定程度的时候，就可以“保存一个快照”，这个快照在Git中被称为<code>commit</code>。一旦把文件改乱了，或者误删了文件，还可以从最近的一个<code>commit</code>恢复，然后继续工作，而不是把几个月的工作成果全部丢失。</p>
<p><code>readme.txt</code>文件一共有几个版本被提交到Git仓库里了：</p>
<p>版本1：wrote a readme file</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">Git is a version control system.</span><br><span class="line">Git is free software.</span><br></pre></td></tr></table></figure>

<p>版本2：add distributed</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">Git is a distributed version control system.</span><br><span class="line">Git is free software.</span><br></pre></td></tr></table></figure>

<p>版本3：append GPL</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">Git is a distributed version control system.</span><br><span class="line">Git is free software distributed under the GPL.</span><br></pre></td></tr></table></figure>

<p>在Git中，我们用<code>git log</code>命令查看：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">commit 741e78cf5d2c58752369440ac50eb33962359096 (HEAD -&gt; master)</span><br><span class="line">Author: Zephxu &lt;zephaniaxu0701@gmail.com&gt;</span><br><span class="line">Date:   Sun Feb 23 14:14:32 2020 +0800</span><br><span class="line"></span><br><span class="line">    add distributed</span><br><span class="line"></span><br><span class="line">commit d82eeb45e5ad675ca5cc882569bfc88712c21b3f</span><br><span class="line">Author: Zephxu &lt;zephaniaxu0701@gmail.com&gt;</span><br><span class="line">Date:   Sun Feb 23 12:50:58 2020 +0800</span><br><span class="line"></span><br><span class="line">    appened GPL</span><br><span class="line"></span><br><span class="line">commit ef9db222591dc71c3b9a0c87a03a0886cc78533f</span><br><span class="line">Author: Zephxu &lt;zephaniaxu0701@gmail.com&gt;</span><br><span class="line">Date:   Sun Feb 23 12:30:15 2020 +0800</span><br><span class="line"></span><br><span class="line">    write a readme file</span><br></pre></td></tr></table></figure>

<p><code>git log</code>命令显示从最近到最远的提交日志。</p>
<p>如果嫌输出信息太多，看得眼花缭乱的，可以试试加上<code>--pretty=oneline</code>参数：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">$ git log --pretty&#x3D;oneline</span><br><span class="line">741e78cf5d2c58752369440ac50eb33962359096 (HEAD -&gt; master) add distributed</span><br><span class="line">d82eeb45e5ad675ca5cc882569bfc88712c21b3f appened GPL</span><br><span class="line">ef9db222591dc71c3b9a0c87a03a0886cc78533f write a readme file</span><br></pre></td></tr></table></figure>

<p>一大串类似<code>1094adb...</code>的是<code>commit id</code>（版本号），和SVN不一样，Git的<code>commit id</code>不是1，2，3……递增的数字，而是一个SHA1计算出来的一个非常大的数字，用十六进制表示，而且你看到的<code>commit id</code>和我的肯定不一样，以你自己的为准。为什么<code>commit id</code>需要用这么一大串数字表示呢？因为Git是分布式的版本控制系统，后面我们还要研究多人在同一个版本库里工作，如果大家都用1，2，3……作为版本号，那肯定就冲突了。</p>
<p>每提交一个新版本，实际上Git就会把它们自动串成一条时间线。</p>
<p>启动时光穿梭机，准备把<code>readme.txt</code>回退到上一个版本，也就是<code>add distributed</code>的那个版本，怎么做呢？</p>
<p>首先，Git必须知道当前版本是哪个版本，在Git中，用<code>HEAD</code>表示当前版本，也就是最新的提交<code>1094adb...</code>（注意我的提交ID和你的肯定不一样），上一个版本就是<code>HEAD^</code>，上上一个版本就是<code>HEAD^^</code>，当然往上100个版本写100个<code>^</code>比较容易数不过来，所以写成<code>HEAD~100</code>。</p>
<p>现在，我们要把当前版本<code>append GPL</code>回退到上一个版本<code>add distributed</code>，就可以使用<code>git reset</code>命令：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">$ git reset --hard HEAD^</span><br><span class="line">HEAD is now at d82eeb4 appened GPL</span><br></pre></td></tr></table></figure>

<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">$ git reset --hard 741e7</span><br><span class="line">HEAD is now at 741e78c add distributed</span><br></pre></td></tr></table></figure>

<p>版本号没必要写全，前几位就可以了，Git会自动去找。当然也不能只写前一两位，因为Git可能会找到多个版本号，就无法确定是哪一个了。</p>
<p>Git的版本回退速度非常快，因为Git在内部有个指向当前版本的<code>HEAD</code>指针，当你回退版本的时候，Git仅仅是把HEAD从指向<code>append GPL</code>：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">┌────┐</span><br><span class="line">│HEAD│</span><br><span class="line">└────┘</span><br><span class="line">   │</span><br><span class="line">   └──&gt; ○ append GPL</span><br><span class="line">        │</span><br><span class="line">        ○ add distributed</span><br><span class="line">        │</span><br><span class="line">        ○ wrote a readme file</span><br></pre></td></tr></table></figure>

<p>改为指向<code>add distributed</code>：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">┌────┐</span><br><span class="line">│HEAD│</span><br><span class="line">└────┘</span><br><span class="line">   │</span><br><span class="line">   │    ○ append GPL</span><br><span class="line">   │    │</span><br><span class="line">   └──&gt; ○ add distributed</span><br><span class="line">        │</span><br><span class="line">        ○ wrote a readme file</span><br></pre></td></tr></table></figure>

<p>然后顺便把工作区的文件更新了。所以你让<code>HEAD</code>指向哪个版本号，你就把当前版本定位在哪。</p>
<p>在Git中，总是有后悔药可以吃的。当你用<code>$ git reset --hard HEAD^</code>回退到<code>add distributed</code>版本时，再想恢复到<code>append GPL</code>，就必须找到<code>append GPL</code>的commit id。Git提供了一个命令<code>git reflog</code>用来记录你的每一次命令：</p>
<h3 id="b、小结"><a href="#b、小结" class="headerlink" title="b、小结"></a>b、小结</h3><ul>
<li><code>HEAD</code>指向的版本就是当前版本，因此，Git允许我们在版本的历史之间穿梭，使用命令<code>git reset --hard commit_id</code>。</li>
<li>穿梭前，用<code>git log</code>可以查看提交历史，以便确定要回退到哪个版本。</li>
<li>要重返未来，用<code>git reflog</code>查看命令历史，以便确定要回到未来的哪个版本。</li>
</ul>
<h2 id="3、工作区和暂存区"><a href="#3、工作区和暂存区" class="headerlink" title="3、工作区和暂存区"></a>3、工作区和暂存区</h2><p><strong>工作区（Working Directory）</strong></p>
<p>在电脑里能看到的目录，比如<code>learngit</code>文件夹就是一个工作区。</p>
<p>Git的版本库里存了很多东西，其中最重要的就是称为stage（或者叫index）的暂存区，还有Git自动创建的第一个分支<code>master</code>，以及指向<code>master</code>的一个指针叫<code>HEAD</code>。</p>
<p><img src="https://github.com/ZephXu07/IMG/raw/master/GitNotes-1.jpg" alt="GitNotes-1"></p>
<p>把文件往Git版本库里添加的时候，是分两步执行的：</p>
<p>第一步是用<code>git add</code>把文件添加进去，实际上就是把文件修改添加到暂存区；</p>
<p>第二步是用<code>git commit</code>提交更改，实际上就是把暂存区的所有内容提交到当前分支。</p>
<p>创建Git版本库时，Git自动为我们创建了唯一一个<code>master</code>分支，所以，现在，<code>git commit</code>就是往<code>master</code>分支上提交更改。</p>
<p>简单理解为，需要提交的文件修改通通放到暂存区，然后，一次性提交暂存区的所有修改。</p>
<p>例如：</p>
<p>对<code>readme.txt</code>做个修改，比如加上一行内容：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">Git is a distributed version control system.</span><br><span class="line">Git is free software distributed under the GPL.</span><br><span class="line">Git has a mutable index called stage.</span><br></pre></td></tr></table></figure>

<p>然后，在工作区新增一个<code>LICENSE</code>文本文件（内容随便写）。</p>
<p>先用<code>git status</code>查看一下状态：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">git status</span><br><span class="line">On branch master</span><br><span class="line">Changes not staged for commit:</span><br><span class="line">  (use &quot;git add &lt;file&gt;...&quot; to update what will be committed)</span><br><span class="line">  (use &quot;git restore &lt;file&gt;...&quot; to discard changes in working directory)</span><br><span class="line">        modified:   readme.txt</span><br><span class="line"></span><br><span class="line">Untracked files:</span><br><span class="line">  (use &quot;git add &lt;file&gt;...&quot; to include in what will be committed)</span><br><span class="line">        LICENSE</span><br><span class="line"></span><br><span class="line">no changes added to commit (use &quot;git add&quot; and&#x2F;or &quot;git commit -a&quot;)</span><br></pre></td></tr></table></figure>

<p>Git非常清楚地告诉我们，<code>readme.txt</code>被修改了，而<code>LICENSE</code>还从来没有被添加过，所以它的状态是<code>Untracked</code>。</p>
<p>现在，使用两次命令<code>git add</code>，把<code>readme.txt</code>和<code>LICENSE</code>都添加后，用<code>git status</code>再查看一下：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">git status</span><br><span class="line">On branch master</span><br><span class="line">Changes to be committed:</span><br><span class="line">  (use &quot;git restore --staged &lt;file&gt;...&quot; to unstage)</span><br><span class="line">        new file:   LICENSE</span><br><span class="line">        modified:   readme.txt</span><br></pre></td></tr></table></figure>

<p>现在，暂存区的状态就变成这样了：</p>
<p><img src="https://github.com/ZephXu07/IMG/raw/master/GitNotes-2.jpg" alt="GitNotes-2"></p>
<p>所以，<code>git add</code>命令实际上就是把要提交的所有修改放到暂存区（Stage），然后，执行<code>git commit</code>就可以一次性把暂存区的所有修改提交到分支。</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">git commit -m &quot;understand how stage works&quot;</span><br><span class="line">[master c4b6b45] understand how stage works</span><br><span class="line"> 2 files changed, 3 insertions(+), 1 deletion(-)</span><br><span class="line"> create mode 100644 LICENSE</span><br></pre></td></tr></table></figure>

<p>一旦提交后，如果没有对工作区做任何修改，那么工作区就是“干净”的：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line"> git status</span><br><span class="line">On branch master</span><br><span class="line">nothing to commit, working tree clean</span><br></pre></td></tr></table></figure>

<p>现在版本库变成了这样，暂存区就没有任何内容了：</p>
<p><img src="https://github.com/ZephXu07/IMG/blob/master/GitNotes-3.jpg" alt="GitNotes-3"></p>
<hr>
<p><strong>小结：</strong></p>
<p>Git管理的文件分为：工作区，版本库，版本库又分为暂存区stage和暂存区分支master(仓库)</p>
<p>工作区&gt;&gt;&gt;&gt;暂存区&gt;&gt;&gt;&gt;仓库</p>
<p>git add把文件从工作区&gt;&gt;&gt;&gt;暂存区，git commit把文件从暂存区&gt;&gt;&gt;&gt;仓库，</p>
<p>git diff查看工作区和暂存区差异，</p>
<p>git diff –cached查看暂存区和仓库差异，</p>
<p>git diff HEAD 查看工作区和仓库的差异，</p>
<p>git add的反向命令git checkout，撤销工作区修改，即把暂存区最新版本转移到工作区，</p>
<p>git commit的反向命令git reset HEAD，就是把仓库最新版本转移到暂存区。</p>
<p>git status就是单纯看工作区情况</p>
<hr>
<h2 id="4、管理修改"><a href="#4、管理修改" class="headerlink" title="4、管理修改"></a>4、管理修改</h2><p><strong>Git比其他版本控制系统设计得优秀，因为Git跟踪并管理的是修改，而非文件。</strong></p>
<p>比如你新增了一行，这就是一个修改，删除了一行，也是一个修改，更改了某些字符，也是一个修改，删了一些又加了一些，也是一个修改，甚至创建一个新文件，也算一个修改。</p>
<p><strong>实验：</strong></p>
<h3 id="a、对readme-txt做一个修改，比如加一行内容："><a href="#a、对readme-txt做一个修改，比如加一行内容：" class="headerlink" title="a、对readme.txt做一个修改，比如加一行内容："></a>a、对readme.txt做一个修改，比如加一行内容：</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">Git is a distributed version control system.</span><br><span class="line">Git is free software distributed under the GPL.</span><br><span class="line">Git has a mutable index called stage.</span><br><span class="line">Git tracks changes.</span><br></pre></td></tr></table></figure>

<h3 id="b、添加："><a href="#b、添加：" class="headerlink" title="b、添加："></a>b、添加：</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">$ git add readme.txt</span><br><span class="line">$ git status</span><br><span class="line"># On branch master</span><br><span class="line"># Changes to be committed:</span><br><span class="line">#   (use &quot;git reset HEAD &lt;file&gt;...&quot; to unstage)</span><br><span class="line">#</span><br><span class="line">#       modified:   readme.txt</span><br><span class="line">#</span><br></pre></td></tr></table></figure>

<h3 id="c、再修改"><a href="#c、再修改" class="headerlink" title="c、再修改"></a>c、再修改</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">Git is a distributed version control system.</span><br><span class="line">Git is free software distributed under the GPL.</span><br><span class="line">Git has a mutable index called stage.</span><br><span class="line">Git tracks changes of files.</span><br></pre></td></tr></table></figure>

<h3 id="d、提交"><a href="#d、提交" class="headerlink" title="d、提交"></a>d、提交</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">$ git commit -m &quot;git tracks changes&quot;</span><br><span class="line">[master 519219b] git tracks changes</span><br><span class="line"> 1 file changed, 1 insertion(+)</span><br></pre></td></tr></table></figure>

<h3 id="e、查看状态"><a href="#e、查看状态" class="headerlink" title="e、查看状态"></a>e、查看状态</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">$ git status</span><br><span class="line">On branch master</span><br><span class="line">Changes not staged for commit:</span><br><span class="line">  (use &quot;git add &lt;file&gt;...&quot; to update what will be committed)</span><br><span class="line">  (use &quot;git checkout -- &lt;file&gt;...&quot; to discard changes in working directory)</span><br><span class="line"></span><br><span class="line">	modified:   readme.txt</span><br><span class="line"></span><br><span class="line">no changes added to commit (use &quot;git add&quot; and&#x2F;or &quot;git commit -a&quot;)</span><br></pre></td></tr></table></figure>

<h3 id="f、解释："><a href="#f、解释：" class="headerlink" title="f、解释："></a>f、解释：</h3><p>回顾一下操作过程：</p>
<p>==第一次修改 -&gt; <code>git add</code> -&gt; 第二次修改 -&gt; <code>git commit</code>==</p>
<p>Git管理的是修改，当你用<code>git add</code>命令后，在工作区的第一次修改被放入暂存区，准备提交，但是，在工作区的第二次修改并没有放入暂存区，所以，<code>git commit</code>只负责把暂存区的修改提交了，也就是第一次的修改被提交了，第二次的修改不会被提交。</p>
<p>提交后，用<code>git diff HEAD -- readme.txt</code>命令可以查看工作区和版本库里面最新版本的区别：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">$ git diff HEAD -- readme.txt </span><br><span class="line">diff --git a&#x2F;readme.txt b&#x2F;readme.txt</span><br><span class="line">index 76d770f..a9c5755 100644</span><br><span class="line">--- a&#x2F;readme.txt</span><br><span class="line">+++ b&#x2F;readme.txt</span><br><span class="line">@@ -1,4 +1,4 @@</span><br><span class="line"> Git is a distributed version control system.</span><br><span class="line"> Git is free software distributed under the GPL.</span><br><span class="line"> Git has a mutable index called stage.</span><br><span class="line">-Git tracks changes.</span><br><span class="line">+Git tracks changes of files.</span><br></pre></td></tr></table></figure>

<p>可见，第二次修改确实没有被提交。</p>
<p>可以继续<code>git add</code>再<code>git commit</code>，也可以别着急提交第一次修改，先<code>git add</code>第二次修改，再<code>git commit</code>，就相当于把两次修改合并后一块提交了：</p>
<p>==第一次修改 -&gt; <code>git add</code> -&gt; 第二次修改 -&gt; <code>git add</code> -&gt; <code>git commit</code>==</p>
<h2 id="5、撤销修改"><a href="#5、撤销修改" class="headerlink" title="5、撤销修改"></a>5、撤销修改</h2><h3 id="a、错误一"><a href="#a、错误一" class="headerlink" title="a、错误一"></a>a、错误一</h3><p>在<code>readme.txt</code>中添加了一行：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">$ cat readme.txt</span><br><span class="line">Git is a distributed version control system.</span><br><span class="line">Git is free software distributed under the GPL.</span><br><span class="line">Git has a mutable index called stage.</span><br><span class="line">Git tracks changes of files.</span><br><span class="line">My stupid boss still prefers SVN.</span><br></pre></td></tr></table></figure>

<p>可以很容易地纠正它。你可以删掉最后一行，手动把文件恢复到上一个版本的状态。</p>
<p>用<code>git status</code>查看一下：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">$ git status</span><br><span class="line">On branch master</span><br><span class="line">Changes not staged for commit:</span><br><span class="line">  (use &quot;git add &lt;file&gt;...&quot; to update what will be committed)</span><br><span class="line">  (use &quot;git checkout -- &lt;file&gt;...&quot; to discard changes in working directory)</span><br><span class="line"></span><br><span class="line">	modified:   readme.txt</span><br><span class="line"></span><br><span class="line">no changes added to commit (use &quot;git add&quot; and&#x2F;or &quot;git commit -a&quot;)</span><br></pre></td></tr></table></figure>

<p>Git会告诉你，<code>git checkout -- file</code>可以丢弃工作区的修改：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">$ git checkout -- readme.txt</span><br></pre></td></tr></table></figure>

<p>命令<code>git checkout -- readme.txt</code>意思就是，把<code>readme.txt</code>文件在工作区的修改全部撤销，这里有两种情况：</p>
<ul>
<li>自修改后还没有被放到暂存区，现在，撤销修改就回到和版本库一模一样的状态；</li>
<li>已经添加到暂存区后，又作了修改，现在，撤销修改就回到添加到暂存区后的状态。</li>
</ul>
<p>总之，就是让这个文件回到最近一次<code>git commit</code>或<code>git add</code>时的状态。</p>
<p>查看内容：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">$ cat readme.txt</span><br><span class="line">Git is a distributed version control system.</span><br><span class="line">Git is free software distributed under the GPL.</span><br><span class="line">Git has a mutable index called stage.</span><br><span class="line">Git tracks changes of files.</span><br></pre></td></tr></table></figure>

<p>文件内容果然复原了。</p>
<hr>
<p><code>git checkout -- file</code>命令中的<code>--</code>很重要，没有<code>--</code>，就变成了“切换到另一个分支”的命令，我们在后面的分支管理中会再次遇到<code>git checkout</code>命令。</p>
<hr>
<h3 id="b、错误二"><a href="#b、错误二" class="headerlink" title="b、错误二"></a>b、错误二</h3><p>在<code>readme.txt</code>中添加了一行，还<code>git add</code>到暂存区了：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">$ cat readme.txt</span><br><span class="line">Git is a distributed version control system.</span><br><span class="line">Git is free software distributed under the GPL.</span><br><span class="line">Git has a mutable index called stage.</span><br><span class="line">Git tracks changes of files.</span><br><span class="line">My stupid boss still prefers SVN.</span><br><span class="line"></span><br><span class="line">$ git add readme.txt</span><br></pre></td></tr></table></figure>

<p><code>git status</code>查看一下，修改只是添加到了暂存区，还没有提交：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">$ git status</span><br><span class="line">On branch master</span><br><span class="line">Changes to be committed:</span><br><span class="line">  (use &quot;git reset HEAD &lt;file&gt;...&quot; to unstage)</span><br><span class="line"></span><br><span class="line">	modified:   readme.txt</span><br></pre></td></tr></table></figure>

<p>用命令<code>git reset HEAD</code>可以把暂存区的修改撤销掉（unstage），重新放回工作区：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">$ git reset HEAD readme.txt</span><br><span class="line">Unstaged changes after reset:</span><br><span class="line">M	readme.txt</span><br></pre></td></tr></table></figure>

<p><code>git reset</code>命令既可以回退版本，也可以把暂存区的修改回退到工作区。当我们用<code>HEAD</code>时，表示最新的版本。</p>
<p>再用<code>git status</code>查看一下，现在暂存区是干净的，工作区有修改：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">$ git status</span><br><span class="line">On branch master</span><br><span class="line">Changes not staged for commit:</span><br><span class="line">  (use &quot;git add &lt;file&gt;...&quot; to update what will be committed)</span><br><span class="line">  (use &quot;git checkout -- &lt;file&gt;...&quot; to discard changes in working directory)</span><br><span class="line"></span><br><span class="line">	modified:   readme.txt</span><br></pre></td></tr></table></figure>

<p>再使用针对错误一的方法：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">gi$ git checkout -- readme.txt</span><br><span class="line"></span><br><span class="line">$ git status</span><br><span class="line">On branch master</span><br><span class="line">nothing to commit, working tree clean</span><br></pre></td></tr></table></figure>

<p>完成。</p>
<h3 id="c、错误三"><a href="#c、错误三" class="headerlink" title="c、错误三"></a>c、错误三</h3><p><strong><em>还没有把自己的本地版本库推送到远程情况下。</em></strong></p>
<p>参考<a href="#VersionBack">版本回退</a>一节。</p>
<p>==注意==</p>
<p>==原来的git checkout 可以使用 git restore 代替==</p>
<p>==原来的git reset HEAD 可以使用 git restore –staged 代替==</p>
<p>==最新版的git提示都已经更换成了restore==</p>
<h2 id="6、删除文件"><a href="#6、删除文件" class="headerlink" title="6、删除文件"></a>6、删除文件</h2><p>先添加一个新文件<code>test.txt</code>到Git并且提交：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">$ git add test.txt</span><br><span class="line"></span><br><span class="line">$ git commit -m &quot;add test.txt&quot;</span><br><span class="line">[master b84166e] add test.txt</span><br><span class="line"> 1 file changed, 1 insertion(+)</span><br><span class="line"> create mode 100644 test.txt</span><br></pre></td></tr></table></figure>

<p>一般情况下，通常直接在文件管理器中把没用的文件删了，或者用<code>rm</code>命令删了：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">$ rm test.txt</span><br></pre></td></tr></table></figure>

<p>==删除工作区==</p>
<p>这个时候，Git知道你删除了文件，因此，工作区和版本库就不一致了，<code>git status</code>命令会立刻告诉哪些文件被删除了：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">$ git status</span><br><span class="line">On branch master</span><br><span class="line">Changes not staged for commit:</span><br><span class="line">  (use &quot;git add&#x2F;rm &lt;file&gt;...&quot; to update what will be committed)</span><br><span class="line">  (use &quot;git checkout -- &lt;file&gt;...&quot; to discard changes in working directory)</span><br><span class="line"></span><br><span class="line">	deleted:    test.txt</span><br><span class="line"></span><br><span class="line">no changes added to commit (use &quot;git add&quot; and&#x2F;or &quot;git commit -a&quot;)</span><br></pre></td></tr></table></figure>

<p>现在你有两个选择，一是确实要从版本库中删除该文件，那就用命令<code>git rm</code>删掉，并且<code>git commit</code>：</p>
<p>==<code>git rm</code>删除暂存区，提交后版本库也删除==</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">$ git rm test.txt</span><br><span class="line">rm &#39;test.txt&#39;</span><br><span class="line"></span><br><span class="line">$ git commit -m &quot;remove test.txt&quot;</span><br><span class="line">[master d46f35e] remove test.txt</span><br><span class="line"> 1 file changed, 1 deletion(-)</span><br><span class="line"> delete mode 100644 test.txt</span><br></pre></td></tr></table></figure>

<p>现在，文件就从版本库中被删除了。</p>
<p>==小提示：先手动删除文件，然后使用git rm <file>和git add<file>效果是一样的。==</p>
<p>另一种情况是删错了，因为版本库里还有呢，所以可以很轻松地把误删的文件恢复到最新版本：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">$ git checkout -- test.txt</span><br></pre></td></tr></table></figure>

<p><code>git checkout</code>其实是用版本库里的版本替换工作区的版本，无论工作区是修改还是删除，都可以“一键还原”。</p>
<p>==注意：从来没有被添加到版本库就被删除的文件，是无法恢复的！==</p>
<p>命令<code>git rm</code>用于删除一个文件。如果一个文件已经被提交到版本库，那么你永远不用担心误删，但是要小心，你只能恢复文件到最新版本，你会丢失<strong>最近一次提交后你修改的内容</strong>。</p>
<h1 id="五、远程仓库"><a href="#五、远程仓库" class="headerlink" title="五、远程仓库"></a>五、远程仓库</h1><h2 id="1、准备"><a href="#1、准备" class="headerlink" title="1、准备"></a>1、准备</h2><p><strong>Git是分布式版本控制系统。</strong></p>
<p>注册一个GitHub账号，就可以免费获得Git远程仓库。</p>
<p>本地Git仓库和GitHub仓库之间的传输是通过SSH加密的，进行设置。</p>
<hr>
<p><strong>第一步</strong></p>
<p><code>cd ~</code>回用户主目录，<code>ls -ah</code>查看是否有<code>.ssh</code>目录，若没有，则创建SSH Key：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">$ ssh-keygen -t rsa -C &quot;youremail@example.com&quot;</span><br></pre></td></tr></table></figure>

<p>把邮件地址换成自己的邮件地址，然后一路回车，使用默认值即可，无需设置密码。</p>
<p>再<code>ls -ah</code>可以看到<code>.ssh</code>目录里面有<code>id_rsa</code>和<code>id_rsa.pub</code>两个文件，这两个就是SSH Key的秘钥对，<code>id_rsa</code>是私钥，不能泄露出去，<code>id_rsa.pub</code>是公钥，可以放心地告诉任何人。</p>
<p><strong>第二步</strong></p>
<p>登陆GitHub，打开“settings”，“SSH and GPG keys”页面，然后，点“Add SSH Key”，填上任意Title，在Key文本框里粘贴<code>id_rsa.pub</code>文件的内容。</p>
<hr>
<p>GitHub需要识别出你推送的提交确实是你推送的，而不是别人冒充的，而Git支持SSH协议，所以，GitHub只要知道了你的公钥，就可以确认只有你自己才能推送。</p>
<p>当然，GitHub允许你添加多个Key。假定你有若干电脑，你一会儿在公司提交，一会儿在家里提交，只要把每台电脑的Key都添加到GitHub，就可以在每台电脑上往GitHub推送了。</p>
<p>最后友情提示，在GitHub上免费托管的Git仓库，任何人都可以看到喔（但只有你自己才能改）。所以，不要把敏感信息放进去。</p>
<h2 id="2、添加远程仓库"><a href="#2、添加远程仓库" class="headerlink" title="2、添加远程仓库"></a>2、添加远程仓库</h2><p>登陆GitHub，然后，在右上角找到“Create a new repo”按钮，创建一个新的仓库。</p>
<p>在Repository name填入<code>learngit</code>，其他保持默认设置，点击“Create repository”按钮，就成功地创建了一个新的Git仓库：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">git remote add origin https:&#x2F;&#x2F;github.com&#x2F;ZephXu07&#x2F;learngit.git</span><br></pre></td></tr></table></figure>

<p>再输入账号名和密码。</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">git push -u origin master</span><br></pre></td></tr></table></figure>

<p>把本地库的内容推送到远程，用<code>git push</code>命令，实际上是把当前分支<code>master</code>推送到远程。</p>
<p>由于远程库是空的，我们第一次推送<code>master</code>分支时，加上了<code>-u</code>参数，Git不但会把本地的<code>master</code>分支内容推送的远程新的<code>master</code>分支，还会把本地的<code>master</code>分支和远程的<code>master</code>分支关联起来，在以后的推送或者拉取时就可以简化命令。</p>
<p>从现在起，只要本地作了提交，就可以通过命令：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">$ git push origin master</span><br></pre></td></tr></table></figure>

<p>把本地<code>master</code>分支的最新修改推送至GitHub，现在，你就拥有了真正的分布式版本库！</p>
<p><strong>SSH警告</strong></p>
<p>当你第一次使用Git的<code>clone</code>或者<code>push</code>命令连接GitHub时，会得到一个警告：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">The authenticity of host &#39;github.com (xx.xx.xx.xx)&#39; can&#39;t be established.</span><br><span class="line">RSA key fingerprint is xx.xx.xx.xx.xx.</span><br><span class="line">Are you sure you want to continue connecting (yes&#x2F;no)?</span><br></pre></td></tr></table></figure>

<p>这是因为Git使用SSH连接，而SSH连接在第一次验证GitHub服务器的Key时，需要你确认GitHub的Key的指纹信息是否真的来自GitHub的服务器，输入<code>yes</code>回车即可。</p>
<p>Git会输出一个警告，告诉你已经把GitHub的Key添加到本机的一个信任列表里了：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">Warning: Permanently added &#39;github.com&#39; (RSA) to the list of known hosts.</span><br></pre></td></tr></table></figure>

<p>这个警告只会出现一次，后面的操作就不会有任何警告了。</p>
<p>如果你实在担心有人冒充GitHub服务器，输入<code>yes</code>前可以对照<a href="https://help.github.com/articles/what-are-github-s-ssh-key-fingerprints/" target="_blank" rel="noopener">GitHub的RSA Key的指纹信息</a>是否与SSH连接给出的一致。</p>
<p><strong>小结</strong></p>
<p>要关联一个远程库，使用命令<code>git remote add origin git@server-name:path/repo-name.git</code>；</p>
<p>关联后，使用命令<code>git push -u origin master</code>第一次推送master分支的所有内容；</p>
<p>此后，每次本地提交后，只要有必要，就可以使用命令<code>git push origin master</code>推送最新修改。</p>
<h2 id="3、从远程库克隆"><a href="#3、从远程库克隆" class="headerlink" title="3、从远程库克隆"></a>3、从远程库克隆</h2><p>登陆GitHub，创建一个新的仓库，名字叫<code>gitskills</code>；</p>
<p>勾选<code>Initialize this repository with a README</code>，这样GitHub会自动为我们创建一个<code>README.md</code>文件。创建完毕后，可以看到<code>README.md</code>文件；</p>
<p>下一步是用命令<code>git clone</code>克隆一个本地库：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">git clone git@github.com:ZephXu07&#x2F;gitSkills.git</span><br><span class="line">Cloning into &#39;gitSkills&#39;...</span><br><span class="line">remote: Enumerating objects: 3, done.</span><br><span class="line">remote: Total 3 (delta 0), reused 0 (delta 0), pack-reused 3</span><br><span class="line">Receiving objects: 100% (3&#x2F;3), done.</span><br></pre></td></tr></table></figure>

<p>进入<code>gitskills</code>目录看看，已经有<code>README.md</code>文件了。</p>
<hr>
<p>GitHub给出的地址不止一个，还可以用<code>https://github.com/michaelliao/gitskills.git</code>这样的地址。实际上，Git支持多种协议，默认的<code>git://</code>使用ssh，但也可以使用<code>https</code>等其他协议。</p>
<p>使用<code>https</code>除了速度慢以外，还有个最大的麻烦是每次推送都必须输入口令，但是在某些只开放http端口的公司内部就无法使用<code>ssh</code>协议而只能用<code>https</code>。</p>
<hr>
<p><strong>小结：</strong></p>
<p>要克隆一个仓库，首先必须知道仓库的地址，然后使用<code>git clone</code>命令克隆。</p>
<p>Git支持多种协议，包括<code>https</code>，但通过<code>ssh</code>支持的原生<code>git</code>协议速度最快。</p>
<h1 id="六、分支管理"><a href="#六、分支管理" class="headerlink" title="六、分支管理"></a>六、分支管理</h1><h2 id="1、创建与合并分支"><a href="#1、创建与合并分支" class="headerlink" title="1、创建与合并分支"></a>1、创建与合并分支</h2><p>在<a href="#VersionBack">版本回退</a>里，每次提交，Git都把它们串成一条时间线，这条时间线就是一个分支。截止到目前，只有一条时间线，在Git里，这个分支叫主分支，即<code>master</code>分支。<code>HEAD</code>严格来说不是指向提交，而是指向<code>master</code>，<code>master</code>才是指向提交的，所以，<code>HEAD</code>指向的就是当前分支。</p>
<p>一开始的时候，<code>master</code>分支是一条线，Git用<code>master</code>指向最新的提交，再用<code>HEAD</code>指向<code>master</code>，就能确定当前分支，以及当前分支的提交点：</p>
<p><img src="https://github.com/ZephXu07/IMG/raw/master/GitNotes-4.png" alt="GitNotes-4"></p>
<p>每次提交，<code>master</code>分支都会向前移动一步，这样，随着不断提交，<code>master</code>分支的线也越来越长。</p>
<p>当创建新的分支，例如<code>dev</code>时，Git新建了一个指针叫<code>dev</code>，指向<code>master</code>相同的提交，再把<code>HEAD</code>指向<code>dev</code>，就表示当前分支在<code>dev</code>上：</p>
<p><img src="https://github.com/ZephXu07/IMG/raw/master/GitNotes-5.png" alt="GitNotes-5"></p>
<p>Git创建一个分支很快，因为除了增加一个<code>dev</code>指针，改改<code>HEAD</code>的指向，工作区的文件都没有任何变化！</p>
<p>不过，从现在开始，对工作区的修改和提交就是针对<code>dev</code>分支了，比如新提交一次后，<code>dev</code>指针往前移动一步，而<code>master</code>指针不变：</p>
<p><img src="https://github.com/ZephXu07/IMG/raw/master/GitNotes-6.png" alt="GitNotes-6"></p>
<p>假如在<code>dev</code>上的工作完成了，就可以把<code>dev</code>合并到<code>master</code>上最简单的方法，就是直接把<code>master</code>指向<code>dev</code>的当前提交，就完成了合并：</p>
<p><img src="https://github.com/ZephXu07/IMG/raw/master/GitNotes-7.png" alt="GitNotes-7"></p>
<p>所以Git合并分支也很快！就改改指针，工作区内容也不变！</p>
<p>合并完分支后，甚至可以删除<code>dev</code>分支。删除<code>dev</code>分支就是把<code>dev</code>指针给删掉，删掉后，就剩下了一条<code>master</code>分支：</p>
<p><img src="https://github.com/ZephXu07/IMG/raw/master/GitNotes-8.png" alt="GitNotes-8"></p>
<p><strong>实践：</strong></p>
<p>首先，创建<code>dev</code>分支，然后切换到<code>dev</code>分支：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">$ git checkout -b dev</span><br><span class="line">Switched to a new branch &#39;dev&#39;</span><br></pre></td></tr></table></figure>

<p><code>git checkout</code>命令加上<code>-b</code>参数表示创建并切换，相当于以下两条命令：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">$ git branch dev</span><br><span class="line">$ git checkout dev</span><br><span class="line">Switched to branch &#39;dev&#39;</span><br></pre></td></tr></table></figure>

<p>然后，用<code>git branch</code>命令查看当前分支：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">$ git branch</span><br><span class="line">* dev</span><br><span class="line">  master</span><br></pre></td></tr></table></figure>

<p><code>git branch</code>命令会列出所有分支，当前分支前面会标一个<code>*</code>号。</p>
<p>然后，就可以在<code>dev</code>分支上正常提交，比如对<code>readme.txt</code>做个修改，加上一行：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">Creating a new branch is quick.</span><br></pre></td></tr></table></figure>

<p>然后提交：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">$ git add readme.txt </span><br><span class="line">$ git commit -m &quot;branch test&quot;</span><br><span class="line">[dev b17d20e] branch test</span><br><span class="line"> 1 file changed, 1 insertion(+)</span><br></pre></td></tr></table></figure>

<p>现在，<code>dev</code>分支的工作完成，我们就可以切换回<code>master</code>分支：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">$ git checkout master</span><br><span class="line">Switched to branch &#39;master&#39;</span><br></pre></td></tr></table></figure>

<p>切换回<code>master</code>分支后，再查看一个<code>readme.txt</code>文件，刚才添加的内容不见了！因为那个提交是在<code>dev</code>分支上，而<code>master</code>分支此刻的提交点并没有变：</p>
<p><img src="https://github.com/ZephXu07/IMG/raw/master/GitNotes-9.png" alt="GitNotes-9"></p>
<p>现在，把<code>dev</code>分支的工作成果合并到<code>master</code>分支上：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">$ git merge dev</span><br><span class="line">Updating d46f35e..b17d20e</span><br><span class="line">Fast-forward</span><br><span class="line"> readme.txt | 1 +</span><br><span class="line"> 1 file changed, 1 insertion(+)</span><br></pre></td></tr></table></figure>

<p><code>git merge</code>命令用于合并指定分支到当前分支。合并后，再查看<code>readme.txt</code>的内容，就可以看到，和<code>dev</code>分支的最新提交是完全一样的。</p>
<p>注意到上面的<code>Fast-forward</code>信息，Git告诉我们，这次合并是“快进模式”，也就是直接把<code>master</code>指向<code>dev</code>的当前提交，所以合并速度非常快。</p>
<p>当然，也不是每次合并都能<code>Fast-forward</code>，我们后面会讲其他方式的合并。</p>
<p>合并完成后，就可以放心地删除<code>dev</code>分支了：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">$ git branch -d dev</span><br><span class="line">Deleted branch dev (was b17d20e).</span><br></pre></td></tr></table></figure>

<p>删除后，查看<code>branch</code>，就只剩下<code>master</code>分支了：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">$ git branch</span><br><span class="line">* master</span><br></pre></td></tr></table></figure>

<p>因为创建、合并和删除分支非常快，所以Git鼓励你使用分支完成某个任务，合并后再删掉分支，这和直接在<code>master</code>分支上工作效果是一样的，但过程更安全。</p>
<hr>
<p><strong>switch</strong></p>
<p>我们注意到切换分支使用<code>git checkout</code>，而前面讲过的撤销修改则是<code>git checkout --</code>，同一个命令，有两种作用，确实有点令人迷惑。</p>
<p>实际上，切换分支这个动作，用<code>switch</code>更科学。因此，最新版本的Git提供了新的<code>git switch</code>命令来切换分支：</p>
<p>创建并切换到新的<code>dev</code>分支，可以使用：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">$ git switch -c dev</span><br></pre></td></tr></table></figure>

<p>直接切换到已有的<code>master</code>分支，可以使用：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">$ git switch master</span><br></pre></td></tr></table></figure>

<p>使用新的<code>git switch</code>命令，比<code>git checkout</code>要更容易理解。</p>
<hr>
<p><strong>小结</strong></p>
<p>==Git鼓励大量使用分支：==</p>
<p>==查看分支：<code>git branch</code>==</p>
<p>==创建分支：<code>git branch</code>==</p>
<p>==切换分支：<code>git checkout</code>或者<code>git switch</code>==</p>
<p>==创建+切换分支：<code>git checkout -b</code>或者<code>git switch -c</code>==</p>
<p>==合并某分支到当前分支：<code>git merge</code>==</p>
<p>==删除分支：<code>git branch -d</code>==</p>
<h2 id="2、解决冲突"><a href="#2、解决冲突" class="headerlink" title="2、解决冲突"></a>2、解决冲突</h2><p>准备新的<code>feature1</code>分支，继续新分支开发：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line"> git switch -c feature1</span><br><span class="line">Switched to a new branch &#39;feature1&#39;</span><br></pre></td></tr></table></figure>

<p>修改<code>readme.txt</code>最后一行，改为：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">Creating a new branch is quick AND simple.</span><br></pre></td></tr></table></figure>

<p>在<code>feature1</code>分支上提交：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">$ git add readme.txt</span><br><span class="line"></span><br><span class="line">$ git commit -m &quot;AND simple&quot;</span><br><span class="line">[feature1 14096d0] AND simple</span><br><span class="line"> 1 file changed, 1 insertion(+), 1 deletion(-)</span><br></pre></td></tr></table></figure>

<p>切换到<code>master</code>分支：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">$ git switch master</span><br><span class="line">Switched to branch &#39;master&#39;</span><br><span class="line">Your branch is ahead of &#39;origin&#x2F;master&#39; by 1 commit.</span><br><span class="line">  (use &quot;git push&quot; to publish your local commits)</span><br></pre></td></tr></table></figure>

<p>Git还会自动提示我们当前<code>master</code>分支比远程的<code>master</code>分支要超前1个提交。</p>
<p>在<code>master</code>分支上把<code>readme.txt</code>文件的最后一行改为：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">Creating a new branch is quick &amp; simple.</span><br></pre></td></tr></table></figure>

<p>提交：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">$ git add readme.txt </span><br><span class="line">$ git commit -m &quot;&amp; simple&quot;</span><br><span class="line">[master 5dc6824] &amp; simple</span><br><span class="line"> 1 file changed, 1 insertion(+), 1 deletion(-)</span><br></pre></td></tr></table></figure>

<p>现在，<code>master</code>分支和<code>feature1</code>分支各自都分别有新的提交，变成了这样：</p>
<p><img src="https://github.com/ZephXu07/IMG/raw/master/GitNotes-10.png" alt="GitNotes-10"></p>
<p>这种情况下，Git无法执行“快速合并”，只能试图把各自的修改合并起来，但这种合并就可能会有冲突，我们试试看：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">$ git merge feature1</span><br><span class="line">Auto-merging readme.txt</span><br><span class="line">CONFLICT (content): Merge conflict in readme.txt</span><br><span class="line">Automatic merge failed; fix conflicts and then commit the result.</span><br></pre></td></tr></table></figure>

<p>果然冲突了！Git告诉我们，<code>readme.txt</code>文件存在冲突，必须手动解决冲突后再提交。<code>git status</code>也可以告诉我们冲突的文件：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">$ git status</span><br><span class="line">On branch master</span><br><span class="line">Your branch is ahead of &#39;origin&#x2F;master&#39; by 2 commits.</span><br><span class="line">  (use &quot;git push&quot; to publish your local commits)</span><br><span class="line"></span><br><span class="line">You have unmerged paths.</span><br><span class="line">  (fix conflicts and run &quot;git commit&quot;)</span><br><span class="line">  (use &quot;git merge --abort&quot; to abort the merge)</span><br><span class="line"></span><br><span class="line">Unmerged paths:</span><br><span class="line">  (use &quot;git add &lt;file&gt;...&quot; to mark resolution)</span><br><span class="line"></span><br><span class="line">	both modified:   readme.txt</span><br><span class="line"></span><br><span class="line">no changes added to commit (use &quot;git add&quot; and&#x2F;or &quot;git commit -a&quot;)</span><br></pre></td></tr></table></figure>

<p>我们可以直接查看readme.txt的内容：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">Git is a distributed version control system.</span><br><span class="line">Git is free software distributed under the GPL.</span><br><span class="line">Git has a mutable index called stage.</span><br><span class="line">Git tracks changes of files.</span><br><span class="line">&lt;&lt;&lt;&lt;&lt;&lt;&lt; HEAD</span><br><span class="line">Creating a new branch is quick &amp; simple.</span><br><span class="line">&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;</span><br><span class="line">Creating a new branch is quick AND simple.</span><br><span class="line">&gt;&gt;&gt;&gt;&gt;&gt;&gt; feature1</span><br></pre></td></tr></table></figure>

<p>Git用<code>&lt;&lt;&lt;&lt;&lt;&lt;&lt;</code>，<code>=======</code>，<code>&gt;&gt;&gt;&gt;&gt;&gt;&gt;</code>标记出不同分支的内容，我们修改如下后保存：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">Creating a new branch is quick and simple.</span><br></pre></td></tr></table></figure>

<p>再提交：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">$ git add readme.txt </span><br><span class="line">$ git commit -m &quot;conflict fixed&quot;</span><br><span class="line">[master cf810e4] conflict fixed</span><br></pre></td></tr></table></figure>

<p>现在，<code>master</code>分支和<code>feature1</code>分支变成了下图所示：</p>
<p><img src="https://github.com/ZephXu07/IMG/raw/master/GitNotes-11.png" alt="GitNotes-11"></p>
<p>用带参数的<code>git log</code>也可以看到分支的合并情况：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">$ git log --graph --pretty&#x3D;oneline --abbrev-commit</span><br><span class="line">*   cf810e4 (HEAD -&gt; master) conflict fixed</span><br><span class="line">|\  </span><br><span class="line">| * 14096d0 (feature1) AND simple</span><br><span class="line">* | 5dc6824 &amp; simple</span><br><span class="line">|&#x2F;  </span><br><span class="line">* b17d20e branch test</span><br><span class="line">* d46f35e (origin&#x2F;master) remove test.txt</span><br><span class="line">* b84166e add test.txt</span><br><span class="line">* 519219b git tracks changes</span><br><span class="line">* e43a48b understand how stage works</span><br><span class="line">* 1094adb append GPL</span><br><span class="line">* e475afc add distributed</span><br><span class="line">* eaadf4e wrote a readme file</span><br></pre></td></tr></table></figure>

<p>最后，删除<code>feature1</code>分支：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">$ git branch -d feature1</span><br><span class="line">Deleted branch feature1 (was 14096d0).</span><br></pre></td></tr></table></figure>

<p>工作完成。</p>
<p><strong>小结：</strong></p>
<p>当Git无法自动合并分支时，就必须首先解决冲突。解决冲突后，再提交，合并完成。</p>
<p>解决冲突就是把Git合并失败的文件手动编辑为我们希望的内容，再提交。</p>
<p>用<code>git log --graph</code>命令可以看到分支合并图。</p>
<h2 id="3、分支管理策略"><a href="#3、分支管理策略" class="headerlink" title="3、分支管理策略"></a>3、分支管理策略</h2><p>==本节示例要与“创建与合并分支”对比，千万不要与“解决冲突对比”==</p>
<p>通常，合并分支时，如果可能，Git会用<code>Fast forward</code>模式，但这种模式下，删除分支后，会丢掉分支信息。</p>
<p>如果要强制禁用<code>Fast forward</code>模式，Git就会在merge时生成一个新的commit，这样，从分支历史上就可以看出分支信息。</p>
<p>下面我们实战一下<code>--no-ff</code>方式的<code>git merge</code>：</p>
<p>首先，仍然创建并切换<code>dev</code>分支：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">$ git switch -c dev</span><br><span class="line">Switched to a new branch &#39;dev&#39;</span><br></pre></td></tr></table></figure>

<p>修改readme.txt文件，并提交一个新的commit：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">$ git add readme.txt </span><br><span class="line">$ git commit -m &quot;add merge&quot;</span><br><span class="line">[dev f52c633] add merge</span><br><span class="line"> 1 file changed, 1 insertion(+)</span><br></pre></td></tr></table></figure>

<p>现在，我们切换回<code>master</code>：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">$ git switch master</span><br><span class="line">Switched to branch &#39;master&#39;</span><br></pre></td></tr></table></figure>

<p>准备合并<code>dev</code>分支，请注意<code>--no-ff</code>参数，表示禁用<code>Fast forward</code>：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">$ git merge --no-ff -m &quot;merge with no-ff&quot; dev</span><br><span class="line">Merge made by the &#39;recursive&#39; strategy.</span><br><span class="line"> readme.txt | 1 +</span><br><span class="line"> 1 file changed, 1 insertion(+)</span><br></pre></td></tr></table></figure>

<p>因为本次合并要创建一个新的commit，所以加上<code>-m</code>参数，把commit描述写进去。</p>
<p>合并后，我们用<code>git log</code>看看分支历史：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">$ git log --graph --pretty&#x3D;oneline --abbrev-commit</span><br><span class="line">*   e1e9c68 (HEAD -&gt; master) merge with no-ff</span><br><span class="line">|\  </span><br><span class="line">| * f52c633 (dev) add merge</span><br><span class="line">|&#x2F;  </span><br><span class="line">*   cf810e4 conflict fixed</span><br><span class="line">...</span><br></pre></td></tr></table></figure>

<p>可以看到，不使用<code>Fast forward</code>模式，merge后就像这样：</p>
<p><img src="https://github.com/ZephXu07/IMG/raw/master/GitNotes-11.png" alt="GitNotes-11"></p>
<p><code>Fast forward</code>模式：</p>
<p><img src="https://github.com/ZephXu07/IMG/raw/master/GitNotes-9.png" alt="GitNotes-9"></p>
<p><strong>分支策略</strong></p>
<p>在实际开发中，我们应该按照几个基本原则进行分支管理：</p>
<p>首先，<code>master</code>分支应该是非常稳定的，也就是仅用来发布新版本，平时不能在上面干活；</p>
<p>那在哪干活呢？干活都在<code>dev</code>分支上，也就是说，<code>dev</code>分支是不稳定的，到某个时候，比如1.0版本发布时，再把<code>dev</code>分支合并到<code>master</code>上，在<code>master</code>分支发布1.0版本；</p>
<p>你和你的小伙伴们每个人都在<code>dev</code>分支上干活，每个人都有自己的分支，时不时地往<code>dev</code>分支上合并就可以了。</p>
<p>所以，团队合作的分支看起来就像这样：</p>
<p><img src="https://github.com/ZephXu07/IMG/raw/master/GitNotes-12.png" alt="GitNotes-12"></p>
<p><strong>小结</strong></p>
<p>Git分支十分强大，在团队开发中应该充分应用。</p>
<p>合并分支时，加上<code>--no-ff</code>参数就可以用普通模式合并，合并后的历史有分支，能看出来曾经做过合并，而<code>fast forward</code>合并就看不出来曾经做过合并。</p>
<h2 id="4、Bug分支"><a href="#4、Bug分支" class="headerlink" title="4、Bug分支"></a>4、Bug分支</h2><p>在Git中，由于分支是如此的强大，所以，每个bug都可以通过一个新的临时分支来修复，修复后，合并分支，然后将临时分支删除。</p>
<p>当你接到一个修复一个代号101的bug的任务时，很自然地，你想创建一个分支<code>issue-101</code>来修复它，但是，等等，当前正在<code>dev</code>上进行的工作还没有提交：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">$ git status</span><br><span class="line">On branch dev</span><br><span class="line">Changes to be committed:</span><br><span class="line">  (use &quot;git reset HEAD &lt;file&gt;...&quot; to unstage)</span><br><span class="line"></span><br><span class="line">	new file:   hello.py</span><br><span class="line"></span><br><span class="line">Changes not staged for commit:</span><br><span class="line">  (use &quot;git add &lt;file&gt;...&quot; to update what will be committed)</span><br><span class="line">  (use &quot;git checkout -- &lt;file&gt;...&quot; to discard changes in working directory)</span><br><span class="line"></span><br><span class="line">	modified:   readme.txt</span><br></pre></td></tr></table></figure>

<p>并不是你不想提交，而是工作只进行到一半，还没法提交，预计完成还需1天时间。但是，必须在两个小时内修复该bug，怎么办？</p>
<p>幸好，Git还提供了一个<code>stash</code>功能，可以把当前工作现场“储藏”起来，等以后恢复现场后继续工作：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">$ git stash</span><br><span class="line">Saved working directory and index state WIP on dev: f52c633 add merge</span><br></pre></td></tr></table></figure>

<p>现在，用<code>git status</code>查看工作区，就是干净的（除非有没有被Git管理的文件），因此可以放心地创建分支来修复bug。</p>
<p>首先确定要在哪个分支上修复bug，假定需要在<code>master</code>分支上修复，就从<code>master</code>创建临时分支：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">$ git checkout master</span><br><span class="line">Switched to branch &#39;master&#39;</span><br><span class="line">Your branch is ahead of &#39;origin&#x2F;master&#39; by 6 commits.</span><br><span class="line">  (use &quot;git push&quot; to publish your local commits)</span><br><span class="line"></span><br><span class="line">$ git checkout -b issue-101</span><br><span class="line">Switched to a new branch &#39;issue-101&#39;</span><br></pre></td></tr></table></figure>

<p>现在修复bug，需要把“Git is free software …”改为“Git is a free software …”，然后提交：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">$ git add readme.txt </span><br><span class="line">$ git commit -m &quot;fix bug 101&quot;</span><br><span class="line">[issue-101 4c805e2] fix bug 101</span><br><span class="line"> 1 file changed, 1 insertion(+), 1 deletion(-)</span><br></pre></td></tr></table></figure>

<p>修复完成后，切换到<code>master</code>分支，并完成合并，最后删除<code>issue-101</code>分支：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">$ git switch master</span><br><span class="line">Switched to branch &#39;master&#39;</span><br><span class="line">Your branch is ahead of &#39;origin&#x2F;master&#39; by 6 commits.</span><br><span class="line">  (use &quot;git push&quot; to publish your local commits)</span><br><span class="line"></span><br><span class="line">$ git merge --no-ff -m &quot;merged bug fix 101&quot; issue-101</span><br><span class="line">Merge made by the &#39;recursive&#39; strategy.</span><br><span class="line"> readme.txt | 2 +-</span><br><span class="line"> 1 file changed, 1 insertion(+), 1 deletion(-)</span><br></pre></td></tr></table></figure>

<p>太棒了，原计划两个小时的bug修复只花了5分钟！现在，是时候接着回到<code>dev</code>分支干活了！</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">$ git switch dev</span><br><span class="line">Switched to branch &#39;dev&#39;</span><br><span class="line"></span><br><span class="line">$ git status</span><br><span class="line">On branch dev</span><br><span class="line">nothing to commit, working tree clean</span><br></pre></td></tr></table></figure>

<p>工作区是干净的，刚才的工作现场存到哪去了？用<code>git stash list</code>命令看看：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">$ git stash list</span><br><span class="line">stash@&#123;0&#125;: WIP on dev: f52c633 add merge</span><br></pre></td></tr></table></figure>

<p>工作现场还在，Git把stash内容存在某个地方了，但是需要恢复一下，有两个办法：</p>
<p>一是用<code>git stash apply</code>恢复，但是恢复后，stash内容并不删除，你需要用<code>git stash drop</code>来删除；</p>
<p>另一种方式是用<code>git stash pop</code>，恢复的同时把stash内容也删了：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">$ git stash pop</span><br><span class="line">On branch dev</span><br><span class="line">Changes to be committed:</span><br><span class="line">  (use &quot;git reset HEAD &lt;file&gt;...&quot; to unstage)</span><br><span class="line"></span><br><span class="line">	new file:   hello.py</span><br><span class="line"></span><br><span class="line">Changes not staged for commit:</span><br><span class="line">  (use &quot;git add &lt;file&gt;...&quot; to update what will be committed)</span><br><span class="line">  (use &quot;git checkout -- &lt;file&gt;...&quot; to discard changes in working directory)</span><br><span class="line"></span><br><span class="line">	modified:   readme.txt</span><br><span class="line"></span><br><span class="line">Dropped refs&#x2F;stash@&#123;0&#125; (5d677e2ee266f39ea296182fb2354265b91b3b2a)</span><br></pre></td></tr></table></figure>

<p>再用<code>git stash list</code>查看，就看不到任何stash内容了：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">$ git stash list</span><br></pre></td></tr></table></figure>

<p>你可以多次stash，恢复的时候，先用<code>git stash list</code>查看，然后恢复指定的stash，用命令：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">$ git stash apply stash@&#123;0&#125;</span><br></pre></td></tr></table></figure>

<hr>
<p>在master分支上修复了bug后，我们要想一想，dev分支是早期从master分支分出来的，所以，这个bug其实在当前dev分支上也存在。</p>
<p>那怎么在dev分支上修复同样的bug？重复操作一次，提交不就行了？</p>
<p>有木有更简单的方法？</p>
<p>有！</p>
<p>同样的bug，要在dev上修复，我们只需要把<code>4c805e2 fix bug 101</code>这个提交所做的修改“复制”到dev分支。注意：我们只想复制<code>4c805e2 fix bug 101</code>这个提交所做的修改，并不是把整个master分支merge过来。</p>
<p>为了方便操作，Git专门提供了一个<code>cherry-pick</code>命令，让我们能复制一个特定的提交到当前分支：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">$ git branch</span><br><span class="line">* dev</span><br><span class="line">  master</span><br><span class="line">$ git cherry-pick 4c805e2</span><br><span class="line">[master 1d4b803] fix bug 101</span><br><span class="line"> 1 file changed, 1 insertion(+), 1 deletion(-)</span><br></pre></td></tr></table></figure>

<p>Git自动给dev分支做了一次提交，注意这次提交的commit是<code>1d4b803</code>，它并不同于master的<code>4c805e2</code>，因为这两个commit只是改动相同，但确实是两个不同的commit。用<code>git cherry-pick</code>，我们就不需要在dev分支上手动再把修bug的过程重复一遍。</p>
<p>==使用<code>git cherry-pick</code>需要在<code>git stash</code>之前==</p>
<p>既然可以在master分支上修复bug后，在dev分支上可以“重放”这个修复过程，那么直接在dev分支上修复bug，然后在master分支上“重放”行不行？当然可以，不过你仍然需要<code>git stash</code>命令保存现场，才能从dev分支切换到master分支。</p>
<p><strong>小结：</strong></p>
<p>修复bug时，我们会通过创建新的bug分支进行修复，然后合并，最后删除；</p>
<p>当手头工作没有完成时，先把工作现场<code>git stash</code>一下，然后去修复bug，修复后，再<code>git stash pop</code>，回到工作现场；</p>
<p>在master分支上修复的bug，想要合并到当前dev分支，可以用<code>git cherry-pick</code>命令，把bug提交的修改“复制”到当前分支，避免重复劳动。</p>
<h2 id="5、Feature分支"><a href="#5、Feature分支" class="headerlink" title="5、Feature分支"></a>5、Feature分支</h2><p>添加一个新功能时，不希望因为一些实验性质的代码，把主分支搞乱了，所以，每添加一个新功能，最好新建一个feature分支，在上面开发，完成后，合并，最后，删除该feature分支。</p>
<p>于是准备开发：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">$ git switch -c feature-vulcan</span><br><span class="line">Switched to a new branch &#39;feature-vulcan&#39;</span><br></pre></td></tr></table></figure>

<p>5分钟后，开发完毕：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">$ git add vulcan.py</span><br><span class="line"></span><br><span class="line">$ git status</span><br><span class="line">On branch feature-vulcan</span><br><span class="line">Changes to be committed:</span><br><span class="line">  (use &quot;git reset HEAD &lt;file&gt;...&quot; to unstage)</span><br><span class="line"></span><br><span class="line">	new file:   vulcan.py</span><br><span class="line"></span><br><span class="line">$ git commit -m &quot;add feature vulcan&quot;</span><br><span class="line">[feature-vulcan 287773e] add feature vulcan</span><br><span class="line"> 1 file changed, 2 insertions(+)</span><br><span class="line"> create mode 100644 vulcan.py</span><br></pre></td></tr></table></figure>

<p>切回<code>dev</code>，准备合并：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">$ git switch dev</span><br></pre></td></tr></table></figure>

<p>一切顺利的话，feature分支和bug分支是类似的，合并，然后删除。</p>
<p>突然不需要了，需要删除了：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">$ git branch -d feature-vulcan</span><br><span class="line">error: The branch &#39;feature-vulcan&#39; is not fully merged.</span><br><span class="line">If you are sure you want to delete it, run &#39;git branch -D feature-vulcan&#39;.</span><br></pre></td></tr></table></figure>

<p>销毁失败。Git友情提醒，<code>feature-vulcan</code>分支还没有被合并，如果删除，将丢失掉修改，如果要强行删除，需要使用大写的<code>-D</code>参数。。</p>
<p>现在强行删除：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">$ git branch -D feature-vulcan</span><br><span class="line">Deleted branch feature-vulcan (was 287773e).</span><br></pre></td></tr></table></figure>

<p>删除成功！</p>
<p><strong>小结</strong></p>
<p>开发一个新feature，最好新建一个分支；</p>
<p>如果要丢弃一个没有被合并过的分支，可以通过<code>git branch -D</code>强行删除。</p>
<h2 id="6、多人协作"><a href="#6、多人协作" class="headerlink" title="6、多人协作"></a>6、多人协作</h2><h3 id="a、查看远程库"><a href="#a、查看远程库" class="headerlink" title="a、查看远程库"></a>a、查看远程库</h3><p>当从远程仓库克隆时，实际上Git自动把本地的<code>master</code>分支和远程的<code>master</code>分支对应起来了，并且，远程仓库的默认名称是<code>origin</code>。</p>
<p>要查看远程库的信息，用<code>git remote</code>：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">$ git remote</span><br><span class="line">origin</span><br></pre></td></tr></table></figure>

<p>或者，用<code>git remote -v</code>显示更详细的信息：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">$ git remote -v</span><br><span class="line">origin  git@github.com:michaelliao&#x2F;learngit.git (fetch)</span><br><span class="line">origin  git@github.com:michaelliao&#x2F;learngit.git (push)</span><br></pre></td></tr></table></figure>

<p>上面显示了可以抓取和推送的<code>origin</code>的地址。如果没有推送权限，就看不到push的地址。</p>
<h3 id="b、推送分支"><a href="#b、推送分支" class="headerlink" title="b、推送分支"></a>b、推送分支</h3><p>推送分支，就是把该分支上的所有本地提交推送到远程库。推送时，要指定本地分支，这样，Git就会把该分支推送到远程库对应的远程分支上：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">$ git push origin master</span><br></pre></td></tr></table></figure>

<p>如果要推送其他分支，比如<code>dev</code>，就改成：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">$ git push origin dev</span><br></pre></td></tr></table></figure>

<p>但是，并不是一定要把本地分支往远程推送，那么，哪些分支需要推送，哪些不需要呢？</p>
<ul>
<li><code>master</code>分支是主分支，因此要时刻与远程同步；</li>
<li><code>dev</code>分支是开发分支，团队所有成员都需要在上面工作，所以也需要与远程同步；</li>
<li>bug分支只用于在本地修复bug，就没必要推到远程了，除非老板要看看你每周到底修复了几个bug；</li>
<li>feature分支是否推到远程，取决于合作在上面开发。</li>
</ul>
<p>总之，就是在Git中，分支完全可以在本地自己藏着玩。</p>
<h3 id="c、抓取分支"><a href="#c、抓取分支" class="headerlink" title="c、抓取分支"></a>c、抓取分支</h3><p>多人协作时，大家都会往<code>master</code>和<code>dev</code>分支上推送各自的修改。</p>
<p>现在，模拟一个你的小伙伴，可以在另一台电脑（注意要把SSH Key添加到GitHub）或者同一台电脑的另一个目录下克隆：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">$ git clone git@github.com:michaelliao&#x2F;learngit.git</span><br><span class="line">Cloning into &#39;learngit&#39;...</span><br><span class="line">remote: Counting objects: 40, done.</span><br><span class="line">remote: Compressing objects: 100% (21&#x2F;21), done.</span><br><span class="line">remote: Total 40 (delta 14), reused 40 (delta 14), pack-reused 0</span><br><span class="line">Receiving objects: 100% (40&#x2F;40), done.</span><br><span class="line">Resolving deltas: 100% (14&#x2F;14), done.</span><br></pre></td></tr></table></figure>

<p>当你的小伙伴从远程库clone时，默认情况下，你的小伙伴只能看到本地的<code>master</code>分支。不信可以用<code>git branch</code>命令看看：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">$ git branch</span><br><span class="line">* master</span><br></pre></td></tr></table></figure>

<p>现在，你的小伙伴要在<code>dev</code>分支上开发，就必须创建远程<code>origin</code>的<code>dev</code>分支到本地，于是他用这个命令创建本地<code>dev</code>分支：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">$ git checkout -b dev origin&#x2F;dev</span><br></pre></td></tr></table></figure>

<p>现在，他就可以在<code>dev</code>上继续修改，然后，时不时地把<code>dev</code>分支<code>push</code>到远程：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">$ git add env.txt</span><br><span class="line"></span><br><span class="line">$ git commit -m &quot;add env&quot;</span><br><span class="line">[dev 7a5e5dd] add env</span><br><span class="line"> 1 file changed, 1 insertion(+)</span><br><span class="line"> create mode 100644 env.txt</span><br><span class="line"></span><br><span class="line">$ git push origin dev</span><br><span class="line">Counting objects: 3, done.</span><br><span class="line">Delta compression using up to 4 threads.</span><br><span class="line">Compressing objects: 100% (2&#x2F;2), done.</span><br><span class="line">Writing objects: 100% (3&#x2F;3), 308 bytes | 308.00 KiB&#x2F;s, done.</span><br><span class="line">Total 3 (delta 0), reused 0 (delta 0)</span><br><span class="line">To github.com:michaelliao&#x2F;learngit.git</span><br><span class="line">   f52c633..7a5e5dd  dev -&gt; dev</span><br></pre></td></tr></table></figure>

<p>你的小伙伴已经向<code>origin/dev</code>分支推送了他的提交，而碰巧你也对同样的文件作了修改，并试图推送：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">$ cat env.txt</span><br><span class="line">env</span><br><span class="line"></span><br><span class="line">$ git add env.txt</span><br><span class="line"></span><br><span class="line">$ git commit -m &quot;add new env&quot;</span><br><span class="line">[dev 7bd91f1] add new env</span><br><span class="line"> 1 file changed, 1 insertion(+)</span><br><span class="line"> create mode 100644 env.txt</span><br><span class="line"></span><br><span class="line">$ git push origin dev</span><br><span class="line">To github.com:michaelliao&#x2F;learngit.git</span><br><span class="line"> ! [rejected]        dev -&gt; dev (non-fast-forward)</span><br><span class="line">error: failed to push some refs to &#39;git@github.com:michaelliao&#x2F;learngit.git&#39;</span><br><span class="line">hint: Updates were rejected because the tip of your current branch is behind</span><br><span class="line">hint: its remote counterpart. Integrate the remote changes (e.g.</span><br><span class="line">hint: &#39;git pull ...&#39;) before pushing again.</span><br><span class="line">hint: See the &#39;Note about fast-forwards&#39; in &#39;git push --help&#39; for details.</span><br></pre></td></tr></table></figure>

<p>推送失败，因为你的小伙伴的最新提交和你试图推送的提交有冲突，解决办法也很简单，Git已经提示我们，先用<code>git pull</code>把最新的提交从<code>origin/dev</code>抓下来，然后，在本地合并，解决冲突，再推送：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">$ git pull</span><br><span class="line">There is no tracking information for the current branch.</span><br><span class="line">Please specify which branch you want to merge with.</span><br><span class="line">See git-pull(1) for details.</span><br><span class="line"></span><br><span class="line">    git pull &lt;remote&gt; &lt;branch&gt;</span><br><span class="line"></span><br><span class="line">If you wish to set tracking information for this branch you can do so with:</span><br><span class="line"></span><br><span class="line">    git branch --set-upstream-to&#x3D;origin&#x2F;&lt;branch&gt; dev</span><br></pre></td></tr></table></figure>

<p><code>git pull</code>也失败了，原因是没有指定本地<code>dev</code>分支与远程<code>origin/dev</code>分支的链接，根据提示，设置<code>dev</code>和<code>origin/dev</code>的链接：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">$ git branch --set-upstream-to&#x3D;origin&#x2F;dev dev</span><br><span class="line">Branch &#39;dev&#39; set up to track remote branch &#39;dev&#39; from &#39;origin&#39;.</span><br></pre></td></tr></table></figure>

<p>再pull：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">$ git pull</span><br><span class="line">Auto-merging env.txt</span><br><span class="line">CONFLICT (add&#x2F;add): Merge conflict in env.txt</span><br><span class="line">Automatic merge failed; fix conflicts and then commit the result.</span><br></pre></td></tr></table></figure>

<p>这回<code>git pull</code>成功，但是合并有冲突，需要手动解决，解决的方法和分支管理中的<a href="http://www.liaoxuefeng.com/wiki/896043488029600/900004111093344" target="_blank" rel="noopener">解决冲突</a>完全一样。解决后，提交，再push：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">$ git commit -m &quot;fix env conflict&quot;</span><br><span class="line">[dev 57c53ab] fix env conflict</span><br><span class="line"></span><br><span class="line">$ git push origin dev</span><br><span class="line">Counting objects: 6, done.</span><br><span class="line">Delta compression using up to 4 threads.</span><br><span class="line">Compressing objects: 100% (4&#x2F;4), done.</span><br><span class="line">Writing objects: 100% (6&#x2F;6), 621 bytes | 621.00 KiB&#x2F;s, done.</span><br><span class="line">Total 6 (delta 0), reused 0 (delta 0)</span><br><span class="line">To github.com:michaelliao&#x2F;learngit.git</span><br><span class="line">   7a5e5dd..57c53ab  dev -&gt; dev</span><br></pre></td></tr></table></figure>

<hr>
<p>因此，多人协作的工作模式通常是这样：</p>
<ol>
<li>首先，可以试图用<code>git push origin</code>推送自己的修改；</li>
<li>如果推送失败，则因为远程分支比你的本地更新，需要先用<code>git pull</code>试图合并；</li>
<li>如果合并有冲突，则解决冲突，并在本地提交；</li>
<li>没有冲突或者解决掉冲突后，再用<code>git push origin</code>推送就能成功！</li>
</ol>
<p>如果<code>git pull</code>提示<code>no tracking information</code>，则说明本地分支和远程分支的链接关系没有创建，用命令<code>git branch --set-upstream-to  origin/</code>。</p>
<p>这就是多人协作的工作模式，一旦熟悉了，就非常简单。</p>
<hr>
<p><strong>小结</strong></p>
<ul>
<li>查看远程库信息，使用<code>git remote -v</code>；</li>
<li>本地新建的分支如果不推送到远程，对其他人就是不可见的；</li>
<li>从本地推送分支，使用<code>git push origin branch-name</code>，如果推送失败，先用<code>git pull</code>抓取远程的新提交；</li>
<li>在本地创建和远程分支对应的分支，使用<code>git checkout -b branch-name origin/branch-name</code>，本地和远程分支的名称最好一致；</li>
<li>建立本地分支和远程分支的关联，使用<code>git branch --set-upstream branch-name origin/branch-name</code>；</li>
<li>从远程抓取分支，使用<code>git pull</code>，如果有冲突，要先处理冲突。</li>
</ul>
<h2 id="7、Rebase"><a href="#7、Rebase" class="headerlink" title="7、Rebase"></a>7、Rebase</h2><ul>
<li><p>rebase操作可以把本地未push的分叉提交历史整理成直线；</p>
</li>
<li><p>rebase的目的是使得我们在查看历史提交的变化时更容易，因为分叉的提交需要三方对比。</p>
</li>
</ul>
<p>不是很懂，<a href="https://www.liaoxuefeng.com/wiki/896043488029600/1216289527823648" target="_blank" rel="noopener">参考廖雪峰git教程</a>，及<a href="https://www.cnblogs.com/pinefantasy/articles/6287147.html#commentform" target="_blank" rel="noopener">博客园教程</a></p>
<p><strong>以后再研究。</strong></p>
<h1 id="七、标签管理"><a href="#七、标签管理" class="headerlink" title="七、标签管理"></a>七、标签管理</h1><p>==tag：别名==</p>
<h2 id="1、创建标签"><a href="#1、创建标签" class="headerlink" title="1、创建标签"></a>1、创建标签</h2><p>在Git中打标签非常简单，首先，切换到需要打标签的分支上：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">$ git branch</span><br><span class="line">* dev</span><br><span class="line">  master</span><br><span class="line">$ git checkout master</span><br><span class="line">Switched to branch &#39;master&#39;</span><br></pre></td></tr></table></figure>

<p>然后，敲命令<code>git tag</code>就可以打一个新标签：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">$ git tag v1.0</span><br></pre></td></tr></table></figure>

<p>可以用命令<code>git tag</code>查看所有标签：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">$ git tag</span><br><span class="line">v1.0</span><br></pre></td></tr></table></figure>

<p>默认标签是打在最新提交的commit上的。有时候，如果忘了打标签，比如，现在已经是周五了，但应该在周一打的标签没有打，怎么办？</p>
<p>方法是找到历史提交的commit id，然后打上就可以了：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">$ git log --pretty&#x3D;oneline --abbrev-commit</span><br><span class="line">12a631b (HEAD -&gt; master, tag: v1.0, origin&#x2F;master) merged bug fix 101</span><br><span class="line">4c805e2 fix bug 101</span><br><span class="line">e1e9c68 merge with no-ff</span><br><span class="line">f52c633 add merge</span><br><span class="line">cf810e4 conflict fixed</span><br><span class="line">5dc6824 &amp; simple</span><br><span class="line">14096d0 AND simple</span><br><span class="line">b17d20e branch test</span><br><span class="line">d46f35e remove test.txt</span><br><span class="line">b84166e add test.txt</span><br><span class="line">519219b git tracks changes</span><br><span class="line">e43a48b understand how stage works</span><br><span class="line">1094adb append GPL</span><br><span class="line">e475afc add distributed</span><br><span class="line">eaadf4e wrote a readme file</span><br></pre></td></tr></table></figure>

<p>比方说要对<code>add merge</code>这次提交打标签，它对应的commit id是<code>f52c633</code>，敲入命令：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">$ git tag v0.9 f52c633</span><br></pre></td></tr></table></figure>

<p>再用命令<code>git tag</code>查看标签：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">$ git tag</span><br><span class="line">v0.9</span><br><span class="line">v1.0</span><br></pre></td></tr></table></figure>

<p>注意，标签不是按时间顺序列出，而是按字母排序的。可以用<code>git show</code>查看标签信息：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">$ git show v0.9</span><br><span class="line">commit f52c63349bc3c1593499807e5c8e972b82c8f286 (tag: v0.9)</span><br><span class="line">Author: Michael Liao &lt;askxuefeng@gmail.com&gt;</span><br><span class="line">Date:   Fri May 18 21:56:54 2018 +0800</span><br><span class="line"></span><br><span class="line">    add merge</span><br><span class="line"></span><br><span class="line">diff --git a&#x2F;readme.txt b&#x2F;readme.txt</span><br><span class="line">...</span><br></pre></td></tr></table></figure>

<p>可以看到，<code>v0.9</code>确实打在<code>add merge</code>这次提交上。</p>
<p>还可以创建带有说明的标签，用<code>-a</code>指定标签名，<code>-m</code>指定说明文字：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">$ git tag -a v0.1 -m &quot;version 0.1 released&quot; 1094adb</span><br></pre></td></tr></table></figure>

<p>用命令<code>git show</code>可以看到说明文字：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">$ git show v0.1</span><br><span class="line">tag v0.1</span><br><span class="line">Tagger: Michael Liao &lt;askxuefeng@gmail.com&gt;</span><br><span class="line">Date:   Fri May 18 22:48:43 2018 +0800</span><br><span class="line"></span><br><span class="line">version 0.1 released</span><br><span class="line"></span><br><span class="line">commit 1094adb7b9b3807259d8cb349e7df1d4d6477073 (tag: v0.1)</span><br><span class="line">Author: Michael Liao &lt;askxuefeng@gmail.com&gt;</span><br><span class="line">Date:   Fri May 18 21:06:15 2018 +0800</span><br><span class="line"></span><br><span class="line">    append GPL</span><br><span class="line"></span><br><span class="line">diff --git a&#x2F;readme.txt b&#x2F;readme.txt</span><br><span class="line">...</span><br></pre></td></tr></table></figure>

<p>==注意：标签总是和某个commit挂钩。如果这个commit既出现在master分支，又出现在dev分支，那么在这两个分支上都可以看到这个标签。标签是指向commit的死指针，分支是指向commit的活指针==</p>
<p>==默认情况下，<code>git push</code> 命令并不会传送标签到远程仓库服务器上。 在创建完标签后你必须显式地推送标签到共享服务器上。 这个过程就像共享远程分支一样——你可以运行 <code>git push origin [tagname]</code>。==</p>
<p><strong>小结：</strong></p>
<ul>
<li>命令<code>git tag</code>用于新建一个标签，默认为<code>HEAD</code>，也可以指定一个commit id；</li>
<li>命令<code>git tag -a  -m &quot;blablabla...&quot;</code>可以指定标签信息；</li>
<li>命令<code>git tag</code>可以查看所有标签。</li>
</ul>
<h2 id="2、操作标签"><a href="#2、操作标签" class="headerlink" title="2、操作标签"></a>2、操作标签</h2><p>如果标签打错了，也可以删除：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">$ git tag -d v0.1</span><br><span class="line">Deleted tag &#39;v0.1&#39; (was f15b0dd)</span><br></pre></td></tr></table></figure>

<p>因为创建的标签都只存储在本地，不会自动推送到远程。所以，打错的标签可以在本地安全删除。</p>
<p>如果要推送某个标签到远程，使用命令<code>git push origin</code>：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">$ git push origin v1.0</span><br><span class="line">Total 0 (delta 0), reused 0 (delta 0)</span><br><span class="line">To github.com:michaelliao&#x2F;learngit.git</span><br><span class="line"> * [new tag]         v1.0 -&gt; v1.0</span><br></pre></td></tr></table></figure>

<p>或者，一次性推送全部尚未推送到远程的本地标签：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">$ git push origin --tags</span><br><span class="line">Total 0 (delta 0), reused 0 (delta 0)</span><br><span class="line">To github.com:michaelliao&#x2F;learngit.git</span><br><span class="line"> * [new tag]         v0.9 -&gt; v0.9</span><br></pre></td></tr></table></figure>

<p>如果标签已经推送到远程，要删除远程标签就麻烦一点，先从本地删除：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">$ git tag -d v0.9</span><br><span class="line">Deleted tag &#39;v0.9&#39; (was f52c633)</span><br></pre></td></tr></table></figure>

<p>然后，从远程删除。删除命令也是push，但是格式如下：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">$ git push origin :refs&#x2F;tags&#x2F;v0.9</span><br><span class="line">To github.com:michaelliao&#x2F;learngit.git</span><br><span class="line"> - [deleted]         v0.9</span><br></pre></td></tr></table></figure>

<p>要看看是否真的从远程库删除了标签，可以登陆GitHub查看。</p>
<p><strong>小结：</strong></p>
<ul>
<li>命令<code>git push origin</code>可以推送一个本地标签；</li>
<li>命令<code>git push origin --tags</code>可以推送全部未推送过的本地标签；</li>
<li>命令<code>git tag -d</code>可以删除一个本地标签；</li>
<li>命令<code>git push origin :refs/tags/</code>可以删除一个远程标签。</li>
</ul>
<h1 id="八、使用GitHub"><a href="#八、使用GitHub" class="headerlink" title="八、使用GitHub"></a>八、使用GitHub</h1><p>我们一直用GitHub作为免费的远程仓库，如果是个人的开源项目，放到GitHub上是完全没有问题的。其实GitHub还是一个开源协作社区，通过GitHub，既可以让别人参与你的开源项目，也可以参与别人的开源项目。</p>
<p>在GitHub出现以前，开源项目开源容易，但让广大人民群众参与进来比较困难，因为要参与，就要提交代码，而给每个想提交代码的群众都开一个账号那是不现实的，因此，群众也仅限于报个bug，即使能改掉bug，也只能把diff文件用邮件发过去，很不方便。</p>
<p>但是在GitHub上，利用Git极其强大的克隆和分支功能，广大人民群众真正可以第一次自由参与各种开源项目了。</p>
<p>如何参与一个开源项目呢？比如人气极高的bootstrap项目，这是一个非常强大的CSS框架，你可以访问它的项目主页<a href="https://github.com/twbs/bootstrap，点“Fork”就在自己的账号下克隆了一个bootstrap仓库，然后，从自己的账号下clone：" target="_blank" rel="noopener">https://github.com/twbs/bootstrap，点“Fork”就在自己的账号下克隆了一个bootstrap仓库，然后，从自己的账号下clone：</a></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">git clone git@github.com:michaelliao&#x2F;bootstrap.git</span><br></pre></td></tr></table></figure>

<p>一定要从自己的账号下clone仓库，这样你才能推送修改。如果从bootstrap的作者的仓库地址<code>git@github.com:twbs/bootstrap.git</code>克隆，因为没有权限，你将不能推送修改。</p>
<p>Bootstrap的官方仓库<code>twbs/bootstrap</code>、你在GitHub上克隆的仓库<code>my/bootstrap</code>，以及你自己克隆到本地电脑的仓库，他们的关系就像下图显示的那样：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">┌─ GitHub ────────────────────────────────────┐</span><br><span class="line">│                                             │</span><br><span class="line">│ ┌─────────────────┐     ┌─────────────────┐ │</span><br><span class="line">│ │ twbs&#x2F;bootstrap  │────&gt;│  my&#x2F;bootstrap   │ │</span><br><span class="line">│ └─────────────────┘     └─────────────────┘ │</span><br><span class="line">│                                  ▲          │</span><br><span class="line">└──────────────────────────────────┼──────────┘</span><br><span class="line">                                   ▼</span><br><span class="line">                          ┌─────────────────┐</span><br><span class="line">                          │ local&#x2F;bootstrap │</span><br><span class="line">                          └─────────────────┘</span><br></pre></td></tr></table></figure>

<p>如果你想修复bootstrap的一个bug，或者新增一个功能，立刻就可以开始干活，干完后，往自己的仓库推送。</p>
<p>如果你希望bootstrap的官方库能接受你的修改，你就可以在GitHub上发起一个pull request。当然，对方是否接受你的pull request就不一定了。</p>
<p><strong>小结</strong></p>
<ul>
<li>在GitHub上，可以任意Fork开源仓库；</li>
<li>自己拥有Fork后的仓库的读写权限；</li>
<li>可以推送pull request给官方仓库来贡献代码。</li>
</ul>
<h1 id="九、使用Gitee"><a href="#九、使用Gitee" class="headerlink" title="九、使用Gitee"></a>九、<a href="https://www.liaoxuefeng.com/wiki/896043488029600/1163625339727712" target="_blank" rel="noopener">使用Gitee</a></h1><h1 id="十、自定义Git"><a href="#十、自定义Git" class="headerlink" title="十、自定义Git"></a>十、自定义Git</h1><h2 id="1、自定义颜色"><a href="#1、自定义颜色" class="headerlink" title="1、自定义颜色"></a>1、自定义颜色</h2><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">git config --global color.ui true</span><br></pre></td></tr></table></figure>

<h2 id="2、忽略特殊文件"><a href="#2、忽略特殊文件" class="headerlink" title="2、忽略特殊文件"></a>2、忽略特殊文件</h2><p>有些时候，你必须把某些文件放到Git工作目录中，但又不能提交它们，比如保存了数据库密码的配置文件啦，等等，每次<code>git status</code>都会显示<code>Untracked files ...</code>，有强迫症的童鞋心里肯定不爽。</p>
<p>好在Git考虑到了大家的感受，这个问题解决起来也很简单，在Git工作区的根目录下创建一个特殊的<code>.gitignore</code>文件，然后把要忽略的文件名填进去，Git就会自动忽略这些文件。</p>
<p>不需要从头写<code>.gitignore</code>文件，GitHub已经为我们准备了各种配置文件，只需要组合一下就可以使用了。所有配置文件可以直接在线浏览：<a href="https://github.com/github/gitignore" target="_blank" rel="noopener">https://github.com/github/gitignore</a></p>
<p>忽略文件的原则是：</p>
<ol>
<li>忽略操作系统自动生成的文件，比如缩略图等；</li>
<li>忽略编译生成的中间文件、可执行文件等，也就是如果一个文件是通过另一个文件自动生成的，那自动生成的文件就没必要放进版本库，==比如Java编译产生的<code>.class</code>文件；==</li>
<li>忽略你自己的带有敏感信息的配置文件，比如存放口令的配置文件。</li>
</ol>
<p>举个例子：</p>
<p>假设你在Windows下进行Python开发，Windows会自动在有图片的目录下生成隐藏的缩略图文件，如果有自定义目录，目录下就会有<code>Desktop.ini</code>文件，因此你需要忽略Windows自动生成的垃圾文件：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line"># Windows:</span><br><span class="line">Thumbs.db</span><br><span class="line">ehthumbs.db</span><br><span class="line">Desktop.ini</span><br></pre></td></tr></table></figure>

<p>然后，继续忽略Python编译产生的<code>.pyc</code>、<code>.pyo</code>、<code>dist</code>等文件或目录：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line"># Python:</span><br><span class="line">*.py[cod]</span><br><span class="line">*.so</span><br><span class="line">*.egg</span><br><span class="line">*.egg-info</span><br><span class="line">dist</span><br><span class="line">build</span><br></pre></td></tr></table></figure>

<p>加上你自己定义的文件，最终得到一个完整的<code>.gitignore</code>文件，内容如下：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line"># Windows:</span><br><span class="line">Thumbs.db</span><br><span class="line">ehthumbs.db</span><br><span class="line">Desktop.ini</span><br><span class="line"></span><br><span class="line"># Python:</span><br><span class="line">*.py[cod]</span><br><span class="line">*.so</span><br><span class="line">*.egg</span><br><span class="line">*.egg-info</span><br><span class="line">dist</span><br><span class="line">build</span><br><span class="line"></span><br><span class="line"># My configurations:</span><br><span class="line">db.ini</span><br><span class="line">deploy_key_rsa</span><br></pre></td></tr></table></figure>

<p>最后一步就是把<code>.gitignore</code>也提交到Git，就完成了！当然检验<code>.gitignore</code>的标准是<code>git status</code>命令是不是说<code>working directory clean</code>。</p>
<p>使用Windows的童鞋注意了，如果你在资源管理器里新建一个<code>.gitignore</code>文件，它会非常弱智地提示你必须输入文件名，但是在文本编辑器里“保存”或者“另存为”就可以把文件保存为<code>.gitignore</code>了。</p>
<p>有些时候，你想添加一个文件到Git，但发现添加不了，原因是这个文件被<code>.gitignore</code>忽略了：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">$ git add App.class</span><br><span class="line">The following paths are ignored by one of your .gitignore files:</span><br><span class="line">App.class</span><br><span class="line">Use -f if you really want to add them.</span><br></pre></td></tr></table></figure>

<p>如果你确实想添加该文件，可以用<code>-f</code>强制添加到Git：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">$ git add -f App.class</span><br></pre></td></tr></table></figure>

<p>或者你发现，可能是<code>.gitignore</code>写得有问题，需要找出来到底哪个规则写错了，可以用<code>git check-ignore</code>命令检查：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">$ git check-ignore -v App.class</span><br><span class="line">.gitignore:3:*.class	App.class</span><br></pre></td></tr></table></figure>

<p>Git会告诉我们，<code>.gitignore</code>的第3行规则忽略了该文件，于是我们就可以知道应该修订哪个规则。</p>
<p><strong>小结</strong></p>
<ul>
<li>忽略某些文件时，需要编写<code>.gitignore</code>；</li>
<li><code>.gitignore</code>文件本身要放到版本库里，并且可以对<code>.gitignore</code>做版本管理！</li>
</ul>
<h2 id="3-、配置别名"><a href="#3-、配置别名" class="headerlink" title="3 、配置别名"></a>3 、配置别名</h2><p>有没有经常敲错命令？比如<code>git status</code>？<code>status</code>这个单词真心不好记。</p>
<p>如果敲<code>git st</code>就表示<code>git status</code>那就简单多了，当然这种偷懒的办法我们是极力赞成的。</p>
<p>我们只需要敲一行命令，告诉Git，以后<code>st</code>就表示<code>status</code>：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">$ git config --global alias.st status</span><br></pre></td></tr></table></figure>

<p>好了，现在敲<code>git st</code>看看效果。</p>
<p>当然还有别的命令可以简写，很多人都用<code>co</code>表示<code>checkout</code>，<code>ci</code>表示<code>commit</code>，<code>br</code>表示<code>branch</code>：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">$ git config --global alias.co checkout</span><br><span class="line">$ git config --global alias.ci commit</span><br><span class="line">$ git config --global alias.br branch</span><br></pre></td></tr></table></figure>

<p>以后提交就可以简写成：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">$ git ci -m &quot;bala bala bala...&quot;</span><br></pre></td></tr></table></figure>

<p><code>--global</code>参数是全局参数，也就是这些命令在这台电脑的所有Git仓库下都有用。</p>
<p>在<a href="https://www.liaoxuefeng.com/wiki/896043488029600/897889638509536" target="_blank" rel="noopener">撤销修改</a>一节中，我们知道，命令<code>git reset HEAD file</code>可以把暂存区的修改撤销掉（unstage），重新放回工作区。既然是一个unstage操作，就可以配置一个<code>unstage</code>别名：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">$ git config --global alias.unstage &#39;reset HEAD&#39;</span><br></pre></td></tr></table></figure>

<p>当你敲入命令：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">$ git unstage test.py</span><br></pre></td></tr></table></figure>

<p>实际上Git执行的是：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">$ git reset HEAD test.py</span><br></pre></td></tr></table></figure>

<p>配置一个<code>git last</code>，让其显示最后一次提交信息：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">$ git config --global alias.last &#39;log -1&#39;</span><br></pre></td></tr></table></figure>

<p>这样，用<code>git last</code>就能显示最近一次的提交：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">$ git last</span><br><span class="line">commit adca45d317e6d8a4b23f9811c3d7b7f0f180bfe2</span><br><span class="line">Merge: bd6ae48 291bea8</span><br><span class="line">Author: Michael Liao &lt;askxuefeng@gmail.com&gt;</span><br><span class="line">Date:   Thu Aug 22 22:49:22 2013 +0800</span><br><span class="line"></span><br><span class="line">    merge &amp; fix hello.py</span><br></pre></td></tr></table></figure>

<p>甚至还有人丧心病狂地把<code>lg</code>配置成了：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">git config --global alias.lg &quot;log --color --graph --pretty&#x3D;format:&#39;%Cred%h%Creset -%C(yellow)%d%Creset %s %Cgreen(%cr) %C(bold blue)&lt;%an&gt;%Creset&#39; --abbrev-commit&quot;</span><br></pre></td></tr></table></figure>

<p><strong>配置文件</strong></p>
<p>配置Git的时候，加上<code>--global</code>是针对当前用户起作用的，如果不加，那只针对当前的仓库起作用。</p>
<p>配置文件放哪了？每个仓库的Git配置文件都放在<code>.git/config</code>文件中：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">$ cat .git&#x2F;config </span><br><span class="line">[core]</span><br><span class="line">    repositoryformatversion &#x3D; 0</span><br><span class="line">    filemode &#x3D; true</span><br><span class="line">    bare &#x3D; false</span><br><span class="line">    logallrefupdates &#x3D; true</span><br><span class="line">    ignorecase &#x3D; true</span><br><span class="line">    precomposeunicode &#x3D; true</span><br><span class="line">[remote &quot;origin&quot;]</span><br><span class="line">    url &#x3D; git@github.com:michaelliao&#x2F;learngit.git</span><br><span class="line">    fetch &#x3D; +refs&#x2F;heads&#x2F;*:refs&#x2F;remotes&#x2F;origin&#x2F;*</span><br><span class="line">[branch &quot;master&quot;]</span><br><span class="line">    remote &#x3D; origin</span><br><span class="line">    merge &#x3D; refs&#x2F;heads&#x2F;master</span><br><span class="line">[alias]</span><br><span class="line">    last &#x3D; log -1</span><br></pre></td></tr></table></figure>

<p>别名就在<code>[alias]</code>后面，要删除别名，直接把对应的行删掉即可。</p>
<p>而当前用户的Git配置文件放在用户主目录下的一个隐藏文件<code>.gitconfig</code>中：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">$ cat .gitconfig</span><br><span class="line">[alias]</span><br><span class="line">    co &#x3D; checkout</span><br><span class="line">    ci &#x3D; commit</span><br><span class="line">    br &#x3D; branch</span><br><span class="line">    st &#x3D; status</span><br><span class="line">[user]</span><br><span class="line">    name &#x3D; Your Name</span><br><span class="line">    email &#x3D; your@email.com</span><br></pre></td></tr></table></figure>

<p>配置别名也可以直接修改这个文件，如果改错了，可以删掉文件重新通过命令配置。</p>
<p><strong>小结</strong></p>
<p>给Git配置好别名，就可以输入命令时偷个懒。</p>
<h2 id="4、搭建Git服务器"><a href="#4、搭建Git服务器" class="headerlink" title="4、搭建Git服务器"></a>4、搭建Git服务器</h2><p><a href="https://www.liaoxuefeng.com/wiki/896043488029600/899998870925664" target="_blank" rel="noopener">廖雪峰教程</a></p>
<p><a href="https://www.xp.cn/b.php/38538.html" target="_blank" rel="noopener">linux中如何修改用户主目录</a></p>
<p><a href="https://blog.csdn.net/qq_26990831/article/details/51857399?depth_1-utm_source=distribute.pc_relevant.none-task&utm_source=distribute.pc_relevant.none-task" target="_blank" rel="noopener">ubuntu16.04安装git和配置ssh</a></p>
<p><a href="https://blog.csdn.net/zhuming3834/article/details/74202583?depth_1-utm_source=distribute.pc_relevant.none-task&utm_source=distribute.pc_relevant.none-task" target="_blank" rel="noopener">Ubuntu 安装git和配置ssh(Coding实例)</a></p>
<p><a href="https://blog.csdn.net/guanhuazhan/article/details/89068560?depth_1-utm_source=distribute.pc_relevant.none-task&utm_source=distribute.pc_relevant.none-task" target="_blank" rel="noopener">关于ubuntu安装git并配置SSH Key</a></p>
<p><a href="https://blog.csdn.net/qq_42711815/article/details/97616278" target="_blank" rel="noopener">Ubuntu使用git的时候发现没有.ssh文件</a>==注意是<code>sudo /etc/init.d/ssh restart</code>==</p>
<p><strong>没成功，有缘再见。</strong></p>
<h1 id="十一、使用SourceTree"><a href="#十一、使用SourceTree" class="headerlink" title="十一、使用SourceTree"></a>十一、<a href="https://www.liaoxuefeng.com/wiki/896043488029600/1317161920364578" target="_blank" rel="noopener">使用SourceTree</a></h1>]]></content>
      <tags>
        <tag>笔记</tag>
        <tag>git</tag>
      </tags>
  </entry>
  <entry>
    <title>Linux Notes</title>
    <url>/2020/02/14/Linux-Notes/</url>
    <content><![CDATA[<h1 id="一、初识"><a href="#一、初识" class="headerlink" title="一、初识"></a>一、初识</h1><h2 id="1、Linux用途"><a href="#1、Linux用途" class="headerlink" title="1、Linux用途"></a>1、Linux用途</h2><p>免费的，开源的，主要用于服务器领域，性能稳定，安全。大多数企业使用的都是Linux系统。</p>
<p>Linux一般用来做服务器端的操作系统。</p>
<a id="more"></a>

<p><a href="https://www.bilibili.com/video/av71383568" target="_blank" rel="noopener">siki学院视频</a></p>
<h2 id="2、什么是操作系统"><a href="#2、什么是操作系统" class="headerlink" title="2、什么是操作系统"></a>2、什么是操作系统</h2><p>操作系统=我们开机之后进入的操作环境就是Windows操作系统 </p>
<p>电脑 = 硬件 + 操作系统（软件） </p>
<p>硬件=鼠标 键盘 显示屏 耳机 CPU 主板 内存卡 声卡，等肉眼可以看见，手可以摸得到的东西</p>
<p><strong>操作系统是我们玩电脑的时候的中介。 我们用硬件 鼠标键盘 显示器 操作系统负责收集你在键盘和鼠标上做的什么事情，然后显示给显示器，或者保存到硬盘上。</strong></p>
<p><strong>操作系统分类</strong></p>
<p>桌面、服务器、手机、嵌入式 </p>
<p>桌面操作系统：给大众使用的 Windows MacOS Linux Windows xp windows 7 windows10</p>
<p>服务器操作系统：其实服务器就是我们平时使用的电脑主机</p>
<p>Linux</p>
<p> Windows Server 2008 2010 2018 </p>
<p>Mac OS Server</p>
<p>手机（iPad）操作系统 （基于Linux）Android iOS<br>嵌入式操作系统（手机、游戏机，汽车、MP3、MP4、智能家具、人工智能软件…） Linux</p>
<p>操作系统不止Windows这一种，还有MacOS、Linux 手机上也是硬件和操作系统的结合 Android iOS 我们使用的软件（QQ 浏览器 播放器 等）的运行环境就是操作系统。我们使用编程语言开发的软<br>件，就是运行在操作系统上的，Windows和MacOS一般家用，我们可以叫做客户端，客户端操作系统。 Linux一般运行在服务器端，所以Linux可以叫做服务器端操作系统</p>
<h2 id="3、GNU-Linux-的历史"><a href="#3、GNU-Linux-的历史" class="headerlink" title="3、GNU/Linux 的历史"></a>3、GNU/Linux 的历史</h2><p>自由软件之父 Richard M. Stallman 1984 GNU Copyleft OpenSource Free GPL</p>
<p>Linux 之父 Linus Torvalds林纳斯.托瓦兹 1991<br><a href="http://www.kernel.org" target="_blank" rel="noopener">www.kernel.org</a><br> Linus之父 2017.6.19 来中国了，Linux基金会宣布在华建立正式分支机构</p>
<p>Linux 发行版介绍 RHEL/Centos/Ubuntu/Suse/Debian</p>
<p>Linux 相关认证介绍RHCE/RHCA</p>
<p><a href="https://blog.csdn.net/zengxiantao1994/article/details/53141747" target="_blank" rel="noopener">Linux发展历史</a></p>
<h2 id="4、学习方向"><a href="#4、学习方向" class="headerlink" title="4、学习方向"></a>4、学习方向</h2><p>怎么创建文件夹，怎么创建文件，怎么保存文件，怎么控制文件权限，怎么运行程序，怎么安装程序…. 那我们学习Linux也是学习怎么在Linux操作系统上做上述事情，不过Linux上没有可视化的操作界<br>面，不能使用鼠标，所以我们要学习怎么使用命令来完成我们平时在windows电脑上很常见的操作。</p>
<h2 id="5、Linux版本与虚拟机"><a href="#5、Linux版本与虚拟机" class="headerlink" title="5、Linux版本与虚拟机"></a>5、Linux版本与虚拟机</h2><p><strong>Linux版本</strong></p>
<p>​            内核版本：操作系统心脏，处理跟各种硬件打交道的工作。 </p>
<p>​                                硬件管理，内存管理，文件系统，线程管理….. </p>
<p>​                                稳定版本 开发版本<br>​            发行版本 </p>
<p>​                                内核版本+各种应用软件（办公 媒体播放 浏览器 数据库 …. ） </p>
<p>​                                Ubuntu Redhat CentOS …</p>
<p><strong>虚拟机</strong></p>
<p>​     虚拟的计算机，一台电脑上只能同时运行一个操作系统。有了虚拟机，我们可以现有计算机的基础上，安装多个其他的操作系统（包括Linux Windows），可以很方便通过虚拟机对操作系统进行安装、卸载，这样方便我们学习别的操作系统。 虚拟机其实就是一个软件，虚拟的计算机，它用来模拟一个真实存在的计算机，我们可以安装操作系统在这个模拟的计算机环境上。</p>
<p><a href="https://blog.csdn.net/weixin_43925504/article/details/89099541" target="_blank" rel="noopener">VMWare安装</a></p>
<p><a href="https://cn.ubuntu.com/download" target="_blank" rel="noopener">Ubuntu</a></p>
<p>*<em>Linux文件系统（目录和文件） *</em></p>
<p>Windows下有盘符</p>
<p>Linux没有盘符的概念，只有一个根目录</p>
<p>不同的目录有哪些作用： </p>
<p>/home/用户名 存储一些用户相关的文档 </p>
<p>/usr 安装的应用程序 </p>
<p><a href="http://www.cnblogs.com/duanji/p/yueding2.html" target="_blank" rel="noopener">Linux各个目录以及每个目录的作用介绍</a></p>
<h1 id="二、Linux终端命令"><a href="#二、Linux终端命令" class="headerlink" title="二、Linux终端命令"></a>二、Linux终端命令</h1><h2 id="1、目录相关"><a href="#1、目录相关" class="headerlink" title="1、目录相关"></a>1、目录相关</h2><p><strong>ls</strong>（list查看所有内容）</p>
<ul>
<li><p>ls -l以列表形式展示（缩写<strong>ll</strong>）</p>
</li>
<li><p>ls -a显示全部文件，包含隐藏文件(<strong>.开头的文件都是隐藏文件，创建时加“.即可隐藏”</strong> )</p>
<p>第一个表示当前目录，第二个表示上级目录，表明文件之间的层级关系。</p>
<p><img src="https://github.com/ZephXu07/IMG/raw/master/Linux-1.png" alt="Linux-1"></p>
</li>
<li><p>以上两个可组合ls -l -a</p>
</li>
<li><p>ls -l -h以列显示，大小单位为K，没有的话单位为字节（Byte）</p>
</li>
<li><p>ls -lh，ls -lha简写，顺序可变</p>
</li>
<li><p>ls通配符（<a href="https://www.cnblogs.com/0zcl/p/6821213.html" target="_blank" rel="noopener">更加详细介绍</a>）</p>
<p><img src="https://github.com/ZephXu07/IMG/raw/master/Linux-2.png" alt="Linux-2"></p>
</li>
</ul>
<p><strong>pwd</strong>（print work directory查看所在路径）</p>
<p><strong>cd</strong>（change directory打开目 录）</p>
<ul>
<li><p>cd .：切回当前目录</p>
</li>
<li><p>cd .. ：切回上一级</p>
</li>
<li><p>cd ../..：切回上一级的再上一级</p>
</li>
<li><p>cd ~：回到home目录）</p>
</li>
<li><p>cd -切换最近的两个目录来回切换 （在当前目录和上一个目录 来回切换）</p>
</li>
<li><p>相对路径：相对于当前目录</p>
</li>
<li><p>绝对路径：从根路径开始完整的路径（从\和~开始的路径都是绝对路径）</p>
</li>
</ul>
<p><strong>tab</strong> 自动补全），可以补全文件 目录（<strong><em>当且仅当只有唯一一个符合前几个字母的文件，多个时按一次没有效果，按两次会显示所有相关目录</em></strong>）</p>
<p><strong>方向键</strong> 上下 上一个命令 下一个命令</p>
<h2 id="2、文件相关"><a href="#2、文件相关" class="headerlink" title="2、文件相关"></a>2、文件相关</h2><p><strong>文件\文件夹的</strong>：创建、删除、移动（剪切、重命名）、复制</p>
<ul>
<li>touch（创建文件）</li>
<li><ul>
<li>创建隐藏文件 touch .test.txt</li>
</ul>
</li>
<li>mkdir（创建文件夹）</li>
<li>rm（移除）</li>
<li><ul>
<li>rm xx （文件）</li>
<li>rm -d xx  （空文件夹）</li>
<li>rm -r xx （有内容文件夹）</li>
</ul>
</li>
<li>mv（移动） mv 文件 目录   可使用相对路径或绝对路径</li>
<li><ul>
<li>mv 125.odt .    提示是同一个文件</li>
<li>mv 125.odt ./126.odt     重命名</li>
</ul>
</li>
<li>cp（复制） </li>
<li><ul>
<li>文件    cp 123.odt bb  复制123.odt到相对当前目录的bb目录下</li>
</ul>
</li>
<li><ul>
<li>目录   cp -r bb/aa .    复制bb目录下的aa文件夹到当前目录</li>
</ul>
</li>
</ul>
<h2 id="3、Linux命令的格式"><a href="#3、Linux命令的格式" class="headerlink" title="3、Linux命令的格式"></a>3、Linux命令的格式</h2><p>*<em>cmd -option parameter *</em></p>
<p>cmd是命令，就是一个操作 </p>
<p>parameter一般是要要做的对象 </p>
<p>option一般是用来修改parameter的，就是这个是一个什么样的对象 </p>
<p>杀一个男人 杀是命令 人是参数 男是修饰</p>
<p><strong>命令 –help</strong>：查找帮助手册</p>
<p><strong>man 命令</strong>：详细手册</p>
<h2 id="4、which查看命令所在位置"><a href="#4、which查看命令所在位置" class="headerlink" title="4、which查看命令所在位置"></a>4、which查看命令所在位置</h2><p>每个命令（ls touch mkdir mv cd）执行的时候，都会去执行一个程序，这个程序文件里面保存了当我们 执行某个命令的时候需要做哪些事情，来完成这个命令，并输出结果。 </p>
<p><strong>which cd 为空，cd是shell内置的命令</strong></p>
<p>/bin     binary，二进制文件，普通命令<br>/sbin     system binary,系统二进制文件,需要有系统权 </p>
<p>/usr/bin     用户安装的应用程序<br>/usr/sbin     超管安装的应用程序</p>
<p> 带s和不带s的区别，带usr和不带usr的区别</p>
<h2 id="5、文件搜索"><a href="#5、文件搜索" class="headerlink" title="5、文件搜索"></a>5、文件搜索</h2><h3 id="a、ls通配符：仅限于当前目录下的模糊查找"><a href="#a、ls通配符：仅限于当前目录下的模糊查找" class="headerlink" title="a、ls通配符：仅限于当前目录下的模糊查找"></a>a、ls通配符：仅限于当前目录下的模糊查找</h3><h3 id="b、find-搜索范围-搜索条件"><a href="#b、find-搜索范围-搜索条件" class="headerlink" title="b、find 搜索范围 搜索条件"></a>b、find 搜索范围 搜索条件</h3><p>示例一：find /home -name 123.odt //精确搜索</p>
<p>示例二：find /home -name 123* //模糊搜索 其他用法：<em>123</em> 123？？ </p>
<p>示例三：find /home -iname abc //选项-i 不区分大小写</p>
<p>示例四：find / -size +204800    //根据文件大小搜索，1数据块=512字节Byte=0.5KB</p>
<p>-204800 204800 // 100MB 100<em>1024KB 100</em>1024<em>2</em>数据块</p>
<p>示例五：find /home -user siki    //文件所属人</p>
<p>示例六：find /home -mmin -5     文件内容上次被修改时间在5分钟以内 </p>
<ul>
<li><p>mmin上次文件内容被修改时间 </p>
</li>
<li><p>amin 上次文件被访问时间 </p>
</li>
<li><p>cmin 上次文件属性（文件的权限）</p>
</li>
<li><p>被修改时间 </p>
</li>
<li><ul>
<li>-5 5分钟以内</li>
</ul>
</li>
<li><ul>
<li>+5超过5分钟</li>
</ul>
</li>
</ul>
<p>示例七：find /home -type f </p>
<ul>
<li>-type文件类型 f文件 d目录（文件夹）l软链接文件（Link）</li>
</ul>
<p>*<em>-a and同时满足 -o or或者，满足其中一个即可 *</em></p>
<p>示例八：find /home -name 123 -a -size +5</p>
<p>示例九：ls -i <strong>显示每个文件各自的id（不重复）</strong></p>
<p>find /home -inum 3434    通过id搜索</p>
<h3 id="c、locate"><a href="#c、locate" class="headerlink" title="c、locate"></a>c、locate</h3><p>locate搜索比较快，因为它搜索的是自己的索引库 </p>
<ul>
<li><p>优点：查找快</p>
</li>
<li><p>缺点：最新文件找不到（需要时间更新索引库）</p>
<p>locate 123.odt    会搜索包含’123.odt’在内的所有文件，若是搜索目录，即目录下所有文件将会被搜索到</p>
</li>
<li><p>sudo updatedb    命令前面加sudo表示通过管理员方式运行</p>
</li>
</ul>
<h2 id="6、文件内容"><a href="#6、文件内容" class="headerlink" title="6、文件内容"></a>6、文件内容</h2><h3 id="a、查看文件内容：cat、more"><a href="#a、查看文件内容：cat、more" class="headerlink" title="a、查看文件内容：cat、more"></a>a、查看文件内容：cat、more</h3><ul>
<li>cat xx.txt 显示所有文件内容 </li>
<li>cat -b xx.txt 显示行号 去除空行 </li>
<li>cat -n xx.txt 显示行号 包含空行 </li>
<li>more xx.txt 分页显示文件内容 下一页（空格） 上一页（b） 下一行（Enter）</li>
</ul>
<h3 id="b、搜索文件内容：grep"><a href="#b、搜索文件内容：grep" class="headerlink" title="b、搜索文件内容：grep"></a>b、搜索文件内容：grep</h3><ul>
<li>grep xx xxx.txt   显示包含内容行</li>
<li>grep -n xx xx.txt 显示包含内容行的行号 </li>
<li>grep -v xx xx.txt 去掉包含内容的行，显示其他所有内容 </li>
<li><ul>
<li>grep -v ‘#’ xx.txt 去掉带#的行（去掉带注释的行） ‘#’ </li>
</ul>
</li>
<li><ul>
<li>grep -v ^’#’ xx.txt 去掉以#开头的行</li>
</ul>
</li>
<li><ul>
<li>grep -v $‘#’ xx.ttxt    去掉以$开头的行</li>
</ul>
</li>
<li>grep -i xx xx.txt 忽略大小写搜索 </li>
</ul>
<h3 id="c、多个文件的编辑"><a href="#c、多个文件的编辑" class="headerlink" title="c、多个文件的编辑"></a>c、多个文件的编辑</h3><p><strong><em>linux中文件的后缀可以加可不加，加上方便识别，在linux中很多文本是没有任何后缀的。</em></strong></p>
<ul>
<li><p>echo xxx </p>
</li>
<li><p>echo xxx &gt; xxx.txt 写入（覆盖） </p>
</li>
<li><p>echo xxx &gt;&gt; xxx.txt 追加（末尾）</p>
</li>
<li><ul>
<li>ls &gt; xx.txt </li>
</ul>
</li>
<li><ul>
<li>ls &gt;&gt; xx.txt </li>
</ul>
</li>
<li><ul>
<li>ls -lh &gt; xx.txt</li>
<li>将ls得到的写入</li>
</ul>
</li>
</ul>
<p><strong><em>任何有结果的命令均可使用”&gt;”或“&gt;&gt;”输出到某个文件中，文件不存在则创建。</em></strong></p>
<h3 id="d、管道"><a href="#d、管道" class="headerlink" title="d、管道"></a>d、管道</h3><p>把一个命令的输出 通过管道连接 作为另一个命令的输入</p>
<p>输出就是命令的结果，输入一般是一个命令的参数（cat xxx.txt 这个txt就是cat的输入）</p>
<p>管道连接通过 ==|== 建立。</p>
<p><strong>ls -lh | grep 125</strong></p>
<h3 id="e、文件软链接：ln-文件-文件夹-软链接"><a href="#e、文件软链接：ln-文件-文件夹-软链接" class="headerlink" title="e、文件软链接：ln 文件/文件夹 软链接"></a>e、文件软链接：ln 文件/文件夹 软链接</h3><h1 id="三、用户管理、用户组管理-和权限"><a href="#三、用户管理、用户组管理-和权限" class="headerlink" title="三、用户管理、用户组管理 和权限"></a>三、用户管理、用户组管理 和权限</h1><p>Linux是多用户的， 服务器是多个人管理（运维人员是多个）。</p>
<h2 id="1、root用户"><a href="#1、root用户" class="headerlink" title="1、root用户"></a>1、root用户</h2><p>超管和普通用户的提示符的区别，为什么？</p>
<p>安装系统的时候不是默认启用一个root用户，而是创建一个普通用户来使用呢？</p>
<p> root具有所有权限，能力越大，责任越大，越容易闯祸。 日常维护工作使用普通用户完成，除非遇到系统管理的工作，使用root来完成！</p>
<h2 id="2、普通用户添加"><a href="#2、普通用户添加" class="headerlink" title="2、普通用户添加"></a>2、普通用户添加</h2><p>用户添加 </p>
<ul>
<li><p>第一步：添加用户名 </p>
</li>
<li><ul>
<li>sudo useradd xx （-m：创建家目录 和 -g：指定所在的组 选项） </li>
</ul>
</li>
<li><p>第二步：设置密码(不设置用户名的用户是不能使用的)（注意是passwd不是password） </p>
</li>
<li><ul>
<li>sudo passwd xx （sudo passwd xx）</li>
<li>直接passwd是设置当前用户的密码</li>
</ul>
</li>
</ul>
<p>==关于sudo命令== </p>
<p><strong><em>是允许系统管理员让普通用户执行一些或者全部的root命令的一个工具，如useradd，halt，reboot，su 等等。这样不仅减少了root用户的登录 和管理时间，同样也提高了安全性。 用户使用sudo的时候，会验证当前用户的密码，然后又5分钟的有效期，有效期内执行sudo不需要在再输 入密码！ 切换到root就不需要sudo命令了。</em></strong></p>
<p><a href="https://baike.baidu.com/item/sudo/7337623?fr=aladdin" target="_blank" rel="noopener">相关百科</a></p>
<h2 id="3、用户组"><a href="#3、用户组" class="headerlink" title="3、用户组"></a>3、用户组</h2><p>每个用户都有一个初始组，可以有零个或者多个附加组。用户组的作用，是为了方便权限控制。（附加组 就是为了给用户附加别的权限） 当创建用户的时候，系统会创建一个跟用户名同名的组。 </p>
<p>文件属性：所属用户、所属用户组</p>
<h2 id="4、用户切换"><a href="#4、用户切换" class="headerlink" title="4、用户切换"></a>4、用户切换</h2><ul>
<li><p>su xx    用户切换</p>
</li>
<li><p>su - xx      用户切换，并回到家目录</p>
</li>
<li><p>exit （ctrl+D）退出当前用户，返回上一个用户（从哪个用户切换过来的）如果没有上一个用户，直接退出终端</p>
</li>
</ul>
<h2 id="5、用户删除"><a href="#5、用户删除" class="headerlink" title="5、用户删除"></a>5、用户删除</h2><p>userdel xx </p>
<p>userdel -r xx 删除家目录 </p>
<p>userdel -f xx 强制删除，即使用户正在登陆系统</p>
<h2 id="6、用户组管理"><a href="#6、用户组管理" class="headerlink" title="6、用户组管理"></a>6、用户组管理</h2><p>groupadd xx    添加 </p>
<ul>
<li>cat /etc/group 确认组是否被添加成功</li>
</ul>
<p>goupmod -n xx newxx 改名<br>groupdel xx   删除</p>
<h2 id="7、Linux中的ID"><a href="#7、Linux中的ID" class="headerlink" title="7、Linux中的ID"></a>7、Linux中的ID</h2><p>文件id uid gid</p>
<ul>
<li><p>ls -i     查看文件id</p>
</li>
<li><p>id    查看当前用户的uid和gid</p>
</li>
<li><p>id xx     查看xx用户的uid和gid</p>
</li>
</ul>
<h2 id="8、关于配置文件"><a href="#8、关于配置文件" class="headerlink" title="8、关于配置文件"></a>8、关于配置文件</h2><h3 id="a、-etc-group"><a href="#a、-etc-group" class="headerlink" title="a、/etc/group"></a>a、/etc/group</h3><p>配置当前系统有哪些用户组 1，组名 2，组密码标志 3，GID 4，组中附加用户</p>
<h3 id="b、-etc-passwd"><a href="#b、-etc-passwd" class="headerlink" title="b、/etc/passwd"></a>b、/etc/passwd</h3><p>配置当前系统有哪些用户，以及用户的密码（密码在影子文件里面，passwd的影子文 件）</p>
<p><img src="https://github.com/ZephXu07/IMG/raw/master/Linux-3.png" alt="Linux-3"></p>
<p>1用户名 2密码标志 3UID 4GID 5用户全名 6家目录 7使用的shell</p>
<h3 id="c、什么是shell-（命令-cd-ls-…）"><a href="#c、什么是shell-（命令-cd-ls-…）" class="headerlink" title="c、什么是shell?（命令 cd ls …）"></a>c、什么是shell?（命令 cd ls …）</h3><p>shell是用来解析命令的，它接收用户命令，然后调用相应的程序执行。 </p>
<p>shell相当于一个翻译，翻译我们的命令，让机器听懂。 </p>
<ul>
<li>第一种shell：/bin/bash    翻译一号    </li>
<li>第二种shell：/usr/sbin/nologin   翻译二号</li>
<li>第三种shell：/bin/sh   翻译二号（我们创建用户的时候的shell）</li>
</ul>
<p><img src="https://github.com/ZephXu07/IMG/raw/master/Linux-4.png" alt="Linux-4"></p>
<p>查看所有shell： cat /etc/shells</p>
<p>修改shell：chsh</p>
<h3 id="d、影子文件"><a href="#d、影子文件" class="headerlink" title="d、影子文件"></a>d、影子文件</h3><p>/etc/shadow</p>
<p>/etc/gshadow</p>
<p>存放密码，root影子文件中密码为加密，组影子文件中密码未设置显示为“!”。</p>
<h3 id="e、命令执行顺序"><a href="#e、命令执行顺序" class="headerlink" title="e、命令执行顺序"></a>e、命令执行顺序</h3><p><img src="https://github.com/ZephXu07/IMG/raw/master/Linux-5.png" alt="Linux-5"></p>
<h3 id="f、which-cd显示空白？"><a href="#f、which-cd显示空白？" class="headerlink" title="f、which cd显示空白？"></a>f、which cd显示空白？</h3><ul>
<li><p>1，为什么没有命令文件</p>
</li>
<li><ul>
<li>因为cd这个命令是放在shell（bash里面的）</li>
</ul>
</li>
<li><p>2，什么是内置命令（cd dirs ls）</p>
</li>
<li><ul>
<li>内置命令在系统启动时就调入内存，是常驻内存的，所以执行效率高。 而外部命令是系统的软件功能，用户需要时才从硬盘中读入内存。 大部分内置命令都是内置在shell中的，也有一些内置命令有自己单独的文件。 系统启动，会把shell中的内置命令，其他其他不在shell中的内置命令加载到内存中。</li>
</ul>
</li>
<li><p>(Linux内置命令和外置命令)[<a href="https://www.cnblogs.com/pingzhe/p/7077685.html]" target="_blank" rel="noopener">https://www.cnblogs.com/pingzhe/p/7077685.html]</a></p>
</li>
</ul>
<h3 id="g、查看用户信息"><a href="#g、查看用户信息" class="headerlink" title="g、查看用户信息"></a>g、查看用户信息</h3><ul>
<li><p>id 当前登录用户详细信息</p>
</li>
<li><p>whoami  当前登录用户名</p>
</li>
<li><p>who 当前所有登录用户罗列出来</p>
</li>
</ul>
<h3 id="h、修改用户信息（usermod）（某些需要重新登录生效）"><a href="#h、修改用户信息（usermod）（某些需要重新登录生效）" class="headerlink" title="h、修改用户信息（usermod）（某些需要重新登录生效）"></a>h、修改用户信息（usermod）（某些需要重新登录生效）</h3><ul>
<li><p>usermod -g group user    修改初始组（基本不去修改）</p>
</li>
<li><p>usermod -G group,group xxuser    修改附加组（多个使用“,”）</p>
</li>
<li><p>usermod -s /bin/bash xxuser     修改shell</p>
</li>
</ul>
<h1 id="四、用户权限"><a href="#四、用户权限" class="headerlink" title="四、用户权限"></a>四、用户权限</h1><p><strong>文件对用户来说的权限，用户操作文件或者文件夹的权限</strong></p>
<h2 id="1、什么是可执行文件"><a href="#1、什么是可执行文件" class="headerlink" title="1、什么是可执行文件"></a>1、什么是可执行文件</h2><p>windows下的是exe（批处理命令或者说批处理脚本），一般用来启动某个应用程序的 linux下的shell脚本（或者类型的脚本），一般用来启动某个应用程序或者服务程序</p>
<h2 id="2、权限"><a href="#2、权限" class="headerlink" title="2、权限"></a>2、权限</h2><p>​    ==- — — —==</p>
<p>​       u   g    o</p>
<p>user  group   other</p>
<p>第一个==-==表示文件类型，==-==表二进制文件（包括不限于文本文件）==d==目录（文件夹）</p>
<p>第一个==—==表user，所有者</p>
<p>第二个==—==表group，所属组</p>
<p>第三个==—==表other，其他用户</p>
<p>==r==–&gt;可读</p>
<p>==w==–&gt;可写</p>
<p>==x==–&gt;可执行</p>
<p><img src="https://github.com/ZephXu07/IMG/raw/master/Linux-6.png" alt="Linux-6"></p>
<p><strong>一个文件（文件夹）改名、删除的权限是由它所在目录的权限控制的，而不是自身的权限控制。因为它自 身的权限只控制它自身的内容。</strong></p>
<h2 id="3、文件权限修改"><a href="#3、文件权限修改" class="headerlink" title="3、文件权限修改"></a>3、文件权限修改</h2><p>chmod change the permissions mode of file</p>
<p>只有文件所有者和超管可以修改文件的权限。</p>
<h3 id="a、"><a href="#a、" class="headerlink" title="a、"></a>a、</h3><p>chmod [ugo][+-=][rwx] 文件或者目录</p>
<p>==+==添加，==-==减少，=====设置为</p>
<ul>
<li>chmod u+w,g+x xx.txt</li>
</ul>
<h3 id="b、"><a href="#b、" class="headerlink" title="b、"></a>b、</h3><p>用数字表示权限 r=4 w=2 x=1</p>
<p>r–rw-rwx    467</p>
<p>rw-r-x–x      651</p>
<p>u    g    o</p>
<p>chmod 651 xxfile</p>
<p>chmod -R 777 xxfile 修改文件包括文件的所有子文件</p>
<h3 id="c、"><a href="#c、" class="headerlink" title="c、"></a>c、</h3><p>rwx    —&gt;    对应二进制 </p>
<p>r–         —&gt;    100</p>
<p>-w-    —&gt;     010</p>
<p>–x    —&gt;     001</p>
<p>类似如此。</p>
<h2 id="4、其他"><a href="#4、其他" class="headerlink" title="4、其他"></a>4、其他</h2><h3 id="a、chown-change-owner-修改拥有者（所属者）"><a href="#a、chown-change-owner-修改拥有者（所属者）" class="headerlink" title="a、chown(change owner)修改拥有者（所属者）"></a>a、chown(change owner)修改拥有者（所属者）</h3><p>chown newuser 文件/文件夹 修改文件或者文件夹的拥有者</p>
<h3 id="b、chgrp-change-group-修改拥有组（所属组）"><a href="#b、chgrp-change-group-修改拥有组（所属组）" class="headerlink" title="b、chgrp(change group)修改拥有组（所属组）"></a>b、chgrp(change group)修改拥有组（所属组）</h3><p>chgrp newgroupname 文件/文件夹 修改文件或者文件夹的所属组</p>
<h3 id="c、文件是所属者和所属组发生改变，用户对文件的权限也发生改变。"><a href="#c、文件是所属者和所属组发生改变，用户对文件的权限也发生改变。" class="headerlink" title="c、文件是所属者和所属组发生改变，用户对文件的权限也发生改变。"></a>c、文件是所属者和所属组发生改变，用户对文件的权限也发生改变。</h3><h3 id="d、-R-递归修改所有子文件"><a href="#d、-R-递归修改所有子文件" class="headerlink" title="d、-R 递归修改所有子文件"></a>d、-R 递归修改所有子文件</h3>]]></content>
      <tags>
        <tag>笔记</tag>
        <tag>Linux</tag>
      </tags>
  </entry>
  <entry>
    <title>SpringMVC-Learning-Notes</title>
    <url>/2020/01/27/SpringMVC-Learning-Notes/</url>
    <content><![CDATA[<h1 id="SpringMVC-Learning-Notes"><a href="#SpringMVC-Learning-Notes" class="headerlink" title="SpringMVC Learning Notes"></a>SpringMVC Learning Notes</h1><h1 id="SpringMVC-个人学习笔记"><a href="#SpringMVC-个人学习笔记" class="headerlink" title="SpringMVC 个人学习笔记"></a>SpringMVC 个人学习笔记</h1><p>（<a href="https://www.bilibili.com/video/av47953244" target="_blank" rel="noopener">学习视频</a>，<a href="https://pan.baidu.com/s/1Tn7T5c0wzvv5apYl5G0mdQ" target="_blank" rel="noopener">学习资料（提取码3b45）</a>）</p>
<p>（过于正式标准全部是学习资料自带的……）</p>
<h2 id="part1、三层架构和MVC"><a href="#part1、三层架构和MVC" class="headerlink" title="part1、三层架构和MVC"></a>part1、三层架构和MVC</h2><h3 id="一、三层架构"><a href="#一、三层架构" class="headerlink" title="一、三层架构"></a>一、三层架构</h3><p>1、开发服务器端程序，一般都基于两种形式，一种C/S架构程序，一种B/S架构程序；</p>
<p>2、使用Java语言基本上都是开发B/S架构的程序，B/S架构又分成了三层架构</p>
<p>3、三层架构</p>
<p>a)<br>表现层：WEB层，用来和客户端进行数据交互的。表现层一般会采用MVC的设计模型；</p>
<p>b) 业务层：处理公司具体的业务逻辑的 ；</p>
<p>c) 持久层：用来操作数据库的。</p>
<h3 id="二、MVC模型"><a href="#二、MVC模型" class="headerlink" title="二、MVC模型"></a>二、MVC模型</h3><p>1、MVC全名是Model View Controller 模型视图控制器，每个部分各司其职；</p>
<p>2、Model：数据模型，JavaBean的类，用来进行数据封装；</p>
<p>3、View：指JSP、HTML用来展示数据给用户 ；</p>
<p>4、Controller：用来接收用户的请求，整个流程的控制器。用来进行数据校验等。</p>
<p><img src="https://github.com/ZephXu07/IMG/raw/master/Structure.bmp" alt="Structure"></p>
<h2 id="part2、SpringMVC的入门案例"><a href="#part2、SpringMVC的入门案例" class="headerlink" title="part2、SpringMVC的入门案例"></a>part2、SpringMVC的入门案例</h2><h3 id="一、SpringMVC的概述"><a href="#一、SpringMVC的概述" class="headerlink" title="一、SpringMVC的概述"></a>一、SpringMVC的概述</h3><h4 id="1、SpringMVC的概述"><a href="#1、SpringMVC的概述" class="headerlink" title="1、SpringMVC的概述"></a>1、SpringMVC的概述</h4><p>a) 一种基于Java实现的MVC设计模型的请求驱动类型的轻量级WEB框架；</p>
<p>b) MVC属于SpringFrameWork的后续产品，已经融合在Spring Web Flow里面，Spring 框架提供 了构建 Web 应用程序的全功能 MVC 模块；</p>
<p>c) 使用 Spring 可插入的 MVC架构，从而在使用Spring进行WEB开发时，可以选择使用Spring的SpringMVC框架或集成其他MVC开发框架。</p>
<h4 id="2、SpringMVC在三层架构中的位置：表现层框架"><a href="#2、SpringMVC在三层架构中的位置：表现层框架" class="headerlink" title="2、SpringMVC在三层架构中的位置：表现层框架"></a>2、SpringMVC在三层架构中的位置：表现层框架</h4><p><img src="https://github.com/ZephXu07/IMG/raw/master/DetailedStructure.png" alt="详细结构"></p>
<h4 id="3、SpringMVC的优势"><a href="#3、SpringMVC的优势" class="headerlink" title="3、SpringMVC的优势"></a>3、SpringMVC的优势</h4><p>1、清晰的角色划分（流水线）：</p>
<p>前端控制器（DispatcherServlet）</p>
<p>请求到处理器映射（HandlerMapping）</p>
<p>处理器适配器（HandlerAdapter）</p>
<p>视图解析器（ViewResolver）</p>
<p>处理器或页面控制器（Controller）</p>
<p>验证器（ Validator）</p>
<p>命令对象（Command 请求参数绑定到的对象就叫命令对象）</p>
<p>表单对象（Form Object 提供给表单展示和提交到的对象就叫表单对象）</p>
<p>2、分工明确，而且扩展点相当灵活，可以很容易扩展，虽然几乎不需要。</p>
<p>3、由于命令对象就是一个 POJO，无需继承框架特定API，可以使用命令对象直接作为业务对象。</p>
<p>4、和 Spring 其他框架无缝集成，是其它 Web 框架所不具备的。</p>
<p>5、可适配，通过 HandlerAdapter 可以支持任意的类作为处理器。</p>
<p>6、可定制性，HandlerMapping、ViewResolver 等能够非常简单的定制。</p>
<p>7、功能强大的数据验证、格式化、绑定机制。</p>
<p>8、利用 Spring 提供的 Mock 对象能够非常简单的进行 Web 层单元测试。</p>
<p>9、本地化、主题的解析的支持，使我们更容易进行国际化和主题的切换。</p>
<p>10、强大的 JSP 标签库，使 JSP 编写更容易。</p>
<p>还有比如RESTful风格的支持、简单的文件上传、约定大于配置的契约式编程支持、基于注解的零配置支持等等。</p>
<h4 id="4、SpringMVC和Stru2的对比"><a href="#4、SpringMVC和Stru2的对比" class="headerlink" title="4、SpringMVC和Stru2的对比"></a>4、SpringMVC和Stru2的对比</h4><h5 id="共同点："><a href="#共同点：" class="headerlink" title="共同点："></a>共同点：</h5><p>它们都是表现层框架，都是基于 MVC 模型编写的。 它们的底层都离不开原始ServletAPI。 它们处理请求的机制都是一个核心控制器。</p>
<h5 id="区别："><a href="#区别：" class="headerlink" title="区别："></a>区别：</h5><p>Spring MVC 的入口是 Servlet, 而 Struts2 是 Filter 。Spring MVC是基于方法设计的，而 Struts2 是基于类，Struts2每次执行都会创建一个动作类。所以Spring MVC 会稍微比 Struts2 快些。<br>Spring MVC 使用更加简洁,同时还支持 JSR303, 处理 ajax 的请求更方便。(JSR303 是一套 JavaBean参数校验的标准，它定义了很多常用的校验注解，我们可以直接将这些注解加在我们JavaBean 的属性上面，就可以在需要校验的时候进行校验了。) </p>
<p>Struts2 的 OGNL表达式使页面的开发效率相比 Spring MVC 更高些，但执行效率并没有比 JSTL提升，尤其是 struts2 的表单标签，远没有 html 执行效率高。</p>
<h3 id="二、SpringMVC的入门程序"><a href="#二、SpringMVC的入门程序" class="headerlink" title="二、SpringMVC的入门程序"></a>二、SpringMVC的入门程序</h3><p><img src="https://github.com/ZephXu07/IMG/raw/master/FlowDiagram%20.png" alt="流程图"></p>
<h4 id="1、创建Web工程，引入开发的jar包"><a href="#1、创建Web工程，引入开发的jar包" class="headerlink" title="1、创建Web工程，引入开发的jar包"></a>1、创建Web工程，引入开发的jar包</h4><h5 id="具体坐标如下"><a href="#具体坐标如下" class="headerlink" title="具体坐标如下"></a><a href="#具体坐标如下" title="具体坐标如下"></a>具体坐标如下</h5><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">properties</span>&gt;</span>    </span><br><span class="line">    <span class="tag">&lt;<span class="name">project.build.sourceEncoding</span>&gt;</span>UTF-8<span class="tag">&lt;/<span class="name">project.build.sourceEncoding</span>&gt;</span>    </span><br><span class="line">    <span class="tag">&lt;<span class="name">maven.compiler.source</span>&gt;</span>1.8<span class="tag">&lt;/<span class="name">maven.compiler.source</span>&gt;</span>   </span><br><span class="line">    <span class="tag">&lt;<span class="name">maven.compiler.target</span>&gt;</span>1.8<span class="tag">&lt;/<span class="name">maven.compiler.target</span>&gt;</span>    </span><br><span class="line">    <span class="tag">&lt;<span class="name">spring.version</span>&gt;</span>5.2.0.RELEASE<span class="tag">&lt;/<span class="name">spring.version</span>&gt;</span>  </span><br><span class="line"><span class="tag">&lt;/<span class="name">properties</span>&gt;</span>  </span><br><span class="line"><span class="tag">&lt;<span class="name">dependencies</span>&gt;</span>   </span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span>      </span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span>      </span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-context<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span>      </span><br><span class="line">        <span class="tag">&lt;<span class="name">version</span>&gt;</span>$&#123;spring.version&#125;<span class="tag">&lt;/<span class="name">version</span>&gt;</span>    </span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span>    </span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span>      </span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span>      </span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-web<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span>      </span><br><span class="line">        <span class="tag">&lt;<span class="name">version</span>&gt;</span>$&#123;spring.version&#125;<span class="tag">&lt;/<span class="name">version</span>&gt;</span>    </span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span>    </span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span>      </span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span>      </span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-webmvc<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span>      </span><br><span class="line">        <span class="tag">&lt;<span class="name">version</span>&gt;</span>$&#123;spring.version&#125;<span class="tag">&lt;/<span class="name">version</span>&gt;</span>   </span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span>   </span><br><span class="line">    <span class="comment">&lt;!-- https://mvnrepository.com/artifact/javax.servlet/javax.servlet-api --&gt;</span>    </span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span>      </span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>javax.servlet<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span>    </span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>javax.servlet-api<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span>   </span><br><span class="line">        <span class="tag">&lt;<span class="name">version</span>&gt;</span>4.0.1<span class="tag">&lt;/<span class="name">version</span>&gt;</span>   </span><br><span class="line">        <span class="tag">&lt;<span class="name">scope</span>&gt;</span>provided<span class="tag">&lt;/<span class="name">scope</span>&gt;</span>   </span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span>    </span><br><span class="line">    <span class="comment">&lt;!-- https://mvnrepository.com/artifact/javax.servlet.jsp/javax.servlet.jsp-api --&gt;</span>    </span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span>     </span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>javax.servlet.jsp<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span>   </span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>javax.servlet.jsp-api<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span>     </span><br><span class="line">        <span class="tag">&lt;<span class="name">version</span>&gt;</span>2.3.3<span class="tag">&lt;/<span class="name">version</span>&gt;</span>     </span><br><span class="line">        <span class="tag">&lt;<span class="name">scope</span>&gt;</span>provided<span class="tag">&lt;/<span class="name">scope</span>&gt;</span>   </span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependencies</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h4 id="2、配置核心的控制器（配置DispatcherServlet）"><a href="#2、配置核心的控制器（配置DispatcherServlet）" class="headerlink" title="2、配置核心的控制器（配置DispatcherServlet）"></a>2、配置核心的控制器（配置DispatcherServlet）</h4><h5 id="在web-xml配置文件中核心控制器DispatcherServlet"><a href="#在web-xml配置文件中核心控制器DispatcherServlet" class="headerlink" title="在web.xml配置文件中核心控制器DispatcherServlet"></a>在web.xml配置文件中核心控制器DispatcherServlet</h5><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!-- SpringMVC的核心控制器 --&gt;</span> </span><br><span class="line"><span class="tag">&lt;<span class="name">servlet</span>&gt;</span>   </span><br><span class="line">	<span class="tag">&lt;<span class="name">servlet-name</span>&gt;</span>dispatcherServlet<span class="tag">&lt;/<span class="name">servlet-name</span>&gt;</span> </span><br><span class="line">	<span class="tag">&lt;<span class="name">servlet-class</span>&gt;</span>org.springframework.web.servlet.DispatcherServlet<span class="tag">&lt;/<span class="name">servlet-class</span>&gt;</span>   </span><br><span class="line"><span class="comment">&lt;!-- 配置Servlet的初始化参数，读取springmvc的配置文件，创建spring容器 --&gt;</span>  </span><br><span class="line">	<span class="tag">&lt;<span class="name">init-param</span>&gt;</span>     </span><br><span class="line">		<span class="tag">&lt;<span class="name">param-name</span>&gt;</span>contextConfigLocation<span class="tag">&lt;/<span class="name">param-name</span>&gt;</span>   </span><br><span class="line">		<span class="comment">&lt;!--给上面的DispatcherServlet类的contextConfigLocation传值，读取配置文件--&gt;</span> </span><br><span class="line">		<span class="tag">&lt;<span class="name">param-value</span>&gt;</span>classpath:SpringMVC.xml<span class="tag">&lt;/<span class="name">param-value</span>&gt;</span>  </span><br><span class="line">	<span class="tag">&lt;/<span class="name">init-param</span>&gt;</span></span><br><span class="line">	<span class="comment">&lt;!--配置servlet启动时加载对象，DispatcherServlet第一次发请求时被创建--&gt;</span>  </span><br><span class="line">	<span class="tag">&lt;<span class="name">load-on-startup</span>&gt;</span>1<span class="tag">&lt;/<span class="name">load-on-startup</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">servlet</span>&gt;</span> </span><br><span class="line"><span class="tag">&lt;<span class="name">servlet-mapping</span>&gt;</span>  </span><br><span class="line">	<span class="tag">&lt;<span class="name">servlet-name</span>&gt;</span>dispatcherServlet<span class="tag">&lt;/<span class="name">servlet-name</span>&gt;</span>  </span><br><span class="line">	<span class="tag">&lt;<span class="name">url-pattern</span>&gt;</span>/<span class="tag">&lt;/<span class="name">url-pattern</span>&gt;</span>   </span><br><span class="line">	<span class="comment">&lt;!--"/"发送任何请求都会经过DispatcherServlet--&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">servlet-mapping</span>&gt;</span></span><br></pre></td></tr></table></figure>



<h4 id="3、编写springmvc-xml的配置文件"><a href="#3、编写springmvc-xml的配置文件" class="headerlink" title="3、编写springmvc.xml的配置文件"></a>3、编写springmvc.xml的配置文件</h4><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version="1.0" encoding="UTF-8"?&gt;</span><span class="tag">&lt;<span class="name">beans</span> <span class="attr">xmlns</span>=<span class="string">"http://www.springframework.org/schema/beans"</span>       <span class="attr">xmlns:mvc</span>=<span class="string">"http://www.springframework.org/schema/mvc"</span>       <span class="attr">xmlns:context</span>=<span class="string">"http://www.springframework.org/schema/context"</span>       <span class="attr">xmlns:xsi</span>=<span class="string">"http://www.w3.org/2001/XMLSchema-instance"</span>       <span class="attr">xsi:schemaLocation</span>=<span class="string">" http://www.springframework.org/schema/beans       http://www.springframework.org/schema/beans/spring-beans.xsd       http://www.springframework.org/schema/mvc       http://www.springframework.org/schema/mvc/spring-mvc.xsd       http://www.springframework.org/schema/context       http://www.springframework.org/schema/context/spring-context.xsd"</span>&gt;</span>    <span class="comment">&lt;!-- 配置spring创建容器时要扫描的包--&gt;</span>    </span><br><span class="line">    <span class="tag">&lt;<span class="name">context:component-scan</span> <span class="attr">base-package</span>=<span class="string">"com.zephxu"</span>/&gt;</span><span class="tag">&lt;/<span class="name">beans</span>&gt;</span></span><br></pre></td></tr></table></figure>



<h4 id="4-编写index-jsp和HelloController控制器"><a href="#4-编写index-jsp和HelloController控制器" class="headerlink" title="4. 编写index.jsp和HelloController控制器"></a>4. 编写index.jsp和HelloController控制器</h4><h5 id="a-index-jsp："><a href="#a-index-jsp：" class="headerlink" title="a) index.jsp："></a>a) index.jsp：</h5><figure class="highlight"><table><tr><td class="code"><pre><span class="line">&lt;%@ page contentType=<span class="string">"text/html;charset=UTF-8"</span> language=<span class="string">"java"</span> %&gt;</span><br><span class="line">&lt;html&gt;</span><br><span class="line">	&lt;head&gt;    </span><br><span class="line">		&lt;title&gt;SpringMVC&lt;/title&gt;</span><br><span class="line">	&lt;/head&gt;</span><br><span class="line">	&lt;body&gt;   </span><br><span class="line">    	&lt;h3&gt;入门程序&lt;/h3&gt;    </span><br><span class="line">    	&lt;a href="sayHello"&gt;入门程序&lt;/a&gt;</span><br><span class="line">        &lt;%--相对路径，对应com.zephxu.controller.HelloController.sayHello上的注解--%&gt;</span><br><span class="line">    &lt;/body&gt;</span><br><span class="line">&lt;/html&gt;</span><br></pre></td></tr></table></figure>



<h5 id="b-HelloController"><a href="#b-HelloController" class="headerlink" title="b) HelloController"></a>b) HelloController</h5><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Controllerpublic</span> </span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">HelloController</span> </span>&#123;   </span><br><span class="line">	<span class="meta">@RequestMapping</span>(path = <span class="string">"/sayHello"</span>)    </span><br><span class="line">	<span class="function"><span class="keyword">public</span> String <span class="title">sayHello</span><span class="params">()</span> </span>&#123;       </span><br><span class="line">    	System.out.println(<span class="string">"Hello SpringMVC"</span>);       </span><br><span class="line">        <span class="keyword">return</span> <span class="string">"success"</span>;   </span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<p><strong>SpringMVC默认规则：return “success”字符串默认为打开新的success.jsp.页面，即5、的操作</strong></p>
<p><strong>前提是开启下面的配置</strong></p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!--视图解析器--&gt;</span>    </span><br><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"internalResourceViewResolver"</span> <span class="attr">class</span>=<span class="string">"org.springframework.web.servlet.view.InternalResourceViewResolver"</span>&gt;</span>        		</span><br><span class="line">	<span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"prefix"</span> <span class="attr">value</span>=<span class="string">"/WEB-INF/pages/"</span>/&gt;</span></span><br><span class="line">	<span class="comment">&lt;!--文件所在目录--&gt;</span>        </span><br><span class="line">	<span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"suffix"</span> <span class="attr">value</span>=<span class="string">".jsp"</span>/&gt;</span></span><br><span class="line">	<span class="comment">&lt;!--后缀--&gt;</span>        </span><br><span class="line">	<span class="comment">&lt;!--前后缀连接成页面的文件--&gt;</span>    </span><br><span class="line"><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!--    SpringMVC注解支持--&gt;</span>    </span><br><span class="line"><span class="tag">&lt;<span class="name">mvc:annotation-driven</span>/&gt;</span></span><br></pre></td></tr></table></figure>

<h4 id="5、在WEB-INF目录下创建pages文件夹，编写success-jsp的成功页面"><a href="#5、在WEB-INF目录下创建pages文件夹，编写success-jsp的成功页面" class="headerlink" title="5、在WEB-INF目录下创建pages文件夹，编写success.jsp的成功页面"></a>5、在WEB-INF目录下创建pages文件夹，编写success.jsp的成功页面</h4><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">%@</span> <span class="attr">page</span> <span class="attr">contentType</span>=<span class="string">"text/html;charset=UTF-8"</span> <span class="attr">language</span>=<span class="string">"java"</span> %&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">head</span>&gt;</span>    </span><br><span class="line">		<span class="tag">&lt;<span class="name">title</span>&gt;</span>Title<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">body</span>&gt;</span>        </span><br><span class="line">		<span class="tag">&lt;<span class="name">h3</span>&gt;</span>入门成功<span class="tag">&lt;/<span class="name">h3</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h4 id="6、启动Tomcat服务器，进行测试"><a href="#6、启动Tomcat服务器，进行测试" class="headerlink" title="6、启动Tomcat服务器，进行测试"></a>6、启动Tomcat服务器，进行测试</h4><h3 id="三、入门案例的执行过程分析"><a href="#三、入门案例的执行过程分析" class="headerlink" title="三、入门案例的执行过程分析"></a>三、入门案例的执行过程分析</h3><h4 id="1、入门案例的执行流程"><a href="#1、入门案例的执行流程" class="headerlink" title="1、入门案例的执行流程"></a>1、入门案例的执行流程</h4><p>a)当启动Tomcat服务器的时候，因为配置了load-on-startup标签，所以会创建DispatcherServlet对象，<br>就会加载springmvc.xml配置文件</p>
<p>b) 开启了注解扫描，那么HelloController对象就会被创建</p>
<p>c)从index.jsp发送请求，请求会先到达DispatcherServlet核心控制器，根据配置@RequestMapping注解<br>找到执行的具体方法</p>
<p>d)根据执行方法的返回值，再根据配置的视图解析器，去指定的目录下查找指定名称的JSP文件</p>
<p>e) Tomcat服务器渲染页面，做出响应</p>
<p><img src="https://github.com/ZephXu07/IMG/raw/master/ProcessOfIntroductoryCase.png" alt="简单流程"></p>
<p><img src="https://github.com/ZephXu07/IMG/raw/master/DetailedFlow0.png" alt="详细流程0"></p>
<h4 id="2、入门案例中的组件分析"><a href="#2、入门案例中的组件分析" class="headerlink" title="2、入门案例中的组件分析"></a>2、入门案例中的组件分析</h4><h5 id="a-DispatcherServlet：前端控制器"><a href="#a-DispatcherServlet：前端控制器" class="headerlink" title="a) DispatcherServlet：前端控制器"></a>a) DispatcherServlet：前端控制器</h5><p>用户请求到达前端控制器，它就相当于mvc模式中的c，dispatcherServlet是整个流程控制的中心，由它调用其它组件处理用户的请求，dispatcherServlet的存在降低了组件之间的耦合性。</p>
<h5 id="b-HandlerMapping：处理器映射器"><a href="#b-HandlerMapping：处理器映射器" class="headerlink" title="b) HandlerMapping：处理器映射器"></a>b) HandlerMapping：处理器映射器</h5><p>HandlerMapping负责根据用户请求找到Handler即处理器，SpringMVC提供了不同的映射器实现不同的映射方式，例如：配置文件方式，实现接口方式，注解方式等。</p>
<h5 id="c-Handler：处理器"><a href="#c-Handler：处理器" class="headerlink" title="c) Handler：处理器"></a>c) Handler：处理器</h5><p>它就是我们开发中要编写的具体业务控制器。由DispatcherServlet把用户请求转发到Handler。由Handler对具体的用户请求进行处理。</p>
<h5 id="d-HandlAdapter：处理器适配器（转接口）"><a href="#d-HandlAdapter：处理器适配器（转接口）" class="headerlink" title="d) HandlAdapter：处理器适配器（转接口）"></a>d) HandlAdapter：处理器适配器（转接口）</h5><p>通过HandlerAdapter对处理器进行执行，这是适配器模式的应用，通过扩展适配器可以对更多类型的处理器进行执行。</p>
<h5 id="e-View-Resolver：视图解析器"><a href="#e-View-Resolver：视图解析器" class="headerlink" title="e) View Resolver：视图解析器"></a>e) View Resolver：视图解析器</h5><p>View Resolver负责将处理结果生成View视图，ViewResolver首先根据逻辑视图名解析成物理视图名即具体的页面地址，再生成View视图对象，最后对View进行渲染将处理结果通过页面展示给用户。</p>
<h5 id="f-View：视图"><a href="#f-View：视图" class="headerlink" title="f) View：视图"></a>f) View：视图</h5><p>SpringMVC框架提供了很多的 View视图类型的支持，包括：jstlView、freemarkerView、pdfView<br>等。我们最常用的视图就是 jsp。一般情况下需要通过页面标签或页面模版技术将模型数据通过页面展示给用户，需要由程序员根据业务需求开发具体的页面。</p>
<p><img src="https://github.com/ZephXu07/IMG/raw/master/DetailedFlow.png" alt="流程及组件"></p>
<h4 id="3、-lt-mvc-annotation-driven-gt-说明"><a href="#3、-lt-mvc-annotation-driven-gt-说明" class="headerlink" title="3、&lt;mvc:annotation-driven&gt;说明"></a>3、<code>&lt;mvc:annotation-driven&gt;</code>说明</h4><p>在 SpringMVC 的各个组件中，处理器映射器、处理器适配器、视图解析器称为SpringMVC 的三大组件。<br>使用<code>&lt;mvc:annotation-driven&gt;</code>自动加载RequestMappingHandlerMapping（处理映射器）和RequestMappingHandlerAdapter（ 处 理 适 配 器 ） ， 可 用 在SpringMVC.xml 配 置 文 件 中 使 用<br><code>&lt;mvc:annotation-driven&gt;</code>替代注解处理器和适配器的配置。</p>
<p>它就相当于在 xml 中配置了：</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!-- Begin --&gt;</span> </span><br><span class="line"><span class="comment">&lt;!-- HandlerMapping --&gt;</span> </span><br><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">class</span>=<span class="string">"org.springframework.web.servlet.mvc.method.annotation.RequestMappingHandlerMapping"</span>/&gt;</span> </span><br><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">class</span>=<span class="string">"org.springframework.web.servlet.handler.BeanNameUrlHandlerMapping"</span>/&gt;</span> </span><br><span class="line"><span class="comment">&lt;!-- HandlerAdapter --&gt;</span> </span><br><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">class</span>=<span class="string">"org.springframework.web.servlet.mvc.method.annotation.RequestMappingHandlerAdapter"</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">class</span>=<span class="string">"org.springframework.web.servlet.mvc.HttpRequestHandlerAdapter"</span>/&gt;</span> </span><br><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">class</span>=<span class="string">"org.springframework.web.servlet.mvc.SimpleControllerHandlerAdapter"</span>/&gt;</span> </span><br><span class="line"><span class="comment">&lt;!-- HadnlerExceptionResolvers --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">class</span>=<span class="string">"org.springframework.web.servlet.mvc.method.annotation.ExceptionHandlerExceptionResolver"</span>/&gt;</span> </span><br><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">class</span>=<span class="string">"org.springframework.web.servlet.mvc.annotation.ResponseStatusExceptionResolver"</span>/&gt;</span> </span><br><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">class</span>=<span class="string">"org.springframework.web.servlet.mvc.support.DefaultHandlerExceptionResolver"</span>/&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- End --&gt;</span></span><br></pre></td></tr></table></figure>



<p><strong>注意：</strong> 一般开发中，我们都需要写上此标签（虽然从入门案例中看，我们不写也行，随着课程的深入，该标签还有具体的使用场景）。</p>
<p><strong>明确：</strong> 我们只需要编写处理具体业务的控制器以及视图。</p>
<h3 id="四、RequestMapping注解"><a href="#四、RequestMapping注解" class="headerlink" title="四、RequestMapping注解"></a>四、RequestMapping注解</h3><h4 id="1、RequestMapping注解的作用是建立请求URL和处理方法之间的对应关系"><a href="#1、RequestMapping注解的作用是建立请求URL和处理方法之间的对应关系" class="headerlink" title="1、RequestMapping注解的作用是建立请求URL和处理方法之间的对应关系"></a>1、RequestMapping注解的作用是建立请求URL和处理方法之间的对应关系</h4><h4 id="2-、RequestMapping注解可以作用在方法和类上：更加清晰"><a href="#2-、RequestMapping注解可以作用在方法和类上：更加清晰" class="headerlink" title="2.、RequestMapping注解可以作用在方法和类上：更加清晰"></a>2.、RequestMapping注解可以作用在方法和类上：更加清晰</h4><p>a) 作用在类上：第一级的访问目录</p>
<p>b) 作用在方法上：第二级的访问目录</p>
<p><img src="https://github.com/ZephXu07/IMG/raw/master/RequestMappingScope.png" alt="作用域"></p>
<p><strong>若在类上加注解，则在请求方法时路径要加上类的注解</strong></p>
<p>c) 细节：路径可以不编写 / 表示应用的根目录开始</p>
<p>d)细节：<code>${ pageContext.request.contextPath }</code>也可以省略不写，但是路径上不能写/</p>
<h4 id="3、RequestMapping的属性"><a href="#3、RequestMapping的属性" class="headerlink" title="3、RequestMapping的属性"></a>3、RequestMapping的属性</h4><p>a) path：指定请求路径的url</p>
<p>b) value：value属性和path属性是一样的</p>
<p>c) method ：指定该方法的请求方式</p>
<p><code>@RequestMapping(value = &quot;/sayHello&quot;, method = {RequestMethod.GET, RequestMethod.POST})</code></p>
<ul>
<li>超链接一般是通过get方式</li>
</ul>
<p>d) params：指定限制请求参数的条件</p>
<ul>
<li><p><code>@RequestMapping(value = &quot;/sayHello&quot;,params = {&quot;username&quot;})</code>对应的：<code>&lt;a href=&quot;user/sayHello?username=hhhh&quot;&gt;RequestMapping注解&lt;/a&gt;</code></p>
</li>
<li><p><code>@RequestMapping(value = &quot;/sayHello&quot;,params = {&quot;username=heihei&quot;})</code>对应的<code>&lt;a href=&quot;user/sayHello?username=heihei&quot;&gt;RequestMapping注解&lt;/a&gt;</code></p>
</li>
<li><p>还有如下：</p>
<p><img src="https://github.com/ZephXu07/IMG/raw/master/DetailedResult.png" alt="详细结果"></p>
</li>
</ul>
<p>e) headers：发送的请求中必须包含的请求头</p>
<p><img src="https://github.com/ZephXu07/IMG/raw/master/HeadAction.png" alt="action"></p>
<p><img src="https://github.com/ZephXu07/IMG/raw/master/HeadResult.png" alt="result"></p>
<h2 id="part3、请求参数的绑定"><a href="#part3、请求参数的绑定" class="headerlink" title="part3、请求参数的绑定"></a>part3、请求参数的绑定</h2><h3 id="一、请求参数的绑定说明"><a href="#一、请求参数的绑定说明" class="headerlink" title="一、请求参数的绑定说明"></a>一、请求参数的绑定说明</h3><h4 id="1、绑定机制"><a href="#1、绑定机制" class="headerlink" title="1、绑定机制"></a>1、绑定机制</h4><p>a) 表单提交的数据都是k=v格式的 username=haha&amp;password=123</p>
<p>b)SpringMVC的参数绑定过程是把表单提交的请求参数，作为控制器中方法的参数进行绑定的</p>
<p>c) 要求：提交表单的name和参数的名称是相同的</p>
<h4 id="2、支持的数据类型"><a href="#2、支持的数据类型" class="headerlink" title="2、支持的数据类型"></a>2、支持的数据类型</h4><p>a) 基本数据类型和字符串类型</p>
<p>b) 实体类型（JavaBean）</p>
<p>c) 集合数据类型（List、map集合等）</p>
<h3 id="二、基本数据类型和字符串类型"><a href="#二、基本数据类型和字符串类型" class="headerlink" title="二、基本数据类型和字符串类型"></a>二、基本数据类型和字符串类型</h3><p>1、提交的表单的name和参数名称是相同的</p>
<p>2、区分大小写</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@RequestMapping</span>(<span class="string">"/parameter"</span>)</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ParameterController</span> </span>&#123; </span><br><span class="line">	<span class="meta">@RequestMapping</span>(<span class="string">"/testParameter"</span>)   </span><br><span class="line">	<span class="function"><span class="keyword">public</span> String <span class="title">testParameter</span><span class="params">(String username, <span class="keyword">int</span> value)</span> </span>&#123;     </span><br><span class="line">		System.out.println(<span class="string">"执行了……"</span>);     </span><br><span class="line">        System.out.println(<span class="string">"用户名："</span> + username);  </span><br><span class="line">        System.out.println(<span class="string">"数值："</span> + value);    </span><br><span class="line">        <span class="keyword">return</span> <span class="string">"success"</span>;   </span><br><span class="line">     &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<p><code>&lt;a href=&quot;parameter/testParameter?username=xzf&amp;value=19990701&quot;&gt;请求参数绑定&lt;/a&gt;</code></p>
<h3 id="三、实体类型（JavaBean）"><a href="#三、实体类型（JavaBean）" class="headerlink" title="三、实体类型（JavaBean）"></a>三、实体类型（JavaBean）</h3><p>1、提交表单的name和JavaBean中的属性名称需要一致（通过JavaBean的set方法）</p>
<p>2、如果一个JavaBean类中包含其他的引用类型，那么表单的name属性需要编写成：对象.属性<br>例如： address.name</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Account</span> <span class="keyword">implements</span> <span class="title">Serializable</span> </span>&#123; </span><br><span class="line">	<span class="keyword">private</span> String username; </span><br><span class="line">	<span class="keyword">private</span> String password;  </span><br><span class="line">	<span class="keyword">private</span> Double money;    </span><br><span class="line">	<span class="keyword">private</span> User user;   </span><br><span class="line">	<span class="comment">//set(), get()方法, toString()</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">User</span> <span class="keyword">implements</span> <span class="title">Serializable</span> </span>&#123;  </span><br><span class="line">	<span class="keyword">private</span> <span class="keyword">int</span> id;    </span><br><span class="line">	<span class="keyword">private</span> <span class="keyword">int</span> age;  </span><br><span class="line">	<span class="comment">//set(), get(), toString()</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<figure class="highlight"><table><tr><td class="code"><pre><span class="line">&lt;form action=<span class="string">"parameter/saveAccount"</span> method=<span class="string">"post"</span>&gt;        </span><br><span class="line">    姓名：&lt;input type=<span class="string">"text"</span> name=<span class="string">"username"</span>/&gt;&lt;br/&gt;    </span><br><span class="line">    密码：&lt;input type=<span class="string">"password"</span> name=<span class="string">"password"</span>/&gt;&lt;br/&gt;       </span><br><span class="line">    金额：&lt;input type=<span class="string">"text"</span> name=<span class="string">"money"</span>/&gt;&lt;br/&gt;       </span><br><span class="line">    用户ID：&lt;input type=<span class="string">"text"</span> name=<span class="string">"user.id"</span>/&gt;&lt;br/&gt;       </span><br><span class="line">    用户年龄：&lt;input type=<span class="string">"text"</span> name=<span class="string">"user.age"</span>/&gt;&lt;br/&gt;    </span><br><span class="line">    &lt;input type=<span class="string">"submit"</span> value=<span class="string">"提交"</span>&gt;</span><br><span class="line">&lt;/form&gt;</span><br></pre></td></tr></table></figure>




<ul>
<li><p><strong>暂时会出现中文乱码：post方式！get方式正常！</strong></p>
</li>
<li><p>配置解决中文乱码的过滤器<strong>（在servlet配置之前）</strong>：</p>
<p><strong>在web.xml中配置Spring提供的过滤器类</strong></p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">filter</span>&gt;</span>   </span><br><span class="line">	<span class="tag">&lt;<span class="name">filter-name</span>&gt;</span>characterEncodingFilter<span class="tag">&lt;/<span class="name">filter-name</span>&gt;</span>   </span><br><span class="line">	<span class="tag">&lt;<span class="name">filter-class</span>&gt;</span>org.springframework.web.filter.CharacterEncodingFilter<span class="tag">&lt;/<span class="name">filter-class</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">init-param</span>&gt;</span>  </span><br><span class="line">    <span class="tag">&lt;<span class="name">param-name</span>&gt;</span>encoding<span class="tag">&lt;/<span class="name">param-name</span>&gt;</span>  </span><br><span class="line">    <span class="tag">&lt;<span class="name">param-value</span>&gt;</span>UTF-8<span class="tag">&lt;/<span class="name">param-value</span>&gt;</span>    </span><br><span class="line">    <span class="comment">&lt;!-- 指定字符集 --&gt;</span>  </span><br><span class="line">    <span class="tag">&lt;/<span class="name">init-param</span>&gt;</span> </span><br><span class="line"><span class="tag">&lt;/<span class="name">filter</span>&gt;</span> </span><br><span class="line"><span class="tag">&lt;<span class="name">filter-mapping</span>&gt;</span>    </span><br><span class="line">	<span class="tag">&lt;<span class="name">filter-name</span>&gt;</span>characterEncodingFilter<span class="tag">&lt;/<span class="name">filter-name</span>&gt;</span>  </span><br><span class="line">	<span class="tag">&lt;<span class="name">url-pattern</span>&gt;</span>/*<span class="tag">&lt;/<span class="name">url-pattern</span>&gt;</span>  </span><br><span class="line"><span class="tag">&lt;/<span class="name">filter-mapping</span>&gt;</span></span><br></pre></td></tr></table></figure>



</li>
</ul>
<h3 id="四、集合属性数据封装"><a href="#四、集合属性数据封装" class="headerlink" title="四、集合属性数据封装"></a>四、集合属性数据封装</h3><h4 id="1、List：JSP页面编写方式：list-0-属性"><a href="#1、List：JSP页面编写方式：list-0-属性" class="headerlink" title="1、List：JSP页面编写方式：list[0].属性"></a>1、List：JSP页面编写方式：list[0].属性</h4><h4 id="2、Map：map-‘key’-属性"><a href="#2、Map：map-‘key’-属性" class="headerlink" title="2、Map：map[‘key’].属性"></a>2、Map：map[‘key’].属性</h4><figure class="highlight"><table><tr><td class="code"><pre><span class="line">&lt;form action=<span class="string">"parameter/saveAccount"</span> method=<span class="string">"post"</span>&gt;     </span><br><span class="line">	姓名：&lt;input type=<span class="string">"text"</span> name=<span class="string">"username"</span>/&gt;&lt;br/&gt;    </span><br><span class="line">    密码：&lt;input type=<span class="string">"password"</span> name=<span class="string">"password"</span>/&gt;&lt;br/&gt;  </span><br><span class="line">    金额：&lt;input type=<span class="string">"text"</span> name=<span class="string">"money"</span>/&gt;&lt;br/&gt;     </span><br><span class="line">    用户ID：&lt;input type=<span class="string">"text"</span> name=<span class="string">"userList[0].id"</span>/&gt;&lt;br/&gt;   </span><br><span class="line">    用户年龄：&lt;input type=<span class="string">"text"</span> name=<span class="string">"userList[0].age"</span>/&gt;&lt;br/&gt;    </span><br><span class="line">    用户ID：&lt;input type=<span class="string">"text"</span> name=<span class="string">"userMap['xzf'].id"</span>/&gt;&lt;br/&gt;      </span><br><span class="line">    用户年龄：&lt;input type=<span class="string">"text"</span> name=<span class="string">"userMap['xzf'].age"</span>/&gt;&lt;br/&gt;   </span><br><span class="line">    &lt;input type=<span class="string">"submit"</span> value=<span class="string">"提交"</span>&gt;</span><br><span class="line">&lt;/form&gt;</span><br></pre></td></tr></table></figure>



<h3 id="五、自定义类型转换器"><a href="#五、自定义类型转换器" class="headerlink" title="五、自定义类型转换器"></a>五、自定义类型转换器</h3><p>1、表单提交的任何数据类型全部都是字符串类型，但是后台定义Integer类型，数据也可以封装上，说明<br>Spring框架内部会默认进行数据类型转换。</p>
<p>2、如果想自定义数据类型转换，可以实现Converter的接口</p>
<p> a) 自定义类型转换器</p>
<p> i) 正常情况：</p>
<figure class="highlight"><table><tr><td class="code"><pre><span class="line">&lt;form action=<span class="string">"parameter/saveUser"</span> method=<span class="string">"post"</span>&gt;      </span><br><span class="line">    用户ID：&lt;input type=<span class="string">"text"</span> name=<span class="string">"id"</span>/&gt;&lt;br/&gt;       </span><br><span class="line">    用户年龄：&lt;input type=<span class="string">"text"</span> name=<span class="string">"age"</span>/&gt;&lt;br/&gt;    </span><br><span class="line">    用户生日：&lt;input type=<span class="string">"text"</span> name=<span class="string">"date"</span>&gt;&lt;br/&gt; </span><br><span class="line">    &lt;input type=<span class="string">"submit"</span> value=<span class="string">"提交"</span>&gt;</span><br><span class="line">&lt;/form&gt;</span><br></pre></td></tr></table></figure>

<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@RequestMapping</span>(<span class="string">"/saveUser"</span>) </span><br><span class="line"><span class="function"><span class="keyword">public</span> String <span class="title">saveUser</span><span class="params">(User user)</span></span>&#123;   </span><br><span class="line">    System.out.println(<span class="string">"自定义类型转换器"</span>);       </span><br><span class="line">    System.out.println(user);        </span><br><span class="line">    <span class="keyword">return</span> <span class="string">"success"</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>




<p><img src="https://github.com/ZephXu07/IMG/raw/master/Test.png" alt="test0"></p>
<p><img src="https://github.com/ZephXu07/IMG/raw/master/NormalResult.png" alt="normalResult"></p>
<p><img src="https://github.com/ZephXu07/IMG/raw/master/ThrowTest.png" alt="ThrowTest"></p>
<p><img src="https://github.com/ZephXu07/IMG/raw/master/ResultThrow.png" alt="ThrowResult"></p>
<p> ii) 使用自定义类型转换器</p>
<ul>
<li>自定义类型转换器类：</li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">StringToDateConverter</span> <span class="keyword">implements</span> <span class="title">Converter</span>&lt;<span class="title">String</span>, <span class="title">Date</span>&gt; </span>&#123; </span><br><span class="line">    <span class="meta">@Override</span>    </span><br><span class="line">    <span class="function"><span class="keyword">public</span> Date <span class="title">convert</span><span class="params">(String s)</span> </span>&#123;      </span><br><span class="line">        <span class="keyword">if</span>(<span class="keyword">null</span> != s) &#123;          </span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> RuntimeException(<span class="string">"请传入数值"</span>);   </span><br><span class="line">        &#125;       </span><br><span class="line">        DateFormat df = <span class="keyword">new</span> SimpleDateFormat(<span class="string">"yyyy-MM-dd"</span>);   </span><br><span class="line">        <span class="keyword">try</span> &#123;         </span><br><span class="line">            <span class="keyword">return</span> df.parse(s);     </span><br><span class="line">        &#125; <span class="keyword">catch</span> (ParseException e) &#123;       </span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> RuntimeException(<span class="string">"数据类型转换出现错误"</span>);  </span><br><span class="line">        &#125;   </span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>




<ul>
<li><p>SpringMVC.xml配置：</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line">    <span class="comment">&lt;!-- 配置自定义类型转换器   --&gt;</span>   </span><br><span class="line">    <span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"myConversionService"</span> <span class="attr">class</span>=<span class="string">"org.springframework.context.support.ConversionServiceFactoryBean"</span>&gt;</span>       </span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"converters"</span>&gt;</span>        </span><br><span class="line">    		<span class="tag">&lt;<span class="name">set</span>&gt;</span></span><br><span class="line">                <span class="comment">&lt;!--set集合属性--&gt;</span>        </span><br><span class="line">    			<span class="tag">&lt;<span class="name">bean</span> <span class="attr">class</span>=<span class="string">"com.zephxu.utils.StringToDateConverter"</span>/&gt;</span>  </span><br><span class="line">    			<span class="comment">&lt;!--新增--&gt;</span>     </span><br><span class="line">    		<span class="tag">&lt;/<span class="name">set</span>&gt;</span>       </span><br><span class="line">    	<span class="tag">&lt;/<span class="name">property</span>&gt;</span>  </span><br><span class="line"><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--    SpringMVC注解支持--&gt;</span>  </span><br><span class="line">    <span class="tag">&lt;<span class="name">mvc:annotation-driven</span> <span class="attr">conversion-service</span>=<span class="string">"myConversionService"</span>/&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--处理器映射器、处理器适配器默认生效，类型转换器需要手动配置使生效--&gt;</span></span><br></pre></td></tr></table></figure>




</li>
</ul>
<pre><code>**注意：使用自定义类型转换器后替换了原本的默认，导致1996/12/26方式出错，静待解决！！！**</code></pre><h3 id="六、在控制器中使用原生的ServletAPI对象："><a href="#六、在控制器中使用原生的ServletAPI对象：" class="headerlink" title="六、在控制器中使用原生的ServletAPI对象："></a>六、在控制器中使用原生的ServletAPI对象：</h3><p>只需要在控制器的方法参数定义HttpServletRequest和HttpServletResponse对象。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@RequestMapping</span>(<span class="string">"/testServlet"</span>) </span><br><span class="line"><span class="function"><span class="keyword">public</span> String <span class="title">testServlet</span><span class="params">(HttpServletRequest request, HttpServletResponse response)</span></span>&#123; </span><br><span class="line">    System.out.println(<span class="string">"获取原生API"</span>);    </span><br><span class="line">    System.out.println(<span class="string">"request:"</span> + request);    </span><br><span class="line">    System.out.println(<span class="string">"response:"</span> + response);      </span><br><span class="line">    System.out.println(<span class="string">"session:"</span> + request.getSession());        	</span><br><span class="line">    System.out.println(<span class="string">"ServletContext:"</span> + request.getServletContext());    </span><br><span class="line">    <span class="keyword">return</span> <span class="string">"success"</span>;   </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>




<h2 id="part4、常用的注解"><a href="#part4、常用的注解" class="headerlink" title="part4、常用的注解"></a>part4、常用的注解</h2><h3 id="一、RequestParam注解"><a href="#一、RequestParam注解" class="headerlink" title="一、RequestParam注解"></a>一、RequestParam注解</h3><h4 id="1、作用："><a href="#1、作用：" class="headerlink" title="1、作用："></a>1、作用：</h4><p>把请求中的指定名称的参数传递给控制器中的形参赋值。</p>
<h4 id="2、属性："><a href="#2、属性：" class="headerlink" title="2、属性："></a>2、属性：</h4><p>a) value（name）：请求参数中的名称</p>
<p>b) required：请求参数中是否必须提供此参数，默认值是true，必须提供</p>
<p><code>&lt;a href=&quot;annotation/testRequestParameter?name=许xzf&quot;&gt;RequestParameter&lt;/a&gt;</code></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Controller</span></span><br><span class="line"><span class="meta">@RequestMapping</span>(<span class="string">"/annotation"</span>)</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">AnnotationController</span> </span>&#123;   </span><br><span class="line">    <span class="meta">@RequestMapping</span>(<span class="string">"/testRequestParameter"</span>)   </span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">testRequestParameter</span><span class="params">(@RequestParam(name = <span class="string">"name"</span>)</span> String username) </span>&#123;       </span><br><span class="line">        System.out.println(<span class="string">"AnnotationController"</span>);  </span><br><span class="line">        System.out.println(username);   </span><br><span class="line">        <span class="keyword">return</span> <span class="string">"success"</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<h3 id="二、RequestBody注解（异步，json）"><a href="#二、RequestBody注解（异步，json）" class="headerlink" title="二、RequestBody注解（异步，json）"></a>二、RequestBody注解（异步，json）</h3><h4 id="1、作用：-1"><a href="#1、作用：-1" class="headerlink" title="1、作用："></a>1、作用：</h4><p>用于获取请求体的内容（注意：get方法不可以）</p>
<p><strong>注意：get方法不可以，原因是get方式把内容已经封装到地址栏上。</strong></p>
<h4 id="2、属性：-1"><a href="#2、属性：-1" class="headerlink" title="2、属性："></a>2、属性：</h4><p><strong>required：是否必须有请求体，默认值是true。当取值为 true 时,get请求方式会报错。如果取值 为 false，get 请求得到是 null。</strong></p>
<figure class="highlight"><table><tr><td class="code"><pre><span class="line">&lt;%--request body注解--%&gt;</span><br><span class="line">&lt;%--post--%&gt;</span><br><span class="line">&lt;form action=<span class="string">"annotation/testRequestBody"</span> method=<span class="string">"post"</span>&gt;   </span><br><span class="line">    requestBody 注解 post 请求&lt;br/&gt;    </span><br><span class="line">    ID：&lt;input type=<span class="string">"text"</span> name=<span class="string">"id"</span>&gt;&lt;br/&gt;    </span><br><span class="line">    AGE：&lt;input type=<span class="string">"text"</span> name=<span class="string">"age"</span>&gt;&lt;br/&gt;    </span><br><span class="line">    &lt;input type="submit" value="保存"&gt;&lt;/form&gt;</span><br><span class="line">	&lt;%--get--%&gt;</span><br><span class="line">	&lt;a href="annotation/testRequestBody?body=test"&gt;requestBody 注解 get 请求&lt;/a&gt;"</span><br></pre></td></tr></table></figure>



<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@RequestMapping</span>(<span class="string">"/testRequestBody"</span>)  </span><br><span class="line"><span class="function"><span class="keyword">public</span> String <span class="title">testRequestBody</span><span class="params">(@RequestBody(required = <span class="keyword">true</span>)</span> String body) </span>&#123;  </span><br><span class="line">    System.out.println(<span class="string">"AnnotationController"</span>);   </span><br><span class="line">    System.out.println(body);    </span><br><span class="line">    <span class="keyword">return</span> <span class="string">"success"</span>;  </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>




<ul>
<li><p>required = true</p>
</li>
<li><ul>
<li>post</li>
</ul>
<p><img src="https://github.com/ZephXu07/IMG/raw/master/TrueRequestBodyTestPost.png" alt="post"></p>
</li>
<li><ul>
<li><p>get</p>
<p><img src="https://github.com/ZephXu07/IMG/raw/master/TrueRequestBodyTestGet.png" alt="get"></p>
</li>
</ul>
</li>
<li><p>required = false</p>
<p><img src="https://github.com/ZephXu07/IMG/raw/master/FalseRequestBody.png" alt="result"></p>
</li>
</ul>
<h3 id="三、PathVariable注解"><a href="#三、PathVariable注解" class="headerlink" title="三、PathVariable注解"></a>三、PathVariable注解</h3><h4 id="1、作用：-2"><a href="#1、作用：-2" class="headerlink" title="1、作用："></a>1、作用：</h4><p>拥有绑定url中的占位符的。例如：url中有/delete/{id}，{id}就是占位符</p>
<p><img src="https://github.com/ZephXu07/IMG/raw/master/attention.png" alt="注意"></p>
<h4 id="2、属性：-2"><a href="#2、属性：-2" class="headerlink" title="2、属性："></a>2、属性：</h4><p>value：指定url中的占位符名称</p>
<h4 id="3、Restful风格的URL"><a href="#3、Restful风格的URL" class="headerlink" title="3、Restful风格的URL"></a>3、Restful风格的URL</h4><h5 id="a"><a href="#a" class="headerlink" title="a)"></a>a)</h5><p>请求路径一样，可以根据不同的请求方式去执行后台的不同方法</p>
<h5 id="b-restful风格的URL优点"><a href="#b-restful风格的URL优点" class="headerlink" title="b) restful风格的URL优点:"></a>b) restful风格的URL优点:</h5><p>i) 结构清晰</p>
<p>ii) 符合标准</p>
<p>iii) 易于理解</p>
<p>iv) 扩展方便</p>
<h5 id="c-restful特性"><a href="#c-restful特性" class="headerlink" title="c) restful特性"></a>c) restful特性</h5><p><img src="https://github.com/ZephXu07/IMG/raw/master/RestfulCharacter.png" alt="restfulCharacter"></p>
<p><img src="https://github.com/ZephXu07/IMG/raw/master/01-restful%E7%BC%96%E7%A8%8B%E9%A3%8E%E6%A0%BC.png" alt="restfulStyle"></p>
<h4 id="4、实践"><a href="#4、实践" class="headerlink" title="4、实践"></a>4、实践</h4><figure class="highlight"><table><tr><td class="code"><pre><span class="line">&lt;%--PathVariable--%&gt;    </span><br><span class="line">&lt;a href="annotation/testPathVariable/17"&gt;testPathVariable&lt;/a&gt;"&lt;%--“/”后面直接数字--%&gt;</span><br></pre></td></tr></table></figure>



<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@RequestMapping</span>(<span class="string">"/testPathVariable/&#123;sid&#125;"</span>)</span><br><span class="line"><span class="function"><span class="keyword">public</span> String <span class="title">testPathVariable</span><span class="params">(@PathVariable(name = <span class="string">"sid"</span>)</span> String id) </span>&#123;        </span><br><span class="line">    System.out.println(<span class="string">"AnnotationController"</span>);    </span><br><span class="line">    System.out.println(id);   </span><br><span class="line">    <span class="keyword">return</span> <span class="string">"success"</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>




<p><img src="https://github.com/ZephXu07/IMG/raw/master/PathVariableResul.png" alt="result"></p>
<h3 id="四、基于-HiddentHttpMethodFilter-的示例（了解即可）"><a href="#四、基于-HiddentHttpMethodFilter-的示例（了解即可）" class="headerlink" title="四、基于 HiddentHttpMethodFilter 的示例（了解即可）"></a>四、基于 HiddentHttpMethodFilter 的示例（了解即可）</h3><h4 id="1、作用：-3"><a href="#1、作用：-3" class="headerlink" title="1、作用："></a>1、作用：</h4><p>由于浏览器 form 表单只支持 GET 与 POST 请求，而DELETE、PUT 等 method<br>并不支持，Spring3.0添加了一个过滤器，可以将浏览器请求改为指定的请求方式，发送给我们的控制器方法，使得支持<br>GET、POST、PUT 与 DELETE 请求。</p>
<h4 id="2、使用方法："><a href="#2、使用方法：" class="headerlink" title="2、使用方法："></a>2、使用方法：</h4><p>a)：在 web.xml 中配置该过滤器。</p>
<p>b)：请求方式必须使用 post 请求。</p>
<p>c)：按照要求提供_method 请求参数，该参数的取值就是我们需要的请求方式。</p>
<h4 id="3、源码分析："><a href="#3、源码分析：" class="headerlink" title="3、源码分析："></a>3、源码分析：</h4><p><img src="https://github.com/ZephXu07/IMG/raw/master/ResourceCode.png" alt="源码"></p>
<p>jsp 中示例代码：</p>
<figure class="highlight"><table><tr><td class="code"><pre><span class="line">&lt;!-- 保存 --&gt; </span><br><span class="line">&lt;form action=<span class="string">"springmvc/testRestPOST"</span> method=<span class="string">"post"</span>&gt;    </span><br><span class="line">    用户名称：&lt;input type=<span class="string">"text"</span> name=<span class="string">"username"</span>&gt;&lt;br/&gt; </span><br><span class="line">    &lt;!-- &lt;input type=<span class="string">"hidden"</span> name=<span class="string">"_method"</span> value=<span class="string">"POST"</span>&gt; --&gt;   </span><br><span class="line">    &lt;input type=<span class="string">"submit"</span> value=<span class="string">"保存"</span>&gt;</span><br><span class="line">&lt;/form&gt; </span><br><span class="line">&lt;br/&gt;</span><br><span class="line">&lt;!-- 更新 --&gt;</span><br><span class="line">&lt;form action=<span class="string">"springmvc/testRestPUT/1"</span> method=<span class="string">"post"</span>&gt;   </span><br><span class="line">    用户名称：&lt;input type=<span class="string">"text"</span> name=<span class="string">"username"</span>&gt;&lt;br/&gt;    </span><br><span class="line">    &lt;input type=<span class="string">"hidden"</span> name=<span class="string">"_method"</span> value=<span class="string">"PUT"</span>&gt;  </span><br><span class="line">    &lt;input type=<span class="string">"submit"</span> value=<span class="string">"更新"</span>&gt;</span><br><span class="line">&lt;/form&gt;</span><br><span class="line">&lt;br/&gt;</span><br><span class="line">&lt;!-- 删除 --&gt;</span><br><span class="line">&lt;form action=<span class="string">"springmvc/testRestDELETE/1"</span> method=<span class="string">"post"</span>&gt;  </span><br><span class="line">    &lt;input type=<span class="string">"hidden"</span> name=<span class="string">"_method"</span> value=<span class="string">"DELETE"</span>&gt;  </span><br><span class="line">    &lt;input type=<span class="string">"submit"</span> value=<span class="string">"删除"</span>&gt;</span><br><span class="line">&lt;/form&gt; </span><br><span class="line">&lt;br/&gt; </span><br><span class="line">&lt;!-- 查询一个 --&gt;</span><br><span class="line">&lt;form action=<span class="string">"springmvc/testRestGET/1"</span> method=<span class="string">"post"</span>&gt;    </span><br><span class="line">    &lt;input type=<span class="string">"hidden"</span> name=<span class="string">"_method"</span> value=<span class="string">"GET"</span>&gt;    </span><br><span class="line">    &lt;input type=<span class="string">"submit"</span> value=<span class="string">"查询"</span>&gt;</span><br><span class="line">&lt;/form&gt;</span><br></pre></td></tr></table></figure>




<p>控制器中示例代码：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@RequestMapping</span>(value=<span class="string">"/testRestPOST"</span>,method=RequestMethod.POST) </span><br><span class="line"><span class="function"><span class="keyword">public</span> String <span class="title">testRestfulURLPOST</span><span class="params">(User user)</span></span>&#123;    </span><br><span class="line">    System.out.println(<span class="string">"rest post"</span>+user);    </span><br><span class="line">    <span class="keyword">return</span> <span class="string">"success"</span>;</span><br><span class="line">&#125; </span><br><span class="line"><span class="meta">@RequestMapping</span>(value=<span class="string">"/testRestPUT/&#123;id&#125;"</span>,method=RequestMethod.PUT)</span><br><span class="line"><span class="function"><span class="keyword">public</span> String <span class="title">testRestfulURLPUT</span><span class="params">(@PathVariable(<span class="string">"id"</span>)</span>Integer id,User user)</span>&#123;   </span><br><span class="line">    System.out.println(<span class="string">"rest put "</span>+id+<span class="string">","</span>+user);   </span><br><span class="line">    <span class="keyword">return</span> <span class="string">"success"</span>;</span><br><span class="line">&#125; </span><br><span class="line"><span class="meta">@RequestMapping</span>(value=<span class="string">"/testRestDELETE/&#123;id&#125;"</span>,method=RequestMethod.DELETE)</span><br><span class="line"><span class="function"><span class="keyword">public</span> String <span class="title">testRestfulURLDELETE</span><span class="params">(@PathVariable(<span class="string">"id"</span>)</span>Integer id)</span>&#123;  </span><br><span class="line">    System.out.println(<span class="string">"rest delete "</span>+id);</span><br><span class="line">&#125;</span><br><span class="line"><span class="meta">@RequestMapping</span>(value=<span class="string">"/testRestGET/&#123;id&#125;"</span>,method=RequestMethod.GET) </span><br><span class="line"><span class="function"><span class="keyword">public</span> String <span class="title">testRestfulURLGET</span><span class="params">(@PathVariable(<span class="string">"id"</span>)</span>Integer id)</span>&#123;  </span><br><span class="line">    System.out.println(<span class="string">"rest get "</span>+id);    </span><br><span class="line">    <span class="keyword">return</span> <span class="string">"success"</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>




<p>运行结果：</p>
<p><img src="https://github.com/ZephXu07/IMG/raw/master/RunResult.png" alt="runResult"></p>
<h3 id="五、RequestHeader注解（一般开发中不怎么用）"><a href="#五、RequestHeader注解（一般开发中不怎么用）" class="headerlink" title="五、RequestHeader注解（一般开发中不怎么用）"></a>五、RequestHeader注解（一般开发中不怎么用）</h3><h4 id="1、作用：-4"><a href="#1、作用：-4" class="headerlink" title="1、作用："></a>1、作用：</h4><p>获取指定请求头的值</p>
<h4 id="2、属性：-3"><a href="#2、属性：-3" class="headerlink" title="2、属性："></a>2、属性：</h4><p>value：请求头的名称</p>
<p>required：是否必须有此消息头</p>
<h4 id="3、实践"><a href="#3、实践" class="headerlink" title="3、实践"></a>3、实践</h4><figure class="highlight"><table><tr><td class="code"><pre><span class="line">&lt;%--RequestHeader--%&gt;    </span><br><span class="line">&lt;a href="annotation/testRequestHeader"&gt;RequestHeader&lt;/a&gt;&lt;br/&gt;</span><br></pre></td></tr></table></figure>



<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@RequestMapping</span>(<span class="string">"/testRequestHeader"</span>)  </span><br><span class="line"><span class="function"><span class="keyword">public</span> String <span class="title">testRequestHeader</span><span class="params">(@RequestHeader(value = <span class="string">"Accept"</span>)</span> String value) </span>&#123;       </span><br><span class="line">    System.out.println(<span class="string">"AnnotationController"</span>);   </span><br><span class="line">    System.out.println(value);     </span><br><span class="line">    <span class="keyword">return</span> <span class="string">"success"</span>; </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>




<p><img src="https://github.com/ZephXu07/IMG/raw/master/RequestHeaderResult.png" alt="requestHeaderResult"></p>
<h3 id="六、CookieValue注解"><a href="#六、CookieValue注解" class="headerlink" title="六、CookieValue注解"></a>六、CookieValue注解</h3><h4 id="1、作用：-5"><a href="#1、作用：-5" class="headerlink" title="1、作用："></a>1、作用：</h4><p>用于获取指定cookie的名称的值</p>
<h4 id="2、属性：-4"><a href="#2、属性：-4" class="headerlink" title="2、属性："></a>2、属性：</h4><p>value：cookie的名称</p>
<p>required：是否必须有此 cookie。</p>
<h4 id="3、实践-1"><a href="#3、实践-1" class="headerlink" title="3、实践"></a>3、实践</h4><figure class="highlight"><table><tr><td class="code"><pre><span class="line">&lt;%--CookieValue--%&gt;  </span><br><span class="line">&lt;a href="annotation/testCookieValue"&gt;CookieValue&lt;/a&gt;&lt;br/&gt;</span><br></pre></td></tr></table></figure>



<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@RequestMapping</span>(<span class="string">"/testCookieValue"</span>)  </span><br><span class="line"><span class="function"><span class="keyword">public</span> String <span class="title">testCookieValue</span><span class="params">(@CookieValue(<span class="string">"JSESSIONID"</span>)</span> String cookieValue) </span>&#123; </span><br><span class="line">	System.out.println(<span class="string">"AnnotationController"</span>);        </span><br><span class="line">	System.out.println(cookieValue);     </span><br><span class="line">    <span class="keyword">return</span> <span class="string">"success"</span>;    </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<h3 id="七、ModelAttribute注解"><a href="#七、ModelAttribute注解" class="headerlink" title="七、ModelAttribute注解"></a>七、ModelAttribute注解</h3><h4 id="1、作用"><a href="#1、作用" class="headerlink" title="1、作用"></a>1、作用</h4><p>a)<br>出现在方法上：表示当前方法会在控制器方法执行前线执行，它可以修饰没有返回值的方法，也可以修饰有具体返回值的方法。</p>
<p>b) 出现在参数上：获取指定的数据给参数赋值。</p>
<h4 id="2、属性：-5"><a href="#2、属性：-5" class="headerlink" title="2、属性："></a>2、属性：</h4><p>value：用于获取数据的 key。key 可以是 POJO 的属性名称，也可以是 map<br>结构的 key。</p>
<h4 id="3、应用场景："><a href="#3、应用场景：" class="headerlink" title="3、应用场景："></a>3、应用场景：</h4><p>当提交表单数据不是完整的实体数据时，保证没有提交的字段使用数据库原来的数据。例如：  </p>
<p>我们在编辑一个用户时，用户有一个创建信息字段，该字段的值是不允许被修改的。在提交表单数<br>据是肯定没有此字段的内容，一旦更新会把该字段内容置为<br>null，此时就可以使用此注解解决问题。</p>
<h4 id="4、实践-1"><a href="#4、实践-1" class="headerlink" title="4、实践"></a>4、实践</h4><figure class="highlight"><table><tr><td class="code"><pre><span class="line">&lt;%--ModelAttribute--%&gt;</span><br><span class="line">&lt;form action=<span class="string">"annotation/testModelAttribute"</span> method=<span class="string">"post"</span>&gt;     </span><br><span class="line">    ID：&lt;input type=<span class="string">"text"</span> name=<span class="string">"id"</span>&gt;&lt;br/&gt;     </span><br><span class="line">    AGE：&lt;input type=<span class="string">"text"</span> name=<span class="string">"age"</span>&gt;&lt;br/&gt;        </span><br><span class="line">    &lt;input type=<span class="string">"submit"</span> value=<span class="string">"保存"</span>&gt;</span><br><span class="line">&lt;/form&gt;</span><br></pre></td></tr></table></figure>




<p><strong>封装User对象，但少了Date属性，更新时会置为null，以下方法解决：</strong></p>
<h5 id="a-方法无返回值："><a href="#a-方法无返回值：" class="headerlink" title="a) 方法无返回值："></a>a) 方法无返回值：</h5><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@ModelAttribute</span>    </span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">show2</span><span class="params">(Integer id, Map&lt;String, User&gt; userMap)</span> </span>&#123;  </span><br><span class="line">	System.out.println(<span class="string">"show"</span>);     </span><br><span class="line">    <span class="comment">//模拟数据库查询        </span></span><br><span class="line">    User user = <span class="keyword">new</span> User();       </span><br><span class="line">    user.setId(id);        </span><br><span class="line">    user.setAge(<span class="number">20</span>);     </span><br><span class="line">    user.setDate(<span class="keyword">new</span> Date()); </span><br><span class="line">    userMap.put(<span class="string">"a"</span>, user);  </span><br><span class="line">&#125;</span><br><span class="line"><span class="meta">@RequestMapping</span>(<span class="string">"/testModelAttribute"</span>) </span><br><span class="line"><span class="function"><span class="keyword">public</span> String <span class="title">testModelAttribute</span><span class="params">(@ModelAttribute(<span class="string">"a"</span>)</span> User user)</span>&#123;      </span><br><span class="line">    System.out.println(<span class="string">"AnnotationController-testModelAttribute"</span>);</span><br><span class="line">    System.out.println(cookieValue);   </span><br><span class="line">    System.out.println(user);      </span><br><span class="line">    <span class="keyword">return</span> <span class="string">"success"</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<h5 id="b-方法有返回值："><a href="#b-方法有返回值：" class="headerlink" title="b) 方法有返回值："></a>b) 方法有返回值：</h5><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@ModelAttribute</span>   </span><br><span class="line"><span class="function"><span class="keyword">public</span> User <span class="title">show</span><span class="params">(Integer id)</span> </span>&#123;     </span><br><span class="line">    System.out.println(<span class="string">"show"</span>);    </span><br><span class="line">    <span class="comment">//模拟数据库查询       </span></span><br><span class="line">    User user = <span class="keyword">new</span> User();      </span><br><span class="line">    user.setId(id);      </span><br><span class="line">    user.setAge(<span class="number">20</span>);    </span><br><span class="line">    user.setDate(<span class="keyword">new</span> Date());     </span><br><span class="line">    <span class="keyword">return</span> user;   </span><br><span class="line">&#125;</span><br><span class="line"><span class="meta">@RequestMapping</span>(<span class="string">"/testModelAttribute"</span>)</span><br><span class="line"><span class="function"><span class="keyword">public</span> String <span class="title">testModelAttribute</span><span class="params">(User user)</span></span>&#123;        </span><br><span class="line">    System.out.println(<span class="string">"AnnotationController-testModelAttribute"</span>);</span><br><span class="line">    <span class="comment">//        System.out.println(cookieValue);   </span></span><br><span class="line">    System.out.println(user);      </span><br><span class="line">    <span class="keyword">return</span> <span class="string">"success"</span>;   </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>




<p><strong>从数据库查询后某些数值（已在前端输入的）会被改为前端输入的。</strong></p>
<p><img src="https://github.com/ZephXu07/IMG/raw/master/attentionModelAttribute.png" alt="注意"></p>
<h3 id="八、SessionAttributes（复数）"><a href="#八、SessionAttributes（复数）" class="headerlink" title="八、SessionAttributes（复数）"></a>八、SessionAttributes（复数）</h3><h4 id="1、作用：-6"><a href="#1、作用：-6" class="headerlink" title="1、作用："></a>1、作用：</h4><p>用于多次执行控制器方法间的参数共享。</p>
<h4 id="2、属性"><a href="#2、属性" class="headerlink" title="2、属性"></a>2、属性</h4><p>value：用于指定存入的属性名称 ；</p>
<p>type：用于指定存入的数据类型。</p>
<h4 id="3、实践："><a href="#3、实践：" class="headerlink" title="3、实践："></a>3、实践：</h4><p>annotation.jsp：</p>
<figure class="highlight jsp"><table><tr><td class="code"><pre><span class="line">&lt;%--SessionAttribute--%&gt;</span><br><span class="line">&lt;a href="annotation/testSessionAttributes"&gt;SessionAttribute&lt;/a&gt;&lt;br/&gt;</span><br><span class="line">&lt;!--存入--&gt;</span><br><span class="line">&lt;a href="annotation/getSessionAttributes"&gt;getSessionAttribute&lt;/a&gt;&lt;br/&gt;</span><br><span class="line">&lt;!--取出--&gt;</span><br><span class="line">&lt;a href="annotation/delSessionAttributes"&gt;delSessionAttribute&lt;/a&gt;&lt;br/&gt;</span><br><span class="line">&lt;!--删除--&gt;</span><br></pre></td></tr></table></figure>




<p>success.jsp：</p>
<figure class="highlight jsp"><table><tr><td class="code"><pre><span class="line">$&#123;requestScope.get(<span class="string">"phy"</span>)&#125;&lt;br/&gt;</span><br><span class="line">$&#123;phy&#125;&lt;br/&gt;</span><br><span class="line">$&#123;sessionScope.get(<span class="string">"phy"</span>)&#125;&lt;br/&gt;</span><br></pre></td></tr></table></figure>




<ul>
<li><code>@SessionAttributes(value = {&quot;phy&quot;})</code>在类上面标注，可多个，{}中是key</li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@RequestMapping</span>(<span class="string">"/testSessionAttributes"</span>) </span><br><span class="line"><span class="function"><span class="keyword">public</span> String <span class="title">testSessionAttributes</span><span class="params">(Model model)</span></span>&#123; </span><br><span class="line">    System.out.println(<span class="string">"testSessionAttribute"</span>);   </span><br><span class="line">    <span class="comment">//Model类可降低耦合，底层存储到Request域对象中     </span></span><br><span class="line">    model.addAttribute(<span class="string">"phy"</span>, <span class="string">"xzf"</span>);    </span><br><span class="line">    <span class="keyword">return</span> <span class="string">"success"</span>;   </span><br><span class="line">&#125;   </span><br><span class="line"><span class="meta">@RequestMapping</span>(<span class="string">"/getSessionAttributes"</span>) </span><br><span class="line"><span class="function"><span class="keyword">public</span> String <span class="title">getSessionAttributes</span><span class="params">(ModelMap modelMap)</span></span>&#123;     </span><br><span class="line">    System.out.println(<span class="string">"getSessionAttribute"</span>);</span><br><span class="line">    String info = (String) modelMap.getAttribute(<span class="string">"phy"</span>);  </span><br><span class="line">    <span class="comment">//实现了多次执行控制器方法间的参数共享。    </span></span><br><span class="line">    System.out.println(info);     </span><br><span class="line">    <span class="keyword">return</span> <span class="string">"success"</span>;   </span><br><span class="line">&#125;  </span><br><span class="line"><span class="meta">@RequestMapping</span>(<span class="string">"/delSessionAttributes"</span>)   </span><br><span class="line"><span class="function"><span class="keyword">public</span> String <span class="title">delSessionAttributes</span><span class="params">(SessionStatus status)</span></span>&#123;      </span><br><span class="line">    System.out.println(<span class="string">"delSessionAttribute"</span>);      </span><br><span class="line">    status.setComplete();       </span><br><span class="line">    <span class="comment">//删除session        </span></span><br><span class="line">    <span class="keyword">return</span> <span class="string">"success"</span>;   </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>




<p><img src="https://github.com/ZephXu07/IMG/raw/master/SessionAttributeResult.png" alt="结果"></p>
<h2 id="part5、响应数据和结果视图"><a href="#part5、响应数据和结果视图" class="headerlink" title="part5、响应数据和结果视图"></a>part5、响应数据和结果视图</h2><ul>
<li><p>响应的方式：</p>
<p><img src="https://github.com/ZephXu07/IMG/raw/master/ResponseWays.png" alt="ResponseWays"></p>
</li>
</ul>
<h3 id="一、返回值分类"><a href="#一、返回值分类" class="headerlink" title="一、返回值分类"></a>一、返回值分类</h3><h4 id="1、返回字符串"><a href="#1、返回字符串" class="headerlink" title="1、返回字符串"></a>1、返回字符串</h4><p>Controller方法返回字符串可以指定逻辑视图的名称，根据视图解析器为物理视图的地址。</p>
<p>视图解析器配置：</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!--视图解析器--&gt;</span>    </span><br><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"internalResourceViewResolver"</span> <span class="attr">class</span>=<span class="string">"org.springframework.web.servlet.view.InternalResourceViewResolver"</span>&gt;</span>      </span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"prefix"</span> <span class="attr">value</span>=<span class="string">"/WEB-INF/pages/"</span>/&gt;</span>   </span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"suffix"</span> <span class="attr">value</span>=<span class="string">".jsp"</span>/&gt;</span>      </span><br><span class="line">    <span class="comment">&lt;!--前后缀连接成页面的文件--&gt;</span>    </span><br><span class="line"><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br></pre></td></tr></table></figure>




<p><img src="https://github.com/ZephXu07/IMG/raw/master/Pages.png" alt="pages"></p>
<p>UserCtroller：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Controller</span><span class="meta">@RequestMapping</span>(<span class="string">"/user"</span>)</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">UserController</span> </span>&#123;    </span><br><span class="line">    <span class="meta">@RequestMapping</span>(<span class="string">"/testString"</span>)  </span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">testString</span><span class="params">(Model model)</span> </span>&#123;    </span><br><span class="line">        System.out.println(<span class="string">"testString"</span>);   </span><br><span class="line">        <span class="comment">//模拟从数据库查找       </span></span><br><span class="line">        User user = <span class="keyword">new</span> User();       </span><br><span class="line">        user.setUsername(<span class="string">"xzf"</span>);     </span><br><span class="line">        user.setPassword(<span class="string">"phy"</span>);      </span><br><span class="line">        user.setAge(<span class="number">20</span>);    </span><br><span class="line">        <span class="comment">//Model对象       </span></span><br><span class="line">        model.addAttribute(<span class="string">"user"</span>, user);      </span><br><span class="line">        <span class="keyword">return</span> <span class="string">"success"</span>;    </span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>




<p>success.jsp：</p>
<figure class="highlight"><table><tr><td class="code"><pre><span class="line">&lt;%@ page contentType=<span class="string">"text/html;charset=UTF-8"</span> language=<span class="string">"java"</span> isELIgnored=<span class="string">"false"</span> %&gt;&lt;html&gt;   </span><br><span class="line">    &lt;head&gt;       </span><br><span class="line">    	&lt;title&gt;Success&lt;/title&gt;</span><br><span class="line">    &lt;/head&gt;   </span><br><span class="line">    &lt;body&gt;   </span><br><span class="line">    	&lt;h1&gt;Success&lt;/h1&gt;         </span><br><span class="line">    	$&#123;user.toString()&#125;   </span><br><span class="line">    &lt;/body&gt;</span><br><span class="line">&lt;/html&gt;</span><br></pre></td></tr></table></figure>




<p><img src="https://github.com/ZephXu07/IMG/raw/master/SuccessResult.png" alt="successResult"></p>
<h4 id="2、返回值是void"><a href="#2、返回值是void" class="headerlink" title="2、返回值是void"></a><a href="#2、返回值是void" title="2、返回值是void"></a>2、返回值是void</h4><p>1、如果控制器的方法返回值编写成void，执行程序报404的异常，默认查找JSP页面没有找到，原因是默认会跳转到<code>@RequestMapping(&quot;/testVoid&quot;)</code>中的testVoid.jsp的页面。</p>
<p>2、可以使用请求转发或者重定向跳转到指定的页面，或者直接响应</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@RequestMapping</span>(<span class="string">"/testVoid"</span>)  </span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">testVoid</span><span class="params">(HttpServletRequest request, HttpServletResponse response)</span> <span class="keyword">throws</span> ServletException, IOException </span>&#123;      </span><br><span class="line">	System.out.println(<span class="string">"testVoid"</span>);      </span><br><span class="line">    <span class="comment">/*请求转发，不需要编写项目的名称，但是仍需要写部分路径，原因是不返回字符串，  </span></span><br><span class="line"><span class="comment">    视图解析器不会工作，且转发后再执行后续代码，用return 停止     </span></span><br><span class="line"><span class="comment">    */</span>     </span><br><span class="line">	request.getRequestDispatcher(<span class="string">"/WEB-INF/pages/success.jsp"</span>).forward(request, response);    </span><br><span class="line">	<span class="comment">//return;  </span></span><br><span class="line">    <span class="comment">/*            重定向，两次转发，页面需要重新详细写，            </span></span><br><span class="line"><span class="comment">    request.getContextPath()           </span></span><br><span class="line"><span class="comment">    拿到springmvc_day_02_01_response_war_exploded路径，此地方只有Index.jsp     </span></span><br><span class="line"><span class="comment">    */</span>   </span><br><span class="line">	response.sendRedirect(request.getContextPath() + <span class="string">"/index.jsp"</span>);    </span><br><span class="line">    <span class="comment">/*直接响应：浏览器直接发请求，控制器通过输出流直接响应会浏览器   </span></span><br><span class="line"><span class="comment">    设置解决中文乱码*/</span>     </span><br><span class="line">    response.setCharacterEncoding(<span class="string">"UTF-8"</span>);        </span><br><span class="line">    response.setContentType(<span class="string">"text/html;charset=UTF-8"</span>);        </span><br><span class="line">    <span class="comment">//response.setContentType("application/json;charset=utf-8");        </span></span><br><span class="line">    response.getWriter().println(<span class="string">"直接响应"</span>);  </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<h4 id="3-返回值是ModelAndView对象（与返回字符串方式类似）"><a href="#3-返回值是ModelAndView对象（与返回字符串方式类似）" class="headerlink" title="3. 返回值是ModelAndView对象（与返回字符串方式类似）"></a>3. 返回值是ModelAndView对象（与返回字符串方式类似）</h4><p>a)、ModelAndView对象是Spring提供的一个对象，可以用来调整具体的JSP视图</p>
<p>b)、实践</p>
<table>
<col width="50%" />
<col width="50%" />
<tbody>
<tr class="odd">
<td align="left"><pre><code>12345678910111213141516</code></pre></td>
<td align="left"><pre><code>@RequestMapping(&quot;/testModelAndView&quot;)    public ModelAndView testModelAndView() {        System.out.println(&quot;testModelAndView&quot;);        //创建ModelAndView对象        ModelAndView mv = new ModelAndView();        //模拟从数据库查找        User user = new User();        user.setUsername(&quot;phy&quot;);        user.setPassword(&quot;xzf&quot;);        user.setAge(22);        //把user对象存储到mv对象中，也会把user对象存入request域对象        mv.addObject(&quot;user&quot;, user);        //跳转到哪个页面，使用视图解析器        mv.setViewName(&quot;success&quot;);        return mv;    }</code></pre></td>
</tr>
</tbody>
</table>

<p>c)、<strong>注意： 我们在页面上上获取使用的是 requestScope.username<br>取的，所以返回 ModelAndView 类型时，浏 览器跳转只能是请求转发。</strong></p>
<h3 id="二、SpringMVC框架提供的转发和重定向"><a href="#二、SpringMVC框架提供的转发和重定向" class="headerlink" title="二、SpringMVC框架提供的转发和重定向"></a>二、SpringMVC框架提供的转发和重定向</h3><h4 id="1、forward请求转发"><a href="#1、forward请求转发" class="headerlink" title="1、forward请求转发"></a>1、forward请求转发</h4><p>controller方法返回String类型，想进行请求转发也可以编写成</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//请求转发：不使用视图解析器    </span></span><br><span class="line"><span class="keyword">return</span> <span class="string">"forward:/WEB-INF/pages/success.jsp"</span>;</span><br><span class="line"><span class="comment">//相当于“request.getRequestDispatcher("url").forward(request,response)”。</span></span><br><span class="line"><span class="comment">// 使用请求 转发，既可以转发到 jsp，也可以转发到其他的控制器方法。</span></span><br></pre></td></tr></table></figure>



<h4 id="2、redirect重定向"><a href="#2、redirect重定向" class="headerlink" title="2、redirect重定向"></a>2、redirect重定向</h4><p>controller方法返回String类型，想进行重定向也可以编写成</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//重定向：不需要加项目名     </span></span><br><span class="line"><span class="keyword">return</span> <span class="string">"redirect:/index.jsp"</span>;</span><br><span class="line"><span class="comment">//相当于“response.sendRedirect(url)”。需要注意的是，// 如果是重定向到 jsp 页面，则 jsp 页面不 能写在 WEB-INF 目录中，否则无法找到。</span></span><br></pre></td></tr></table></figure>



<h3 id="三、ResponseBody响应json数据"><a href="#三、ResponseBody响应json数据" class="headerlink" title="三、ResponseBody响应json数据"></a>三、ResponseBody响应json数据</h3><h4 id="1、DispatcherServlet"><a href="#1、DispatcherServlet" class="headerlink" title="1、DispatcherServlet"></a>1、DispatcherServlet</h4><p>DispatcherServlet会拦截到所有的资源，导致一个问题就是静态资源（img、css、js）也会被拦截到，从而<br>不能被使用。解决问题就是需要配置静态资源不进行拦截，在springmvc.xml配置文件添加如下配置</p>
<p>a) location元素表示webapp目录下的包下的所有文件</p>
<p>b) mapping元素表示以/static开头的所有请求路径，如/static/a<br>或者/static/a/b</p>
<p>添加配置SpringMVC.xml配置：</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!-- 设置静态资源不过滤 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">mvc:resources</span> <span class="attr">location</span>=<span class="string">"/css/"</span> <span class="attr">mapping</span>=<span class="string">"/css/**"</span>/&gt;</span> </span><br><span class="line"><span class="comment">&lt;!-- 样式 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">mvc:resources</span> <span class="attr">location</span>=<span class="string">"/images/"</span> <span class="attr">mapping</span>=<span class="string">"/images/**"</span>/&gt;</span> </span><br><span class="line"><span class="comment">&lt;!-- 图片 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">mvc:resources</span> <span class="attr">location</span>=<span class="string">"/js/"</span> <span class="attr">mapping</span>=<span class="string">"/js/**"</span>/&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- javascript --&gt;</span></span><br></pre></td></tr></table></figure>




<p><strong>配置一字不落的不能改变，location少了后面一个/都不能用了！！！</strong></p>
<h4 id="2、使用-RequestBody获取请求体数据（点击查看作用）"><a href="#2、使用-RequestBody获取请求体数据（点击查看作用）" class="headerlink" title="2、使用@RequestBody获取请求体数据（点击查看作用）"></a>2、使用@RequestBody获取请求体数据<a href="#RequestBody">（点击查看作用）</a></h4><figure class="highlight"><table><tr><td class="code"><pre><span class="line">&lt;%--  User: ZephXU  Date: <span class="number">2019</span>/<span class="number">10</span>/<span class="number">10</span>  Time: <span class="number">19</span>:<span class="number">12</span>--%&gt;</span><br><span class="line">&lt;%@ page contentType=<span class="string">"text/html;charset=UTF-8"</span> language=<span class="string">"java"</span> %&gt;</span><br><span class="line">&lt;html&gt;</span><br><span class="line">	&lt;head&gt;   </span><br><span class="line">		&lt;title&gt;Response&lt;/title&gt;  </span><br><span class="line">		&lt;script src="js/jquery.min.js"&gt;&lt;/script&gt;   </span><br><span class="line">		&lt;script&gt;      </span><br><span class="line">            <span class="comment">//页面加载，绑定单击事件       </span></span><br><span class="line">            $(function () &#123;          </span><br><span class="line">                $(<span class="string">"#btn"</span>).click(function () &#123;    </span><br><span class="line">                alert(<span class="string">"hello button"</span>)          </span><br><span class="line">                &#125;)      </span><br><span class="line">            &#125;)  </span><br><span class="line">        &lt;/script&gt;</span><br><span class="line">	&lt;/head&gt;</span><br><span class="line">	&lt;body&gt;  </span><br><span class="line">		&lt;button id="btn"&gt;发送ajax请求&lt;/button&gt;</span><br><span class="line">	&lt;/body&gt;</span><br><span class="line">&lt;/html&gt;</span><br></pre></td></tr></table></figure>




<p>UserController.java</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//模拟异步请求响应   </span></span><br><span class="line"><span class="meta">@RequestMapping</span>(<span class="string">"/testAjax"</span>)   </span><br><span class="line"><span class="function"><span class="keyword">public</span> String <span class="title">testAjax</span><span class="params">(@RequestBody String body)</span> </span>&#123;    </span><br><span class="line">	System.out.println(<span class="string">"testAjax"</span>);       </span><br><span class="line">    System.out.println(body);      </span><br><span class="line">    <span class="keyword">return</span> <span class="string">"success"</span>;   </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<p><strong>无任何响应！<a href="#dispatcherServlet">原因</a></strong></p>
<h4 id="3、使用-RequestBody注解把json的字符串转换成JavaBean的对象"><a href="#3、使用-RequestBody注解把json的字符串转换成JavaBean的对象" class="headerlink" title="3、使用@RequestBody注解把json的字符串转换成JavaBean的对象"></a>3、使用@RequestBody注解把json的字符串转换成JavaBean的对象</h4><h4 id="4、使用-ResponseBody注解把JavaBean对象转换成json字符串，直接响应"><a href="#4、使用-ResponseBody注解把JavaBean对象转换成json字符串，直接响应" class="headerlink" title="4、使用@ResponseBody注解把JavaBean对象转换成json字符串，直接响应"></a>4、使用@ResponseBody注解把JavaBean对象转换成json字符串，直接响应</h4><p>a)<br>作用：该注解用于将Controller的方法返回的对象，通过HttpMessageConverter接口转换为指定格式的<br>数据如：json,xml 等，通过 Response 响应给客户端</p>
<p>b) <strong>Springmvc 默认用 MappingJacksonHttpMessageConverter 对 json<br>数据进行转换，需要加入jackson 的包。</strong></p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!-- https://mvnrepository.com/artifact/com.fasterxml.jackson.core/jackson-databind --&gt;</span>    </span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span>      </span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.fasterxml.jackson.core<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span>  </span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>jackson-databind<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span>      </span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>$&#123;jackson.version&#125;<span class="tag">&lt;/<span class="name">version</span>&gt;</span>   </span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span>   </span><br><span class="line"><span class="comment">&lt;!-- https://mvnrepository.com/artifact/com.fasterxml.jackson.core/jackson-annotations --&gt;</span>    </span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span>     </span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.fasterxml.jackson.core<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span> </span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>jackson-annotations<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span>     </span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>$&#123;jackson.version&#125;<span class="tag">&lt;/<span class="name">version</span>&gt;</span>  </span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span>   </span><br><span class="line"><span class="comment">&lt;!-- https://mvnrepository.com/artifact/com.fasterxml.jackson.core/jackson-core --&gt;</span>    </span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span>   </span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.fasterxml.jackson.core<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span> </span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>jackson-core<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span>   </span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>$&#123;jackson.version&#125;<span class="tag">&lt;/<span class="name">version</span>&gt;</span>  </span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure>



<p><code>${jackson.version}</code>前文已写。</p>
<p>c) response.jsp：<strong>按钮方法改变！！！</strong></p>
<figure class="highlight"><table><tr><td class="code"><pre><span class="line">&lt;script&gt;        </span><br><span class="line"><span class="comment">//页面加载，绑定单击事件    </span></span><br><span class="line">$(function () &#123;       </span><br><span class="line">	$(<span class="string">"#btn"</span>).click(function () &#123;       </span><br><span class="line">		alert(<span class="string">"看控制台"</span>);            </span><br><span class="line">		<span class="comment">//编写json格式，设置属性和值       </span></span><br><span class="line">		$.ajax(&#123;               </span><br><span class="line">			url:<span class="string">"user/testAjax"</span>,              </span><br><span class="line">			contentType:<span class="string">"application/json;charset=UTF-8"</span>,                    				data:<span class="string">'&#123;"username":"phy","password":"phy","age":22&#125;'</span>,                    			dataType:<span class="string">"json"</span>,              </span><br><span class="line">			type:<span class="string">"post"</span>,                 </span><br><span class="line">			success:function (data) &#123;       </span><br><span class="line">				<span class="comment">//data服务器端响应的json的数据，进行解析        </span></span><br><span class="line">				alert(data + <span class="string">"\n"</span> + data.username + <span class="string">"\n"</span></span><br><span class="line">                    + data.password + <span class="string">"\n"</span></span><br><span class="line">                    + data.age); </span><br><span class="line">				&#125;         </span><br><span class="line">			&#125;)     </span><br><span class="line">	&#125;);  </span><br><span class="line">&#125;);  </span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure>




<p>d) UserController.java新的控制方法：</p>
<ul>
<li>把json的字符串转换成JavaBean的对象</li>
<li>方法需要返回JavaBean的对象</li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//模拟异步请求响应   </span></span><br><span class="line"><span class="meta">@RequestMapping</span>(<span class="string">"/testAjax"</span>)  </span><br><span class="line"><span class="keyword">public</span> <span class="meta">@ResponseBody</span> <span class="function">User <span class="title">testAjax</span><span class="params">(@RequestBody User user)</span> </span>&#123;        </span><br><span class="line">    System.out.println(<span class="string">"testAjax"</span>);  </span><br><span class="line">    <span class="comment">//客户端发送Ajax请求，传的是json字符串，后端把json字符串封装到user对象中        </span></span><br><span class="line">    System.out.println(user);      </span><br><span class="line">    <span class="comment">//做响应，模拟查询数据库，与客户端传来数据少许不同   </span></span><br><span class="line">    user.setUsername(<span class="string">"xzf"</span>);       </span><br><span class="line">    user.setPassword(<span class="string">"xzf"</span>);       </span><br><span class="line">    user.setAge(<span class="number">19</span>);      </span><br><span class="line">    <span class="comment">//做响应，返回新的数据    </span></span><br><span class="line">    <span class="keyword">return</span> user;    </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>




<p>e) 结果：</p>
<p><img src="https://github.com/ZephXu07/IMG/raw/master/JsonResult1.png" alt="result1"></p>
<p><img src="https://github.com/ZephXu07/IMG/raw/master/JsonResult2.png" alt="result2"></p>
<p><img src="https://github.com/ZephXu07/IMG/raw/master/JsonResult3.png" alt="result3"></p>
<h2 id="part6、SpringMVC实现文件上传"><a href="#part6、SpringMVC实现文件上传" class="headerlink" title="part6、SpringMVC实现文件上传"></a>part6、SpringMVC实现文件上传</h2><h3 id="1、传统文件上传的回顾"><a href="#1、传统文件上传的回顾" class="headerlink" title="1、传统文件上传的回顾"></a>1、传统文件上传的回顾</h3><h4 id="a-、必要前提"><a href="#a-、必要前提" class="headerlink" title="a)、必要前提"></a>a)、必要前提</h4><p>i)、form 表单的 enctype 取值必须是：<strong>multipart/form-data</strong></p>
<p>(默认值是:<strong>application/x-www-form-urlencoded</strong>，即以键值对形式：<code>username=xzf&amp;passwprd=10709991</code>)<br> enctype:是表单请求正文的类型<br> ii)、method 属性取值必须是 Post ，Get会写在地址栏，大小有限</p>
<p>iii)、提供一个文件选择域```</p>
<h4 id="b-、原理分析"><a href="#b-、原理分析" class="headerlink" title="b)、原理分析"></a>b)、原理分析</h4><p>当 form 表单的 enctype 取值不是默认值后，request.getParameter()将失效。<br>enctype=”application/x-www-form-urlencoded”时，form 表单的正文内容是：<br>key=value&amp;key=value&amp;key=value<br>当 form 表单的 enctype 取值为 Mutilpart/form-data<br>时，请求正文内容就变成：每一部分都是 MIME 类型描述的正文</p>
<p>—————————–7de1a433602ac 分界符<br> Content-Disposition: form-data; name=”userName” 协议头</p>
<p>aaa<br> —————————–7de1a433602ac 协议的正文</p>
<p>Content-Disposition: form-data;<br>filename=”C:\Users\zhy\Desktop\fileupload_demofile\b.txt”</p>
<p>Content-Type: text/plain 协议的类型（MIME 类型）<br> bbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbb</p>
<p>—————————–7de1a433602ac–</p>
<h4 id="c-、借助第三方组件实现文件上传"><a href="#c-、借助第三方组件实现文件上传" class="headerlink" title="c)、借助第三方组件实现文件上传"></a>c)、借助第三方组件实现文件上传</h4><p>使用 Commons-fileupload 组件实现文件上传，需要导入该组件相应的支撑 jar<br>包：Commons-fileupload 和commons-io。commons-io<br>不属于文件上传组件的开发jar 文件，但Commons-fileupload 组件从1.1<br>版本开始，它 工作时需要 commons-io 包的支持。</p>
<h4 id="d-、代码："><a href="#d-、代码：" class="headerlink" title="d)、代码："></a>d)、代码：</h4><p>文件上传的JSP页面：</p>
<figure class="highlight"><table><tr><td class="code"><pre><span class="line">&lt;%--  User: ZephXU  Date: <span class="number">2019</span>/<span class="number">10</span>/<span class="number">12</span>  Time: <span class="number">19</span>:<span class="number">00</span>--%&gt;</span><br><span class="line">&lt;%@ page contentType=<span class="string">"text/html;charset=UTF-8"</span> language=<span class="string">"java"</span> %&gt;</span><br><span class="line">&lt;html&gt;</span><br><span class="line">	&lt;head&gt; </span><br><span class="line">		&lt;title&gt;文件上传&lt;/title&gt;</span><br><span class="line">    &lt;/head&gt;</span><br><span class="line">	&lt;body&gt;</span><br><span class="line">		&lt;h1&gt;文件上传&lt;/h1&gt;</span><br><span class="line">		&lt;form action=<span class="string">"user/fileUpload0"</span> method=<span class="string">"post"</span> enctype=<span class="string">"multipart/form-data"</span>&gt;  </span><br><span class="line">            选择上传文件：&lt;input type=<span class="string">"file"</span> name=<span class="string">"upload"</span>/&gt;&lt;br/&gt;  </span><br><span class="line">            &lt;input type=<span class="string">"submit"</span> value=<span class="string">"上传"</span>&gt;</span><br><span class="line">		&lt;/form&gt;</span><br><span class="line">	&lt;/body&gt;</span><br><span class="line">&lt;/html&gt;</span><br></pre></td></tr></table></figure>




<p>文件上传的Controller控制器：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Controller</span></span><br><span class="line"><span class="meta">@RequestMapping</span>(<span class="string">"/user"</span>)</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">UserController</span> </span>&#123;  </span><br><span class="line">    <span class="meta">@RequestMapping</span>(<span class="string">"/fileUpload0"</span>)    </span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">fileUpload0</span><span class="params">(HttpServletRequest request)</span> <span class="keyword">throws</span> Exception </span>&#123; </span><br><span class="line">        System.out.println(<span class="string">"fileUpload0"</span>);      </span><br><span class="line">        <span class="comment">//使用fileupload组件完成文件上传    </span></span><br><span class="line">        <span class="comment">//上传的位置     </span></span><br><span class="line">        String path =request.getSession().getServletContext().getRealPath(<span class="string">"/uploads/"</span>);   </span><br><span class="line">        <span class="comment">//判断该路径是否存在    </span></span><br><span class="line">        File file = <span class="keyword">new</span> File(path);      </span><br><span class="line">        <span class="keyword">if</span> (!file.exists()) &#123;        </span><br><span class="line">            <span class="comment">//创建该文件夹            </span></span><br><span class="line">            file.mkdirs();      </span><br><span class="line">        &#125;        </span><br><span class="line">        <span class="comment">//解析request对象，获取上传文件项     </span></span><br><span class="line">        DiskFileItemFactory factory = <span class="keyword">new</span> DiskFileItemFactory();     </span><br><span class="line">        ServletFileUpload upload = <span class="keyword">new</span> ServletFileUpload(factory); </span><br><span class="line">        <span class="comment">//解析request       </span></span><br><span class="line">        List&lt;FileItem&gt; items = upload.parseRequest(request);   </span><br><span class="line">        <span class="comment">//遍历      </span></span><br><span class="line">        <span class="keyword">for</span> (FileItem item: items) &#123;     </span><br><span class="line">            <span class="keyword">if</span> (!item.isFormField()) &#123;        </span><br><span class="line">                <span class="comment">//不是普通表单，文件            </span></span><br><span class="line">                <span class="comment">//获取文件名称          </span></span><br><span class="line">                String fileName  = item.getName();         </span><br><span class="line">                <span class="comment">//fileName带盘符，在创建新文件因与path的所在盘可能          </span></span><br><span class="line">                <span class="comment">// 不同造成bug：文件名、目录名或卷标语法不正确。      </span></span><br><span class="line">                String fileTrueName = fileName.substring(fileName.lastIndexOf(<span class="string">"\\"</span>)+<span class="number">1</span>);      </span><br><span class="line">                <span class="comment">//获得单纯文件名              </span></span><br><span class="line">                <span class="comment">//把文件名称设置为唯一值，UUID         </span></span><br><span class="line">                String uuid = UUID.randomUUID().toString().replace(<span class="string">"-"</span>, <span class="string">""</span>);                </span><br><span class="line">                fileTrueName = uuid + <span class="string">"_"</span> + fileTrueName;        </span><br><span class="line">                <span class="comment">//完成文件上传                </span></span><br><span class="line">                item.write(<span class="keyword">new</span> File(path, fileTrueName));        </span><br><span class="line">                <span class="comment">//删除临时文件，上传文件大小大于10KB产生临时文件，小于10KB则在内存中生成缓存文件              </span></span><br><span class="line">                item.delete();    </span><br><span class="line">            &#125;     </span><br><span class="line">        &#125;   </span><br><span class="line">        <span class="keyword">return</span> <span class="string">"success"</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>




<p><strong>BUG：文件名、目录名或卷标语法不正确。</strong></p>
<p><strong>原因：fileName带盘符，在创建新文件因与path的所在盘可能不同造成bug。</strong></p>
<p><a href="https://www.iteye.com/blog/rogerfederer-1039666" target="_blank" rel="noopener">解决方案</a></p>
<h3 id="2、SpringMVC传统方式文件上传"><a href="#2、SpringMVC传统方式文件上传" class="headerlink" title="2、SpringMVC传统方式文件上传"></a>2、SpringMVC传统方式文件上传</h3><p>a)、SpringMVC框架提供了MultipartFile对象，该对象表示上传的文件，<strong>要求变量名称必须和表单file标签的<br>name属性名称相同。</strong></p>
<p>b)、原理图：<strong>图中注意事项</strong></p>
<p><img src="https://github.com/ZephXu07/IMG/raw/master/SpringMVCUpload.png" alt="原理图"></p>
<p>c)、配置文件解析器对象</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!--配置文件解析器对象，id必须是multipartResolver--&gt;</span>  </span><br><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"multipartResolver"</span> <span class="attr">class</span>=<span class="string">"org.springframework.web.multipart.commons.CommonsMultipartResolver"</span>&gt;</span>   </span><br><span class="line">	<span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"maxUploadSize"</span> <span class="attr">value</span>=<span class="string">"10485760"</span>/&gt;</span>     </span><br><span class="line">	<span class="comment">&lt;!--文件上传最大大小单位字节：10*1024*1024--&gt;</span>   </span><br><span class="line"><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br></pre></td></tr></table></figure>




<p>d)、Controller方法（只是改变些许）：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@RequestMapping</span>(<span class="string">"/fileUpload1"</span>)   </span><br><span class="line"><span class="function"><span class="keyword">public</span> String <span class="title">fileUpload1</span><span class="params">(HttpServletRequest request, MultipartFile upload)</span> <span class="keyword">throws</span> Exception </span>&#123;      </span><br><span class="line">    <span class="comment">//注意upload需要和表单的文件上传的name一样      </span></span><br><span class="line">    System.out.println(<span class="string">"fileUpload1"</span>);     </span><br><span class="line">    <span class="comment">//使用fileupload组件完成文件上传      </span></span><br><span class="line">    <span class="comment">//上传的位置     </span></span><br><span class="line">    String path = request.getSession().getServletContext().getRealPath(<span class="string">"/uploads/"</span>);   </span><br><span class="line">    <span class="comment">//判断该路径是否存在     </span></span><br><span class="line">    File file = <span class="keyword">new</span> File(path);     </span><br><span class="line">    <span class="keyword">if</span> (!file.exists()) &#123;      </span><br><span class="line">        <span class="comment">//创建该文件夹        </span></span><br><span class="line">        file.mkdirs();      </span><br><span class="line">    &#125;       </span><br><span class="line">    <span class="comment">//获取文件名称     </span></span><br><span class="line">    String fileName  = upload.getOriginalFilename();   </span><br><span class="line">    <span class="comment">//把文件名称设置为唯一值，UUID    </span></span><br><span class="line">    String uuid = UUID.randomUUID().toString().replace(<span class="string">"-"</span>, <span class="string">""</span>);   </span><br><span class="line">    fileName = uuid + <span class="string">"_"</span> + fileName;       </span><br><span class="line">    <span class="comment">//完成文件上传       </span></span><br><span class="line">    upload.transferTo(<span class="keyword">new</span> File(path, fileName)); </span><br><span class="line">    <span class="keyword">return</span> <span class="string">"success"</span>;   </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<h3 id="3、SpringMVC跨服务器方式文件上传"><a href="#3、SpringMVC跨服务器方式文件上传" class="headerlink" title="3、SpringMVC跨服务器方式文件上传"></a>3、SpringMVC跨服务器方式文件上传</h3><h4 id="1、搭建图片服务器："><a href="#1、搭建图片服务器：" class="headerlink" title="1、搭建图片服务器："></a>1、搭建图片服务器：</h4><p>a)、分服务器的目的：</p>
<p>在实际开发中，我们会有很多处理不同功能的服务器。例如：</p>
<p>应用服务器：负责部署我们的应用</p>
<p>数据库服务器：运行我们的数据库<br> 缓存和消息服务器：负责处理大并发访问的缓存和消息</p>
<p>文件服务器：负责存储用户上传文件的服务器。</p>
<p>(注意：此处说的不是服务器集群）</p>
<p>分服务器处理的目的是让服务器各司其职，从而提高我们项目的运行效率。</p>
<p><img src="https://github.com/ZephXu07/IMG/raw/master/FileUploadsAcrossServers.png" alt="FileUploadsAcrossServers"></p>
<p><img src="https://github.com/ZephXu07/IMG/raw/master/PurposeOfSub-server.png" alt="Purpose of
sub-server"></p>
<p>b)、再创建 tomcat 服务器，并创建一个用于存放图片的 web工程：</p>
<p>如图：</p>
<p><img src="https://github.com/ZephXu07/IMG/raw/master/FileServerStructure.png" alt="FileServer"></p>
<p>在<strong>apache-tomcat-8.5.40\conf目录下的web.xml加入内容：</strong></p>
<p><img src="https://github.com/ZephXu07/IMG/raw/master/AddTheConfiguration.png" alt="Configuration"></p>
<p><strong>bug：com.sun.jersey.api.client.UniformInterfaceException: PUT<br><a href="http://localhost:9090/fileuploadserver_war_exploded/uploads/04694da7a10a4a98b68690ad6426a120_ShowUserAgent.html" target="_blank" rel="noopener">http://localhost:9090/fileuploadserver_war_exploded/uploads/04694da7a10a4a98b68690ad6426a120_ShowUserAgent.html</a><br>returned a response status of 409 Conflict</strong></p>
<p><strong>原因：项目的target目录下没有存储上传文件的目录，如<a href="#uploads">上图</a></strong></p>
<p><a href="https://blog.csdn.net/Java_3y/article/details/84908247" target="_blank" rel="noopener">参考博客</a></p>
<h4 id="2、实现SpringMVC跨服务器方式文件上传"><a href="#2、实现SpringMVC跨服务器方式文件上传" class="headerlink" title="2、实现SpringMVC跨服务器方式文件上传"></a>2、实现SpringMVC跨服务器方式文件上传</h4><p>a)、导入开发需要的jar包</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span>    </span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.sun.jersey<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span>   </span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>jersey-core<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span>      </span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.18.1<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span>   </span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.sun.jersey<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span>  </span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>jersey-client<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span>    </span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.18.1<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure>




<p>b)、编写文件上传的JSP页面</p>
<figure class="highlight"><table><tr><td class="code"><pre><span class="line">&lt;h1&gt;SpringMVC跨服务器文件上传&lt;/h1&gt;</span><br><span class="line">&lt;form action=<span class="string">"user/fileUpload2"</span> method=<span class="string">"post"</span> enctype=<span class="string">"multipart/form-data"</span>&gt;  </span><br><span class="line">    选择上传文件：&lt;input type=<span class="string">"file"</span> name=<span class="string">"upload"</span>/&gt;&lt;br/&gt; </span><br><span class="line">    &lt;input type=<span class="string">"submit"</span> value=<span class="string">"上传"</span>&gt;</span><br><span class="line">&lt;/form&gt;</span><br></pre></td></tr></table></figure>




<p>c)、编写控制器</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@RequestMapping</span>(<span class="string">"/fileUpload2"</span>) </span><br><span class="line"><span class="function"><span class="keyword">public</span> String <span class="title">fileUpload2</span><span class="params">(MultipartFile upload)</span> <span class="keyword">throws</span> Exception </span>&#123;    </span><br><span class="line">    System.out.println(<span class="string">"fileUpload2"</span>);   </span><br><span class="line">    <span class="comment">//定义上传文件服务器路径    </span></span><br><span class="line">    String path = <span class="string">"http://localhost:9090/fileuploadserver_war_exploded/uploads/"</span>;   </span><br><span class="line">    <span class="comment">//获取文件名称     </span></span><br><span class="line">    String fileName  = upload.getOriginalFilename();      </span><br><span class="line">    <span class="comment">//把文件名称设置为唯一值，UUID      </span></span><br><span class="line">    String uuid = UUID.randomUUID().toString().replace(<span class="string">"-"</span>, <span class="string">""</span>);    </span><br><span class="line">    fileName = uuid + <span class="string">"_"</span> + fileName;     </span><br><span class="line">    <span class="comment">//完成文件跨服务器上传           </span></span><br><span class="line">    <span class="comment">//创建客户端对象     </span></span><br><span class="line">    Client client = Client.create();      </span><br><span class="line">    <span class="comment">//和图片服务器进行连接   </span></span><br><span class="line">    WebResource webResource = client.resource(path + fileName);       </span><br><span class="line">    <span class="comment">//上传        </span></span><br><span class="line">    webResource.put(upload.getBytes());     </span><br><span class="line">    <span class="keyword">return</span> <span class="string">"success"</span>;   </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>




<h2 id="part7、SpringMVC的异常处理"><a href="#part7、SpringMVC的异常处理" class="headerlink" title="part7、SpringMVC的异常处理"></a>part7、SpringMVC的异常处理</h2><h3 id="1、异常处理思路"><a href="#1、异常处理思路" class="headerlink" title="1、异常处理思路"></a>1、异常处理思路</h3><p>系统中异常包括两类：预期异常和运行时异常RuntimeException，前者通过捕获异常从而获取异常信息，<br>后者主要通过规范代码开发、测试通过手段减少运行时异常的发生。</p>
<p>系统的 dao、service、controller 出现都通过 throws Exception<br>向上抛出，最后由 springmvc 前端控制器交由异常处理器进行异常处理，如下图：</p>
<p><img src="https://github.com/ZephXu07/IMG/raw/master/SpringMVCExceptionHandler.png" alt="SpringMVCExceptionHandler"></p>
<h3 id="2、SpringMVC的异常处理"><a href="#2、SpringMVC的异常处理" class="headerlink" title="2、SpringMVC的异常处理"></a>2、SpringMVC的异常处理</h3><h5 id="a-、不进行处理："><a href="#a-、不进行处理：" class="headerlink" title="a)、不进行处理："></a>a)、不进行处理：</h5><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@RequestMapping</span>(<span class="string">"/testException"</span>)  </span><br><span class="line"><span class="function"><span class="keyword">public</span> String <span class="title">testException</span><span class="params">()</span> <span class="keyword">throws</span> Exception</span>&#123; </span><br><span class="line">    System.out.println(<span class="string">"testException"</span>);     </span><br><span class="line">    <span class="comment">//模拟异常      </span></span><br><span class="line">    <span class="keyword">int</span> exception = <span class="number">1</span> / <span class="number">0</span>;   </span><br><span class="line">    <span class="keyword">return</span> <span class="string">"success"</span>;  </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>




<p><img src="https://github.com/ZephXu07/IMG/raw/master/DontHandleException.png" alt="Don&#39;t handle
exception"></p>
<h5 id="b-、异常处理"><a href="#b-、异常处理" class="headerlink" title="b)、异常处理"></a>b)、异常处理</h5><h6 id="i-、自定义异常类：继承Exception"><a href="#i-、自定义异常类：继承Exception" class="headerlink" title="i)、自定义异常类：继承Exception"></a>i)、自定义异常类：继承Exception</h6><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">SystemException</span> <span class="keyword">extends</span> <span class="title">Exception</span> </span>&#123;     </span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="title">SystemException</span><span class="params">(String message)</span> </span>&#123;     </span><br><span class="line">		<span class="keyword">this</span>.message = message;  </span><br><span class="line">	&#125;   </span><br><span class="line">	<span class="comment">/**     * 存储提示信息     */</span>  </span><br><span class="line">	<span class="keyword">private</span> String message;  </span><br><span class="line">	<span class="meta">@Override</span>   </span><br><span class="line">	<span class="function"><span class="keyword">public</span> String <span class="title">getMessage</span><span class="params">()</span> </span>&#123;    </span><br><span class="line">		<span class="keyword">return</span> message;   </span><br><span class="line">	&#125;    </span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setMessage</span><span class="params">(String message)</span> </span>&#123; </span><br><span class="line">		<span class="keyword">this</span>.message = message; </span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<h6 id="ii-、自定义异常处理器"><a href="#ii-、自定义异常处理器" class="headerlink" title="ii)、自定义异常处理器"></a>ii)、自定义异常处理器</h6><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">SystemExceptionResolver</span> <span class="keyword">implements</span> <span class="title">HandlerExceptionResolver</span> </span>&#123;   </span><br><span class="line"><span class="comment">/**    </span></span><br><span class="line"><span class="comment">* Controller抛出异常，前端控制器调用异常处理器，此方法将会执行 </span></span><br><span class="line"><span class="comment">* 此方法作用为处理异常业务逻辑  </span></span><br><span class="line"><span class="comment">* <span class="doctag">@param</span> httpServletRequest 请求   </span></span><br><span class="line"><span class="comment">* <span class="doctag">@param</span> httpServletResponse 响应    </span></span><br><span class="line"><span class="comment">* <span class="doctag">@param</span> o 处理器对象   </span></span><br><span class="line"><span class="comment">* <span class="doctag">@param</span> e controller抛出的异常对象    </span></span><br><span class="line"><span class="comment">* <span class="doctag">@return</span> ModelAndView对象    </span></span><br><span class="line"><span class="comment">*/</span>   </span><br><span class="line"><span class="meta">@Override</span>    </span><br><span class="line"><span class="function"><span class="keyword">public</span> ModelAndView <span class="title">resolveException</span><span class="params">(HttpServletRequest httpServletRequest, HttpServletResponse httpServletResponse, Object o, Exception e)</span> </span>&#123;      </span><br><span class="line">	SystemException se = <span class="keyword">null</span>;     </span><br><span class="line">	<span class="keyword">if</span> (e <span class="keyword">instanceof</span> SystemException) &#123; </span><br><span class="line">		<span class="comment">//如果抛出的是系统自定义异常则直接转换    </span></span><br><span class="line">		se = (SystemException) e;   </span><br><span class="line">	&#125; <span class="keyword">else</span> &#123;        </span><br><span class="line">		<span class="comment">//如果抛出的不是系统自定义异常则重新构造一个系统错误异常。 </span></span><br><span class="line">		se = <span class="keyword">new</span> SystemException(<span class="string">"系统正在维护……"</span>);   </span><br><span class="line">	&#125;     </span><br><span class="line">	<span class="comment">//创建ModelAndView对象  </span></span><br><span class="line">	ModelAndView mv = <span class="keyword">new</span> ModelAndView();     </span><br><span class="line">	mv.addObject(<span class="string">"errorMsg"</span>, se.getMessage());       </span><br><span class="line">	mv.setViewName(<span class="string">"error"</span>);       </span><br><span class="line">	<span class="keyword">return</span> mv;  </span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<h6 id="iii-、配置异常处理器"><a href="#iii-、配置异常处理器" class="headerlink" title="iii)、配置异常处理器"></a>iii)、配置异常处理器</h6><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!--配置异常处理器--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"systemExceptionResolver"</span> <span class="attr">class</span>=<span class="string">"com.zephxu.exception.SystemExceptionResolver"</span>/&gt;</span></span><br></pre></td></tr></table></figure>



<h6 id="iv-、结果"><a href="#iv-、结果" class="headerlink" title="iv)、结果"></a>iv)、结果</h6><p><img src="https://github.com/ZephXu07/IMG/raw/master/HandleExceptionResult.png" alt="HandleExceptionResult"></p>
<h2 id="part8、SpringMVC框架中的拦截器"><a href="#part8、SpringMVC框架中的拦截器" class="headerlink" title="part8、SpringMVC框架中的拦截器"></a>part8、SpringMVC框架中的拦截器</h2><h3 id="1、拦截器的概述"><a href="#1、拦截器的概述" class="headerlink" title="1、拦截器的概述"></a>1、拦截器的概述</h3><p>a)、SpringMVC框架中的拦截器用于<strong>对处理器进行预处理和后处理</strong>的技术。</p>
<p>b)、可以定义拦截器链，拦截器链就是将拦截器按着一定的顺序结成一条链，在访问被拦截的方法时，拦截器链中的拦截器会按着定义的顺序执行。</p>
<p>c)、拦截器和过滤器的功能比较类似，有区别</p>
<p> i)、过滤器是Servlet规范的一部分，任何框架都可以使用过滤器技术。</p>
<p> ii)、拦截器是SpringMVC框架独有的。</p>
<p> iii)、过滤器配置了/*，可以拦截任何资源。</p>
<p>iv)、<strong>拦截器只会对控制器中的方法进行拦截，如果访问的是jsp，html，css，image<br>或者 js是不会进行拦截的。</strong></p>
<p> v)、拦截器也是AOP思想的一种实现方式 。</p>
<p> vi)、想要自定义拦截器，需要实现HandlerInterceptor接口。</p>
<p><img src="https://github.com/ZephXu07/IMG/raw/master/Interceptor.png" alt="Interceptor"></p>
<h3 id="2、自定义拦截器步骤"><a href="#2、自定义拦截器步骤" class="headerlink" title="2、自定义拦截器步骤"></a>2、自定义拦截器步骤</h3><p>a)、创建类，实现HandlerInterceptor接口，重写需要的方法</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MyInterceptor</span> <span class="keyword">implements</span> <span class="title">HandlerInterceptor</span> </span>&#123;   </span><br><span class="line"><span class="comment">/**     </span></span><br><span class="line"><span class="comment">* 预处理，controller方法执行前     </span></span><br><span class="line"><span class="comment">* <span class="doctag">@param</span> request     </span></span><br><span class="line"><span class="comment">* <span class="doctag">@param</span> response 不放行时使用转发或者重定向可跳转某页面或怎样处理     </span></span><br><span class="line"><span class="comment">* <span class="doctag">@param</span> handler    </span></span><br><span class="line"><span class="comment">* <span class="doctag">@return</span> true：放行，执行下一个拦截器，没有则执行controller     </span></span><br><span class="line"><span class="comment">* false：不放行     </span></span><br><span class="line"><span class="comment">* <span class="doctag">@throws</span> Exception     </span></span><br><span class="line"><span class="comment">*/</span>    </span><br><span class="line">	<span class="meta">@Override</span>    </span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">preHandle</span><span class="params">(HttpServletRequest request, HttpServletResponse response, Object handler)</span> <span class="keyword">throws</span> Exception </span>&#123;   </span><br><span class="line">        System.out.println(<span class="string">"MyInterceptor执行了"</span>);    </span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">true</span>;   </span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>




<p>b)、在springmvc.xml中配置拦截器类</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!--配置拦截器--&gt;</span> </span><br><span class="line"><span class="tag">&lt;<span class="name">mvc:interceptors</span>&gt;</span>      </span><br><span class="line"><span class="tag">&lt;<span class="name">mvc:interceptor</span>&gt;</span>   </span><br><span class="line"><span class="comment">&lt;!--要拦截的具体方法，除此外不拦截--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">mvc:mapping</span> <span class="attr">path</span>=<span class="string">"/user/*"</span>/&gt;</span></span><br><span class="line"><span class="comment">&lt;!--“/**”拦截全部，其他类似--&gt;</span></span><br><span class="line"><span class="comment">&lt;!--            </span></span><br><span class="line"><span class="comment">&lt;mvc:exclude-mapping path=""/&gt;&amp;lt;!&amp;ndash;不要拦截的具体方法，除此外拦截&amp;ndash;&amp;gt;</span></span><br><span class="line"><span class="comment">--&gt;</span>           </span><br><span class="line"><span class="comment">&lt;!--配置拦截器对象--&gt;</span>     </span><br><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">class</span>=<span class="string">"com.zephxu.interceptor.MyInterceptor"</span>/&gt;</span>        </span><br><span class="line"><span class="tag">&lt;/<span class="name">mvc:interceptor</span>&gt;</span>    </span><br><span class="line"><span class="tag">&lt;/<span class="name">mvc:interceptors</span>&gt;</span></span><br></pre></td></tr></table></figure>




<p>c)、结果：</p>
<p><img src="https://github.com/ZephXu07/IMG/raw/master/InterceptorResult.png" alt="Interceptor
Result"></p>
<h3 id="3、HandlerInterceptor接口中的方法"><a href="#3、HandlerInterceptor接口中的方法" class="headerlink" title="3、HandlerInterceptor接口中的方法"></a>3、HandlerInterceptor接口中的方法</h3><p>a)、preHandle方法是controller方法执行前拦截的方法</p>
<p> i) 可以使用request或者response跳转到指定的页面 （<strong>若return<br>true，controller方法跳转的页面将不会显示</strong>）</p>
<p><code>request.getRequestDispatcher(&quot;/WEB-INF/pages/error.jsp&quot;).forward(request, response);</code></p>
<p> ii) return<br>true放行，执行下一个拦截器，如果没有拦截器，执行controller中的方法。</p>
<p> iii) return false不放行，不会执行controller中的方法。</p>
<p>b)、postHandle是controller方法执行后执行的方法，在JSP视图执行前。</p>
<p> i) 可以使用request或者response跳转到指定的页面</p>
<p> ii)<br>如果指定了跳转的页面，那么controller方法跳转的页面将不会显示。（jsp代表的java类还是会执行）</p>
<p>c) afterCompletion方法是在JSP执行后执行</p>
<ul>
<li>request或者response不能再跳转页面了</li>
</ul>
<h3 id="4、配置多个拦截器"><a href="#4、配置多个拦截器" class="headerlink" title="4、配置多个拦截器"></a>4、配置多个拦截器</h3><ul>
<li>执行顺序</li>
</ul>
<p><img src="https://github.com/ZephXu07/IMG/raw/master/InterceptorExecutionProcess.png" alt="InterceptorExecutionProcess"></p>
<ul>
<li><strong>多个拦截器是按照配置的顺序决定的。</strong></li>
</ul>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!--配置拦截器--&gt;</span>   </span><br><span class="line"><span class="tag">&lt;<span class="name">mvc:interceptors</span>&gt;</span>   </span><br><span class="line"><span class="tag">&lt;<span class="name">mvc:interceptor</span>&gt;</span>  </span><br><span class="line"><span class="comment">&lt;!--要拦截的具体方法，除此外不拦截--&gt;</span>     </span><br><span class="line"><span class="tag">&lt;<span class="name">mvc:mapping</span> <span class="attr">path</span>=<span class="string">"/user/*"</span>/&gt;</span></span><br><span class="line"><span class="comment">&lt;!--“/**”拦截全部，其他类似--&gt;</span></span><br><span class="line"><span class="comment">&lt;!--            </span></span><br><span class="line"><span class="comment">&lt;mvc:exclude-mapping path=""/&gt;&amp;lt;!&amp;ndash;不要拦截的具体方法，除此外拦截&amp;ndash;&amp;gt;--&gt;</span>           </span><br><span class="line"><span class="comment">&lt;!--配置拦截器对象--&gt;</span>        </span><br><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">class</span>=<span class="string">"com.zephxu.interceptor.MyInterceptor"</span>/&gt;</span>    </span><br><span class="line"><span class="tag">&lt;/<span class="name">mvc:interceptor</span>&gt;</span>       </span><br><span class="line"><span class="tag">&lt;<span class="name">mvc:interceptor</span>&gt;</span>    </span><br><span class="line"><span class="comment">&lt;!--要拦截的具体方法，除此外不拦截--&gt;</span>        </span><br><span class="line"><span class="tag">&lt;<span class="name">mvc:mapping</span> <span class="attr">path</span>=<span class="string">"/**"</span>/&gt;</span></span><br><span class="line"><span class="comment">&lt;!--“/**”拦截全部，其他类似--&gt;</span>   </span><br><span class="line"><span class="comment">&lt;!--            &lt;mvc:exclude-mapping path=""/&gt;&amp;lt;!&amp;ndash;不要拦截的具体方法，除此外拦截&amp;ndash;&amp;gt;--&gt;</span>       </span><br><span class="line"><span class="comment">&lt;!--配置拦截器对象--&gt;</span>     </span><br><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">class</span>=<span class="string">"com.zephxu.interceptor.MyInterceptor2"</span>/&gt;</span>     </span><br><span class="line"><span class="tag">&lt;/<span class="name">mvc:interceptor</span>&gt;</span>    </span><br><span class="line"><span class="tag">&lt;/<span class="name">mvc:interceptors</span>&gt;</span></span><br></pre></td></tr></table></figure>




<ul>
<li><p>结果：</p>
<p><img src="https://github.com/ZephXu07/IMG/raw/master/TwoInterceptors.png" alt="TwoInterceptors"></p>
</li>
</ul>
<h3 id="part9、SpringMVC暂告一段落……未完待续……"><a href="#part9、SpringMVC暂告一段落……未完待续……" class="headerlink" title="part9、SpringMVC暂告一段落……未完待续……"></a>part9、SpringMVC暂告一段落……未完待续……</h3>]]></content>
  </entry>
  <entry>
    <title>百感乱记</title>
    <url>/2020/01/24/%E7%99%BE%E6%84%9F%E4%B9%B1%E8%AE%B0/</url>
    <content><![CDATA[<h1 id="百感乱记"><a href="#百感乱记" class="headerlink" title="百感乱记 "></a>百感乱记 </h1><p>2019.10.08<br>怎么对Ta你就变得幼稚了？还是你原本也就是这么幼稚呢？算了算了，幼稚就幼稚，成熟了你可能更加冷漠、懦弱吧！</p>
<a id="more"></a>

<p>2019.10.10<br>你为什么生闷气呢？她打游戏不理你？她倒是有在游戏空隙回复你了啊！还是她没主动邀请你？还是她迷上游戏不务正业？还是她上了王者？还是陪她上王者的不是你？以前你所谓的暗恋都在另一方对你冷淡的态度中失去信心，现在呢？可能是她性格的原因，正常的都会回复，那你将怎样呢？立个flag，明天她不主动找你的话你别自作多情去骚扰人家！</p>
<p>2019.10.12<br>你还是不自觉去找她聊天了。一有什么烦心事，开心事都分享给她了。要是以后她厌倦了呢？她有男朋友了呢？不想去想啊，如你也不想去想未来的生活苦难。</p>
<p>2019.10.14<br>刚刚在下课的时候，突然有个念头，怎样自杀可以让父母得到最大的利益。想了一下没什么好的想法，且怎样自杀才是安乐死也不知道。虽然现在有点打消了，但是心情还是不好，打着打着字，怎么该死的眼眶就红了呢？</p>
<p>2019.10.19<br>不谈恋爱，b事没有；不想谈也是；没有追求，烦事没有；想一了百了啊。</p>
<p>2019.10.20 突然看哭了。</p>
<p>2019.10.21 距我发的上条信息9小时48分，距ta不回复我近24小时了。</p>
<p>2019.10.22<br>一边想不再请求她原谅，一边在想怎样才能让她不再不理我，也差不多48小时了。</p>
<p>2019.10.23 我的心情如下：</p>
<p><img src="https://github.com/ZephXu07/IMG/raw/master/choice.jpg" alt="心情"></p>
<p>2019.11.2 你为什么那么贱呢许泽帆？</p>
<p>2019.11.3 一切都是阴差阳错。</p>
<p>2020.01.24    又来了。</p>
]]></content>
      <tags>
        <tag>私人</tag>
      </tags>
  </entry>
  <entry>
    <title>动态代理笔记</title>
    <url>/2020/01/24/%E5%8A%A8%E6%80%81%E4%BB%A3%E7%90%86%E7%AC%94%E8%AE%B0/</url>
    <content><![CDATA[<h1 id="动态代理笔记"><a href="#动态代理笔记" class="headerlink" title="动态代理笔记 "></a>动态代理笔记 </h1><hr>
<p><a href="https://www.bilibili.com/video/av63885236" target="_blank" rel="noopener">学习视频</a></p>
<h2 id="part1、代理模式"><a href="#part1、代理模式" class="headerlink" title="part1、代理模式 "></a>part1、代理模式 </h2><p>23种设计模式之一；在代理模式（Proxy<br>Pattern）中，一个类代表另一个类的功能，一般用于对要访问的类做一些控制、功能增强但不影响原来类的正常业务。</p>
<ul>
<li>通过中介租房子</li>
<li>通过招聘平台找工作</li>
<li>通过婚恋平台找对象</li>
</ul>
<p>在不改变源代码下实现对目标对象功能的扩展，甚至对目标对象进行功能覆盖或重写。</p>
<a id="more"></a>

<hr>
<h2 id="part2、静态代理"><a href="#part2、静态代理" class="headerlink" title="part2、静态代理 "></a>part2、静态代理 </h2><p><img src="https://github.com/ZephXu07/IMG/raw/master/StaticProxy.png" alt="staticProxy"></p>
<p>TargetClass接口：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">TargetClass</span> </span>&#123;  </span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">sayHi</span><span class="params">()</span></span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<p>TargetClassImpl实现类：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"> <span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">TargetClassImpl</span> <span class="keyword">implements</span> <span class="title">TargetClass</span></span>&#123;         </span><br><span class="line">	<span class="meta">@Override</span>       </span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">sayHi</span><span class="params">()</span> </span>&#123;      </span><br><span class="line">		System.out.println(<span class="string">"Hi, Static Proxy."</span>);      </span><br><span class="line">	&#125;</span><br><span class="line">&#125;                 |</span><br></pre></td></tr></table></figure>



<p>ProxyClass代理类：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ProxyClass</span> <span class="keyword">implements</span> <span class="title">TargetClass</span> </span>&#123;     </span><br><span class="line">	<span class="keyword">private</span> TargetClass targetClass;  </span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="title">ProxyClass</span><span class="params">(TargetClass targetClass)</span> </span>&#123; </span><br><span class="line">		<span class="keyword">this</span>.targetClass = targetClass; </span><br><span class="line">		<span class="meta">@Override</span>       </span><br><span class="line">		<span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">sayHi</span><span class="params">()</span> </span>&#123;             </span><br><span class="line">			System.out.println(<span class="string">"方法执行前……"</span>);      </span><br><span class="line">			targetClass.sayHi();       </span><br><span class="line">			System.out.println(<span class="string">"方法执行后……"</span>);  </span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<p>Client测试类：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Client</span> </span>&#123;       </span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        <span class="comment">//不使用            </span></span><br><span class="line">        TargetClass targetClass = <span class="keyword">new</span> TargetClassImp();      </span><br><span class="line">        targetClass.sayHi(); </span><br><span class="line">        System.out.println(<span class="string">"----------分割线--------"</span>);</span><br><span class="line">        <span class="comment">//使用静态代理     </span></span><br><span class="line">        TargetClass proxyClass = <span class="keyword">new</span> ProxyClass(<span class="keyword">new</span> TargetClassImpl());         	</span><br><span class="line">        proxyClass.sayHi();</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<p>结果：</p>
<p><img src="https://github.com/ZephXu07/IMG/raw/master/StaticProxyResult.png" alt="result"></p>
<hr>
<h2 id="part3、动态代理"><a href="#part3、动态代理" class="headerlink" title="part3、动态代理"></a>part3、动态代理</h2><p>动态代理：目标接口、目标接口实现、实现InvocationHandler类</p>
<p><img src="https://github.com/ZephXu07/IMG/raw/master/DynamicProxy.png" alt="DynamicProxy"></p>
<p>目标接口、目标接口实现与上面静态代理一样。</p>
<p>ProxyClass类实现InvocationHandler类：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//该类是动态代理的一部分，不是真正的代理类，是协助真正的代理类工作去完成功能</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ProxyClass</span> <span class="keyword">implements</span> <span class="title">InvocationHandler</span> </span>&#123;    </span><br><span class="line">    <span class="keyword">private</span> Object target; </span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">ProxyClass</span><span class="params">(Object target)</span> </span>&#123;        </span><br><span class="line">    <span class="keyword">this</span>.target = target;   </span><br><span class="line">&#125;    </span><br><span class="line"><span class="comment">/**    </span></span><br><span class="line"><span class="comment">*  该方法在目标类的方法执行前会被调用     </span></span><br><span class="line"><span class="comment">* <span class="doctag">@param</span> proxy 代理类，可在debug中看到，详情看下图     </span></span><br><span class="line"><span class="comment">* <span class="doctag">@param</span> method sayHi()方法    </span></span><br><span class="line"><span class="comment">* <span class="doctag">@param</span> args sayHi()方法参数    </span></span><br><span class="line"><span class="comment">* <span class="doctag">@return</span>    </span></span><br><span class="line"><span class="comment">* <span class="doctag">@throws</span> Throwable     </span></span><br><span class="line"><span class="comment">*/</span>    </span><br><span class="line"><span class="meta">@Override</span>    </span><br><span class="line"><span class="function"><span class="keyword">public</span> Object <span class="title">invoke</span><span class="params">(Object proxy, Method method, Object[] args)</span> <span class="keyword">throws</span> Throwable </span>&#123;        </span><br><span class="line">        System.out.println(<span class="string">"目标方法执行前……"</span>);       </span><br><span class="line">        <span class="comment">//此代码是真正的调用方法 </span></span><br><span class="line">        Object returnResult = method.invoke(target, args);   </span><br><span class="line">        System.out.println(<span class="string">"目标方法执行后……"</span>); </span><br><span class="line">        <span class="keyword">return</span> returnResult;   </span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<p><img src="https://github.com/ZephXu07/IMG/raw/master/RealProxyClassInDebug.png" alt="RealProxy"></p>
<p>Client测试类：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Client</span> </span>&#123;    </span><br><span class="line">    <span class="function"><span class="keyword">public</span>  <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;        <span class="comment">//不使用代理模式        TargetClass targetClass = new TargetClassImpl(); </span></span><br><span class="line">        targetClass.sayHi();       </span><br><span class="line">        System.out.println(<span class="string">"----------分割线--------"</span>);       </span><br><span class="line">        <span class="comment">//使用动态代理模式        </span></span><br><span class="line">        TargetClass proxyClass = (TargetClass) Proxy.newProxyInstance(TargetClass.class.getClassLoader(),new Class[]&#123;TargetClass.class&#125;, newProxyClass(new TargetClassImpl()));</span><br><span class="line">        proxyClass.sayHi();   </span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<p>结果：</p>
<p><img src="https://github.com/ZephXu07/IMG/raw/master/DynamicProxyResult.png" alt="DynamicProxyResult"></p>
<p>JDK动态代理主要涉及两个类：java.lang.reflect.Proxy 和<br>java.lang.reflect.InvocationHandler</p>
<p>编写一个调用逻辑处理器 ProxyClass 类，提供日志增强功能，并实现<br>InvocationHandler 接口；在 ProxyClass<br>中维护一个目标对象，这个对象是被代理的对象（真实主题角色）；在 invoke<br>方法中编写方法调用的逻辑处理。</p>
<p>他人更加详细的客户端解析，如下，且以下部分解析同样来自<a href="https://blog.csdn.net/wwwdc1012/article/details/85153602" target="_blank" rel="noopener">来源</a></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"> <span class="keyword">import</span> proxy.UserService;i</span><br><span class="line"> mport  proxy.UserServiceImpl;</span><br><span class="line"> <span class="keyword">import</span> java.lang.reflect.InvocationHandler;</span><br><span class="line"> <span class="keyword">import</span> java.lang.reflect.Proxy;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Client2</span> </span>&#123;    </span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> IllegalAccessException, InstantiationException </span>&#123; </span><br><span class="line"> <span class="comment">// 设置变量可以保存动态代理类，默认名称以 $Proxy0 格式命名      </span></span><br><span class="line"> 				System.getProperties().setProperty(<span class="string">"sun.misc.ProxyGenerator.saveGeneratedFiles"</span>, <span class="string">"true"</span>); </span><br><span class="line"> 		<span class="comment">// 1. 创建被代理的对象，UserService接口的实现类    </span></span><br><span class="line"> 		UserServiceImpl userServiceImpl = <span class="keyword">new</span> UserServiceImpl();  </span><br><span class="line"> 		<span class="comment">// 2. 获取对应的 ClassLoader    </span></span><br><span class="line">         ClassLoader classLoader = userServiceImpl.getClass().getClassLoader();  </span><br><span class="line">        <span class="comment">// 3. 获取所有接口的Class，这里的UserServiceImpl只实现了一个接口UserService，        </span></span><br><span class="line">        Class[] interfaces = userServiceImpl.getClass().getInterfaces(); </span><br><span class="line">        <span class="comment">//  4. 创建一个将传给代理类的调用请求处理器，处理所有的代理对象上的方法调用      </span></span><br><span class="line">        <span class="comment">//     这里创建的是一个自定义的日志处理器，须传入实际的执行对象 userServiceImpl        </span></span><br><span class="line">        InvocationHandler logHandler = <span class="keyword">new</span> LogHandler(userServiceImpl);</span><br><span class="line">        <span class="comment">/*    5.根据上面提供的信息，创建代理对象 在这个过程中，</span></span><br><span class="line"><span class="comment">        a.JDK会通过根据传入的参数信息动态地在内存中创建和.class 文件等同的字节码               b.然后根据相应的字节码转换成对应的class，</span></span><br><span class="line"><span class="comment">        c. 然后调用newInstance()创建代理实例        </span></span><br><span class="line"><span class="comment">        */</span>   </span><br><span class="line">        UserService proxy = (UserServic e) Proxy.newProxyInstance(classLoader, interfaces, logHandler);       </span><br><span class="line">        <span class="comment">// 调用代理的方法  </span></span><br><span class="line">        proxy.select();    </span><br><span class="line">        proxy.update();                </span><br><span class="line">        <span class="comment">// 保存JDK动态代理生成的代理类，类名保存为 UserServiceProxy    </span></span><br><span class="line">        <span class="comment">// </span></span><br><span class="line">        ProxyUtils.generateClassFile(userServiceImpl.getClass(),<span class="string">"UserServiceProxy"</span>);    		&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<p>java.lang.reflect.InvocationHandler</p>
<p>Object invoke(Object proxy, Method method, Object[] args)<br>定义了代理对象调用方法时希望执行的动作，用于集中处理在动态代理类对象上的方法调用</p>
<p>java.lang.reflect.Proxy</p>
<p>static Object newProxyInstance(ClassLoader loader, Class&lt;?&gt;[]<br>interfaces, InvocationHandler h)<br>构造实现指定接口的代理类的一个新实例，所有方法会调用给定处理器对象的<br>invoke 方法</p>
<p>流程图：</p>
<p><img src="https://github.com/ZephXu07/IMG/raw/master/20181221125036786.png" alt="流程图"></p>
<h2 id="part4、手动实现基础动态代理"><a href="#part4、手动实现基础动态代理" class="headerlink" title="part4、手动实现基础动态代理 "></a>part4、手动实现基础动态代理 </h2><p>结构：</p>
<p><img src="https://github.com/ZephXu07/IMG/raw/master/zephxu-Snipaste_2019-10-03_23-18-00.png" alt="结构"></p>
<p>TargetClass接口，TargetClassImpl实现类不变，上两部分的ProxyClass类改名为MyJavaInvocationHandler类且实现了自定义的MyInvocationHandler接口。</p>
<p>Client客户端只是把jdk提供的类和方法改为自定义的类和方法。</p>
<p><img src="https://github.com/ZephXu07/IMG/raw/master/Clinet.png" alt="Client"></p>
<p>自定义加载器：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"> <span class="comment">/** </span></span><br><span class="line"><span class="comment"> * bootstrapClassLoader     jdk/jre/目录下的jar包加载</span></span><br><span class="line"><span class="comment"> * extClassLoader   jdk/ext/目录下的jar包加载 </span></span><br><span class="line"><span class="comment"> * AppClassLoader 我们应用的ClassLoader </span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span>  <span class="title">MyClassLoader</span> <span class="keyword">extends</span> <span class="title">ClassLoader</span> </span>&#123;</span><br><span class="line">	<span class="keyword">private</span> File classFile;<span class="comment">//MyClassLoader.class文件位置的文件  </span></span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="title">MyClassLoader</span><span class="params">()</span> </span>&#123;       </span><br><span class="line">		String classPath = MyClassLoader.class.getResource("").getPath();        	</span><br><span class="line">        <span class="keyword">this</span>.classFile = <span class="keyword">new</span> File(classPath);</span><br><span class="line">		<span class="comment">//初始化    </span></span><br><span class="line">	&#125;   </span><br><span class="line">    <span class="comment">//重写此方法改为自定义生成的.class文件   </span></span><br><span class="line">	<span class="meta">@Override</span>   </span><br><span class="line">        protected Class&lt;?&gt; findClass(String name) throws ClassNotFoundException&#123;        String className = MyClassLoader.class.getPackage().getName()+ "." + name;//.class字节码文件的名字   </span><br><span class="line">        <span class="keyword">if</span> (<span class="keyword">null</span> != classFile) &#123;    </span><br><span class="line">            File file = <span class="keyword">new</span> File(classFile + <span class="string">"\\"</span> + name.replaceAll(<span class="string">"\\."</span>, <span class="string">"/"</span>) + <span class="string">" .class"</span>);<span class="comment">//MyClassLoader.class文件位置的文件存在         </span></span><br><span class="line">            <span class="keyword">if</span> (file.exists()) &#123;<span class="comment">//.class字节码文件存在            </span></span><br><span class="line">                FileInputStream fis = <span class="keyword">null</span>;                </span><br><span class="line">                ByteArrayOutputStream baos = <span class="keyword">null</span>;  </span><br><span class="line">                <span class="keyword">try</span> &#123;                </span><br><span class="line">                    fis = <span class="keyword">new</span> FileInputStream(file);</span><br><span class="line">                    <span class="keyword">byte</span>[] bytes = <span class="keyword">new</span> <span class="keyword">byte</span>[<span class="number">1024</span> * <span class="number">4</span>];       </span><br><span class="line">                    baos = <span class="keyword">new</span> ByteArrayOutputStream();           </span><br><span class="line">                    <span class="keyword">int</span> len;       </span><br><span class="line">                    <span class="keyword">while</span> ((len = fis.read(bytes)) != -<span class="number">1</span>) &#123;     </span><br><span class="line">                    baos.write(bytes, <span class="number">0</span>, len);    </span><br><span class="line">                &#125;<span class="comment">//以上为从.class文件读出输入流</span></span><br><span class="line">                <span class="keyword">return</span> defineClass(className, baos.toByteArray(), <span class="number">0</span>, baos.size());<span class="comment">//此方法返回.class对象，是自定义的代理类</span></span><br><span class="line">            &#125; <span class="keyword">catch</span> (Exception e ) &#123;                   </span><br><span class="line">                e.printStackTrace();            </span><br><span class="line">            &#125; <span class="keyword">finally</span> &#123; </span><br><span class="line">                <span class="keyword">if</span> (<span class="keyword">null</span> != baos) &#123;                   </span><br><span class="line">                    <span class="keyword">try</span> &#123;     </span><br><span class="line">                        baos.close(); </span><br><span class="line">                    &#125; <span class="keyword">catch</span> (IOException e) &#123;  </span><br><span class="line">                        e.printStackTrace(); </span><br><span class="line">                    &#125;               </span><br><span class="line">                &#125;   </span><br><span class="line">            <span class="keyword">if</span> (<span class="keyword">null</span> != fis) &#123;</span><br><span class="line">                <span class="keyword">try</span> &#123;       </span><br><span class="line">                    fis.close();   </span><br><span class="line">                &#125; <span class="keyword">catch</span> (IOException e) &#123;   </span><br><span class="line">                    e.printStackTrace();      </span><br><span class="line">                &#125;                   </span><br><span class="line">            &#125;   </span><br><span class="line">        &#125;         </span><br><span class="line">	&#125;   </span><br><span class="line">&#125; </span><br><span class="line">                                                                                <span class="keyword">return</span> <span class="keyword">null</span>;   </span><br><span class="line">                                                                               &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<p>自定义MyProxy类来代替jdk提供的Proxy类：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MyProxy</span> </span>&#123;    </span><br><span class="line">privat e <span class="keyword">static</span> <span class="keyword">final</span> String Ln = <span class="string">"\r\n"</span>;<span class="comment">//自定义换行符  </span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> Object <span class="title">newProxyInstance</span><span class="params">(MyClassLoader loader, Class&lt;?&gt;[] interfaces,  MyJavaInvocationHandler h)</span> </span>&#123;      </span><br><span class="line"><span class="keyword">try</span> &#123; </span><br><span class="line"><span class="comment">//1、动态生成一个.java的源文件  </span></span><br><span class="line">String code = generateCode(interfaces);  </span><br><span class="line"><span class="comment">//2、把.java源文件保存在磁盘中          </span></span><br><span class="line">String filePath = MyJavaInvocationHandler.class.getResource("").getPath();            //写在磁盘而不是内存：只是源码，不是.java文件,jdk的编译器编译为.class文件需要.java文件而不是字符串           </span><br><span class="line">File file = <span class="keyword">new</span> File(filePath + <span class="string">"$Proxy0.java"</span>);    </span><br><span class="line">FileWriter writer = <span class="keyword">new</span> FileWriter(file); </span><br><span class="line">writer.write(code);            </span><br><span class="line">writer.flush();            </span><br><span class="line">writer.close();<span class="comment">//不规范写法     </span></span><br><span class="line"><span class="comment">//3、把生成的.java文件编译成.class文件    </span></span><br><span class="line"><span class="comment">//1)创建一个java编译器对象            </span></span><br><span class="line">JavaCompiler compiler = ToolProvider.getSystemJavaCompiler();                <span class="comment">//2）获得java源代码文件管理器     </span></span><br><span class="line">StandardJavaFileManager fileManager = compiler.getStandardFileManager(<span class="keyword">null</span>, <span class="keyword">null</span>, <span class="keyword">null</span>);   </span><br><span class="line"><span class="comment">//3）获得java源文件的迭代器对象  </span></span><br><span class="line">Iterable iterable = fileManager.getJavaFileObjects(file);</span><br><span class="line"><span class="comment">//4）获得编译任务           </span></span><br><span class="line">JavaCompiler.CompilationTask compilationTask = compiler.getTask(<span class="keyword">null</span>, fileMa nager,<span class="keyword">null</span>, <span class="keyword">null</span>, <span class="keyword">null</span>,iterable) ;      </span><br><span class="line"><span class="comment">//5）执行编译    </span></span><br><span class="line">compilationTask.call();  </span><br><span class="line"><span class="comment">//5）关闭文件管理器    </span></span><br><span class="line">fileManager.close();   </span><br><span class="line"><span class="comment">//4、把编译后的.class文件加载到jvm内存中    </span></span><br><span class="line">Class clazz = loader.findClass(<span class="string">"$Proxy0"</span>);  </span><br><span class="line"><span class="comment">//5、根据加载到JVM的.class字节码文件生成Class类，然后创建Class类的对象            Constructor constructor = clazz.getConstructor(MyJavaInvocationHandler.class);  </span></span><br><span class="line"><span class="keyword">return</span> constructor.newInstance(h);   </span><br><span class="line">&#125; <span class="keyword">catch</span> (Exception e) &#123;   </span><br><span class="line">e.printStackTrace();</span><br><span class="line">&#125;       </span><br><span class="line"><span class="keyword">return</span> <span class="keyword">null</span>;    </span><br><span class="line">&#125;  </span><br><span class="line"><span class="comment">//人工手动写出的代理类，其在jdk提供的动态代理中不存在硬盘上，只在内存中存在   </span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> String <span class="title">generateCode</span> <span class="params">(Class&lt;?&gt;[] interfaces)</span> </span>&#123; </span><br><span class="line">StringBuffer sb = <span class="keyword">new</span> StringBuffer();    </span><br><span class="line">sb.append(<span class="string">"package com.zephxu.service.proxy.myproxy;"</span> + Ln);        sb.append(<span class="string">"import java.lang.reflect.Method;"</span> + Ln);  </span><br><span class="line">sb.append(<span class="string">"public class $Proxy0 implements "</span>).append(interfaces[<span class="number">0</span>].getName()).append(<span class="string">"&#123;"</span>).append(Ln);</span><br><span class="line">sb.append(<span class="string">"public MyJavaInvocationHandler h;"</span> + Ln);   </span><br><span class="line">sb.append(<span class="string">"public $Proxy0 (MyJavaInvocationHandlerh) &#123; "</span> + Ln);        sb.append(<span class="string">"this.h = h;"</span> + Ln);  </span><br><span class="line">sb.append(<span class="string">"  &#125;"</span> + Ln);    </span><br><span class="line"><span class="keyword">for</span> (Method m : interfaces[<span class="number">0</span>].getMethods()) &#123; </span><br><span class="line">sb.append(<span class="string">"public "</span>).append(m.getReturnType().getName()).append(<span class="string">" "</span>).<span class="function">a <span class="title">ppend</span><span class="params">(m.getName()</span>).<span class="title">append</span><span class="params">(<span class="string">"()&#123;"</span>)</span>.<span class="title">append</span><span class="params">(Ln)</span></span>;  </span><br><span class="line">sb.append(<span class="string">"try &#123;"</span> + Ln);           </span><br><span class="line">sb.append(<span class="string">"Metho d m = "</span> + interfaces[<span class="number">0</span>].getName() + </span><br><span class="line"><span class="string">".class.getMethod(\""</span> + m.getName() + <span class="string">"\", new Class[]&#123;&#125;);"</span> + Ln); </span><br><span class="line">sb.append(<span class="string">"this.h.invoke(this, end("</span>&#125; <span class="keyword">catch</span>(Throwable e)&#123;<span class="string">" + Ln);  </span></span><br><span class="line"><span class="string">sb.append("</span>e.printStackTrace();<span class="string">" + Ln); </span></span><br><span class="line"><span class="string">sb.append("</span> &#125;<span class="string">" + Ln);            </span></span><br><span class="line"><span class="string">sb.append("</span>&#125;<span class="string">" + Ln);      </span></span><br><span class="line"><span class="string">&#125;       </span></span><br><span class="line"><span class="string">sb.append("</span>&#125;<span class="string">"  + Ln);    </span></span><br><span class="line"><span class="string">return sb.toString(); </span></span><br><span class="line"><span class="string">&#125;</span></span><br><span class="line"><span class="string">&#125;                                |</span></span><br></pre></td></tr></table></figure>



<h2 id="part5、能力有限，动态代理初步理解不深，日后再补充……"><a href="#part5、能力有限，动态代理初步理解不深，日后再补充……" class="headerlink" title="part5、能力有限，动态代理初步理解不深，日后再补充……"></a>part5、能力有限，动态代理初步理解不深，日后再补充……</h2>]]></content>
      <tags>
        <tag>笔记</tag>
        <tag>java</tag>
      </tags>
  </entry>
  <entry>
    <title>Spring-Learning-Notes</title>
    <url>/2020/01/23/Spring-Learning-Notes/</url>
    <content><![CDATA[<p>Spring Learning Notes</p>
<p>Spring个人学习笔记(<a href="#advice">建议</a>) </p>
<h2 id="part1-初识"><a href="#part1-初识" class="headerlink" title="part1 初识"></a>part1 初识</h2><h3 id="what"><a href="#what" class="headerlink" title="what"></a>what</h3><p> 大管家Spring是于2003 年兴起的一个轻量级的Java 开源框架，它由Rod<br>Johnson创建。传统J2EE应用的开发效率低，Spring作为开源的中间件，提供J2EE应用的各层的解决方案，Spring贯穿了表现层、业务层及持久层，而不是仅仅专注于某一层的方案。可以说Spring是企业应用开发的“一站式（full-stack）”选择。然而，Spring并不想取代那些已有的框架，而是与它们无缝地整合。</p>
<p>简单来说，Spring是一个轻量级<strong>控制反转</strong>(IoC)和<strong>面向切面</strong>(AOP)的<strong>容器</strong>框架。</p>
<a id="more"></a>

<h3 id="why"><a href="#why" class="headerlink" title="why"></a>why</h3><p><strong>1、</strong> <strong>方便解耦，简化开发</strong></p>
<p>通过Spring提供的IoC容器，我们可以将对象之间的依赖关系交由Spring进行控制，避免硬编码所造成的过度程序耦合。有了Spring，用户不必再为单实例模式类、属性文件解析等这些很底层的需求编写代码，可以更专注于上层的应用。</p>
<p><strong>2、</strong> <strong>AOP编程的支持</strong></p>
<p>通过Spring提供的AOP功能，方便进行面向切面的编程，许多不容易用传统OOP实现的功能可以通过AOP轻松应付。</p>
<p><strong>3、</strong> <strong>声明式事务的支持</strong></p>
<p>在Spring中，我们可以从单调烦闷的事务管理代码中解脱出来，通过声明式方式灵活地进行事务的管理，提高开发效率和质量。</p>
<p><strong>4、</strong> <strong>方便程序的测试</strong></p>
<p>可以用非容器依赖的编程方式进行几乎所有的测试工作，在Spring里，测试不再是昂贵的操作，而是随手可做的事情。例如：Spring对Junit4支持，可以通过注解方便的测试Spring程序。</p>
<p><strong>5、</strong> <strong>方便集成各种优秀框架</strong></p>
<p>Spring不排斥各种优秀的开源框架，相反，Spring可以降低各种框架的使用难度，Spring提供了对各种优秀框架（如Struts、Hibernate、MyBatis<br>、Hessian、Quartz）等的直接支持。</p>
<p><strong>6、</strong> <strong>降低Java EE API的使用难度</strong></p>
<p>Spring对很多难用的Java EE<br>API（如JDBC，JavaMail，远程调用等）提供了一个薄薄的封装层，通过Spring的简易封装，这些Java<br>EE API的使用难度大为降低。</p>
<h3 id="learn-what"><a href="#learn-what" class="headerlink" title="learn what"></a>learn what</h3><p>1、 了解Spring框架、IOC、DI的概念；</p>
<p>2、 掌握Spring框架搭建、配置与使用；</p>
<p>3、 掌握Spring容器创建与对象管理；</p>
<p>4、 掌握Spring xml配置式开发与注解开发；</p>
<p>5、 掌握Spring AOP相关知识；</p>
<p>6、 掌握SpringJDBC相关知识；</p>
<p>7、 将Spring集成项目中进行测试；</p>
<p>以上三个段为截取他人文档–&gt;</p>
<p><a href="http://www.sikiedu.com/my/course/267" target="_blank" rel="noopener">siki</a></p>
<h2 id="part2-Spring框架介绍与入门案例"><a href="#part2-Spring框架介绍与入门案例" class="headerlink" title="part2 Spring框架介绍与入门案例"></a>part2 Spring框架介绍与入门案例</h2><p><img src="https://github.com/ZephXu07/IMG/raw/master/Spring.png" alt="Spring"></p>
<h3 id="1、-搭建Spring-HelloWorld项目"><a href="#1、-搭建Spring-HelloWorld项目" class="headerlink" title="1、 搭建Spring HelloWorld项目"></a>1、 搭建Spring HelloWorld项目</h3><p>a)<br><a href="http://repo.spring.io/release/org/springframework/spring/" target="_blank" rel="noopener">Spring下载地址</a></p>
<p>b) 导包：（以下5个包称为基本包）</p>
<p> i. 核心包：bean、context、core、expression；</p>
<p> ii. 日志包：apache.commons.logging</p>
<p> <strong>！！！maven项目中在pom.xml文件中加入dependency</strong></p>
<p>c) 引入约束：bean约束和引入主配置文件头；</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line">  <span class="meta">&lt;?xml version="1.0" encoding="UTF-8"?&gt;</span></span><br><span class="line">  	<span class="tag">&lt;<span class="name">beans</span> <span class="attr">xmlns:xsi</span>=<span class="string">"http://www.w3.org/2001/XMLSchema-instance"</span> <span class="attr">xmlns</span>=<span class="string">"http://www.springframework.org/schema/beans"</span> <span class="attr">xsi:schemaLocation</span>=<span class="string">"http://www.springframework.org/schema/beans       http://www.springframework.org/schema/beans/spring-beans.xsd "</span>&gt;</span>   </span><br><span class="line"><span class="tag">&lt;/<span class="name">beans</span>&gt;</span>             |</span><br></pre></td></tr></table></figure>



<ul>
<li><p><strong>BUG：org.springframework.beans.factory.xml.XmlBeanDefinitionStoreException:<br>Line 3 in XML document from class path resource<br>[applicationContext.xml] is invalid; nested exception is<br>org.xml.sax.SAXParseException; lineNumber: 3; columnNumber: 59;<br>已经为元素 “beans” 指定属性 “xmlns”。</strong></p>
</li>
<li><p><strong>配置文件写错！</strong></p>
</li>
</ul>
<p><img src="https://github.com/ZephXu07/IMG/raw/master/BUG%E4%BF%AE%E6%94%B9.png" alt="bugRepaired"></p>
<p>d) 测试：将自定义对象由自己创建交由Spring管理；</p>
<ul>
<li><p>项目结构：</p>
<p><img src="https://github.com/ZephXu07/IMG/raw/master/SpringProjectStructure.png" alt="项目结构"></p>
</li>
<li><p>没使用Spring之前：自己new</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Test</span>    </span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">Test</span><span class="params">()</span> </span>&#123;</span><br><span class="line">	User u = <span class="keyword">new</span> User();        </span><br><span class="line">	System.out.println(u);    </span><br><span class="line">&#125;             |</span><br></pre></td></tr></table></figure>
</li>
<li><p>使用Spring容器：spring帮忙管理对象</p>
<ul>
<li><p>配置：<code>&lt;bean name=&quot;user&quot; class=&quot;com.zephxu.bean.User&quot;/&gt;</code></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">Test2</span><span class="params">()</span> </span>&#123;    <span class="comment">//根据spring配置文件获取容器对象    </span></span><br><span class="line">	ApplicationContext ac = <span class="keyword">new</span> ClassPathXmlApplicationContext(<span class="string">"applicationContext.xml"</span>);<span class="comment">//从spring容器中使用getBean取对象   </span></span><br><span class="line">    User user1 = (User) ac.getBean(<span class="string">"user"</span>);</span><br><span class="line">    User user2 = ac.getBean(User<span class="class">.<span class="keyword">class</span>)</span>;    </span><br><span class="line">    System.out.println(user1 + <span class="string">"\n"</span> + user2);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



</li>
</ul>
</li>
</ul>
<h3 id="2、Spring-IoC-DI概念介绍：（要实现IOC依赖DI的支持）"><a href="#2、Spring-IoC-DI概念介绍：（要实现IOC依赖DI的支持）" class="headerlink" title="2、Spring-IoC | DI概念介绍：（要实现IOC依赖DI的支持）"></a>2、Spring-IoC | DI概念介绍：（要实现IOC依赖DI的支持）</h3><p><strong>IoC（Inversion of Control）：编程思想，新的设计模式。</strong></p>
<ul>
<li>反转控制：将我们自己创建对象的工作交给Spring容器帮我们完成；</li>
<li>反转：创建对象这份工作由我们自己执行反转给Spring帮我们执行。</li>
<li>控制：由Spring负责创建销毁对象，掌控对象的生命周期等，需要使用时向Spring申请即可。</li>
</ul>
<p><strong>DI（Dependency<br>Injection）：依赖注入：将值通过配置的方式为变量初始化/赋值(注入)</strong></p>
<p>c) 注入方式：set方法注入、构造注入、字段注入(不推荐)；</p>
<p>d) 注入类型：</p>
<p> i. 值类型(value) – 八大基本数据类型；</p>
<p> ii. 引用类型(ref) – String、自定义对象；</p>
<p><code>&lt;property name=&quot;u_id&quot; value=&quot;7&quot;/&gt;</code></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">User user1 = (User) ac.getBean(<span class="string">"user"</span>);</span><br><span class="line">User user2 = ac.getBean(User<span class="class">.<span class="keyword">class</span>)</span>;</span><br><span class="line">System.out.println(user1 + <span class="string">"\n"</span> + user2);</span><br><span class="line">System.out.println(user1 == user2);</span><br></pre></td></tr></table></figure>

<p><strong>结果如下，原因未知……</strong></p>
<p><img src="https://github.com/ZephXu07/IMG/raw/master/zephxu-Snipaste_2019-09-28_16-29-59.png" alt="未知原因"></p>
<p><strong>原因：</strong><a href="#锚1">Scope属性singleton单例</a></p>
<h2 id="part3-Spring配置"><a href="#part3-Spring配置" class="headerlink" title="part3 Spring配置 "></a>part3 Spring配置 </h2><h3 id="1、XML配置"><a href="#1、XML配置" class="headerlink" title="1、XML配置"></a>1、XML配置</h3><p> a) Bean元素：交由Spring管理的对象都要配置在bean标签中；</p>
<p> i. Bean标签介绍和创建方式：<strong>空参构造（常用）</strong>、静态工厂、动态工厂；</p>
<p> （1）标签介绍：</p>
<p>一、name：起一个名字，通过其来利用容器获取对象；可以使用特殊字符；可以重复但不推荐。</p>
<p> 二、id：与name作用基本相似，但不推荐使用；不支持特殊字符；不能重复。</p>
<p> 三、class：被管理的对象的全包名，Spring通过此包名来创建对象。</p>
<p> （2）空参构造：默认，若没有空参方法会报错。</p>
<p> 一、<code>public  User() {    System.out.println(&quot;User空参构造方法&quot;);}</code></p>
<p><img src="https://github.com/ZephXu07/IMG/raw/master/zephxu-Snipaste_2019-09-28_16-53-26.png" alt="."></p>
<p>二、ApplicationContext配置的所有bean对象都会在容器被创建的时候创建出来，如果配置的bean较多，在创建容器的时候会产生内存过大问题，在硬件性能落后体现明显。</p>
<p> <strong>Spring提供开关解决问题：延迟加载</strong></p>
<p><img src="https://github.com/ZephXu07/IMG/raw/master/zephxu-Snipaste_2019-09-28_17-04-17.png" alt="延迟加载"></p>
<p> ii. Scope属性介绍：singleton、protoptype、request、session；</p>
<ul>
<li><p>上面bug原因：singleton单例，为默认，只创建单个对象，一般项目<br><img src="https://github.com/ZephXu07/IMG/raw/master/zephxu-Snipaste_2019-09-28_21-22-24.png" alt="singleton"></p>
</li>
<li><p>prototype，多例，相对singleton而言，在获取的时候创建新的对象，特殊项目</p>
</li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">User user1 = (User) ac.getBean(<span class="string">"user"</span>);</span><br><span class="line">User user2 = ac.getBean(User<span class="class">.<span class="keyword">class</span>)</span>;</span><br><span class="line">System.out.println(user1 + <span class="string">"\n"</span> + user2);</span><br><span class="line">System.out.println(user1 == user2);</span><br></pre></td></tr></table></figure>



<p><img src="https://github.com/ZephXu07/IMG/raw/master/zephxu-Snipaste_2019-09-28_21-29-03.png" alt="prototype"></p>
<ul>
<li><p>request：在web环境下，如果scope属性为request，那么这个对象的生命周期与request请求一致。</p>
</li>
<li><p>session：同理。</p>
<p>iii. 项目有需求时在标签中有初始化方法init-method和<br>销毁方法destroy-method；</p>
<ul>
<li><code>init-method=&quot;userInit&quot; destroy-method=&quot;userDestroy&quot;</code></li>
<li><strong>容器关闭后激活destroy方法，当scope配置不是singleton而是prototype时，销毁方法不会被调用。</strong></li>
<li><strong>init方法在容器创建Bean对象之后立即调用，destroy方法在容器销毁对象之前调用的，而使用prototype的话对象是由用户管理的。</strong></li>
</ul>
<p>b) 属性注入：</p>
<p>i. Set方法注入：<strong>bean对象中需要有对应的set方法！</strong></p>
</li>
</ul>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!--将user对象交给Spring管理并注入值类型--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">name</span>=<span class="string">"user"</span> <span class="attr">class</span>=<span class="string">"com.zephxu.bean.User"</span>&gt;</span>    </span><br><span class="line">	<span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"u_id"</span> <span class="attr">value</span>=<span class="string">"999"</span>/&gt;</span> </span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"u_username"</span> <span class="attr">value</span>=<span class="string">"黄源钦"</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"u_password"</span> <span class="attr">value</span>=<span class="string">"511"</span>/&gt;</span>    </span><br><span class="line">    <span class="comment">&lt;!--引用类型注入方式--&gt;</span>    </span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"u_pet"</span> <span class="attr">ref</span>=<span class="string">"cat"</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!--注入引用类型使用ref，注入值类型使用value--&gt;</span></span><br><span class="line"><span class="comment">&lt;!--注入引用类型--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">name</span>=<span class="string">"cat"</span> <span class="attr">class</span>=<span class="string">"com.zephxu.bean.Pet"</span>&gt;</span>        </span><br><span class="line">	<span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"petType"</span> <span class="attr">value</span>=<span class="string">"狸花猫"</span>/&gt;</span>        </span><br><span class="line">	<span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"color"</span> <span class="attr">value</span>=<span class="string">"黑白相间"</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">bean</span>&gt;</span>    |</span><br></pre></td></tr></table></figure>

<p> ii. 构造函数注入；</p>
<p>bean对象中：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="title">User</span><span class="params">(String u_username, Pet u_pet)</span> </span>&#123;   </span><br><span class="line">	System.out.println(<span class="string">"方法1：String, Pet"</span>);    </span><br><span class="line">	<span class="keyword">this</span>.u_username = u_username;    </span><br><span class="line">	<span class="keyword">this</span>.u_pet = u_pet;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>配置xml文件中：java</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!--构造方法注入--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">name</span>=<span class="string">"user1"</span> <span class="attr">class</span>=<span class="string">"com.zephxu.bean.User"</span>&gt;</span>   </span><br><span class="line">    <span class="comment">&lt;!--name为调用构造器中的参数名--&gt;</span>    </span><br><span class="line">    <span class="tag">&lt;<span class="name">constructor-arg</span> <span class="attr">name</span>=<span class="string">"u_username"</span> <span class="attr">value</span>=<span class="string">"咸鱼"</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">constructor-arg</span> <span class="attr">name</span>=<span class="string">"u_pet"</span> <span class="attr">ref</span>=<span class="string">"cat"</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br></pre></td></tr></table></figure>



<p><strong>调用时需要使用使用xml文件中配置的特定的bean对象的name而不是使用User.class。（下面BUG的原因之一）</strong></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">Test2</span><span class="params">()</span> </span>&#123;    </span><br><span class="line">	ApplicationContext ac = <span class="keyword">new</span> ClassPathXmlApplicationContext(<span class="string">"applicationContextInjection.xml"</span>);</span><br><span class="line">    User user = (User)ac.getBean(<span class="string">"user1"</span>);<span class="comment">//！此处需要注意！    </span></span><br><span class="line">    System.out.println(user);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<p><strong>注意：当有参构造器有多个时，如下：</strong></p>
<p>bean对象：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="title">User</span><span class="params">(String u_username, Pet u_pet)</span> </span>&#123;        </span><br><span class="line">    System.out.println(<span class="string">"方法1：String, Pet"</span>);        </span><br><span class="line">    <span class="keyword">this</span>.u_username = u_username;        </span><br><span class="line">    <span class="keyword">this</span>.u_pet = u_pet;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="title">User</span><span class="params">(Integer u_username, Pet u_pet)</span> </span>&#123;  </span><br><span class="line">    System.out.println(<span class="string">"方法2：Integer, Pet"</span>);  </span><br><span class="line">    <span class="keyword">this</span>.u_username = u_username.toString(); </span><br><span class="line">    <span class="keyword">this</span>.u_pet = u_pet;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="title">User</span><span class="params">(Pet u_pet, Integer u_username)</span> </span>&#123;   </span><br><span class="line">    System.out.println(<span class="string">"方法3：Pet, Integer"</span>);</span><br><span class="line">    <span class="keyword">this</span>.u_username = u_username.toString(); </span><br><span class="line">    <span class="keyword">this</span>.u_pet = u_pet;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<p>xml文件：</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">name</span>=<span class="string">"user1"</span> <span class="attr">class</span>=<span class="string">"com.zephxu.bean.User"</span>&gt;</span>    </span><br><span class="line"><span class="comment">&lt;!--type可以指定参数类型，index可以指定参数的位置，以0下标开始，使用这两个属性来调用想要的 构造器--&gt;</span>    </span><br><span class="line"><span class="tag">&lt;<span class="name">constructor-arg</span> <span class="attr">name</span>=<span class="string">"u_username"</span> <span class="attr">value</span>=<span class="string">"777"</span> <span class="attr">type</span>=<span class="string">"java.lang.Integer"</span> <span class="attr">index</span>=<span class="string">"1"</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">constructor-arg</span> <span class="attr">name</span>=<span class="string">"u_pet"</span> <span class="attr">ref</span>=<span class="string">"cat"</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br></pre></td></tr></table></figure>



<p> iii. 复杂类型注入：Array、List、Set、Map、Properties</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!--复杂类型的注入--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">name</span>=<span class="string">"collection"</span> <span class="attr">class</span>=<span class="string">"com.zephxu.bean.MyCollection"</span>&gt;</span>    </span><br><span class="line">    <span class="comment">&lt;!--array--&gt;</span>    </span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"array"</span>&gt;</span>        </span><br><span class="line">        <span class="tag">&lt;<span class="name">array</span>&gt;</span><span class="comment">&lt;!--数组类型特有的标签，注入对象--&gt;</span>          </span><br><span class="line">            <span class="tag">&lt;<span class="name">value</span>&gt;</span>phy<span class="tag">&lt;/<span class="name">value</span>&gt;</span>            </span><br><span class="line">            <span class="tag">&lt;<span class="name">value</span>&gt;</span>xzf<span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">ref</span> <span class="attr">bean</span>=<span class="string">"cat"</span>/&gt;</span><span class="comment">&lt;!--同上value和ref标签用法--&gt;</span>            </span><br><span class="line">            <span class="comment">&lt;!--当一个值时可以&lt;property name="array" value="123&gt;--&gt;</span>       </span><br><span class="line">        <span class="tag">&lt;/<span class="name">array</span>&gt;</span>    </span><br><span class="line">    <span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--list--&gt;</span>    </span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"list"</span>&gt;</span>        </span><br><span class="line">        <span class="tag">&lt;<span class="name">list</span>&gt;</span>            </span><br><span class="line">            <span class="tag">&lt;<span class="name">value</span>&gt;</span>phy<span class="tag">&lt;/<span class="name">value</span>&gt;</span>            </span><br><span class="line">            <span class="tag">&lt;<span class="name">value</span>&gt;</span>xzf<span class="tag">&lt;/<span class="name">value</span>&gt;</span>            </span><br><span class="line">            <span class="tag">&lt;<span class="name">ref</span> <span class="attr">bean</span>=<span class="string">"cat"</span>/&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">ref</span> <span class="attr">bean</span>=<span class="string">"user"</span>/&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">ref</span> <span class="attr">bean</span>=<span class="string">"user1"</span>/&gt;</span>        </span><br><span class="line">        <span class="tag">&lt;/<span class="name">list</span>&gt;</span>   </span><br><span class="line">    <span class="tag">&lt;/<span class="name">property</span>&gt;</span>    </span><br><span class="line">    <span class="comment">&lt;!--set--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"set"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">set</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">value</span>&gt;</span>phy<span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">value</span>&gt;</span>xzf<span class="tag">&lt;/<span class="name">value</span>&gt;</span>            </span><br><span class="line">            <span class="tag">&lt;<span class="name">ref</span> <span class="attr">bean</span>=<span class="string">"cat"</span> /&gt;</span>            </span><br><span class="line">            <span class="tag">&lt;<span class="name">ref</span> <span class="attr">bean</span>=<span class="string">"user"</span> /&gt;</span>            </span><br><span class="line">            <span class="tag">&lt;<span class="name">ref</span> <span class="attr">bean</span>=<span class="string">"user1"</span> /&gt;</span>        </span><br><span class="line">        <span class="tag">&lt;/<span class="name">set</span>&gt;</span>    </span><br><span class="line">    <span class="tag">&lt;/<span class="name">property</span>&gt;</span>    </span><br><span class="line">    <span class="comment">&lt;!--list，set用法同array--&gt;</span>    </span><br><span class="line">    <span class="comment">&lt;!--map特殊--&gt;</span>    </span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"map"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">map</span>&gt;</span>            </span><br><span class="line">            <span class="tag">&lt;<span class="name">entry</span> <span class="attr">key</span>=<span class="string">"username"</span> <span class="attr">value</span>=<span class="string">"root"</span>/&gt;</span>            </span><br><span class="line">            <span class="tag">&lt;<span class="name">entry</span> <span class="attr">key</span>=<span class="string">"userpassword"</span> <span class="attr">value</span>=<span class="string">"10709991"</span>/&gt;</span> </span><br><span class="line">            <span class="tag">&lt;<span class="name">entry</span> <span class="attr">key-ref</span>=<span class="string">"user1"</span> <span class="attr">value-ref</span>=<span class="string">"cat"</span>/&gt;</span>       </span><br><span class="line">            <span class="comment">&lt;!--依据Map的用法，需要键值对--&gt;</span>        </span><br><span class="line">        <span class="tag">&lt;/<span class="name">map</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">property</span>&gt;</span>    </span><br><span class="line">    <span class="comment">&lt;!--properties--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"prop"</span>&gt;</span>        </span><br><span class="line">        <span class="tag">&lt;<span class="name">props</span>&gt;</span>            </span><br><span class="line">            <span class="tag">&lt;<span class="name">prop</span> <span class="attr">key</span>=<span class="string">"boy"</span>&gt;</span>xzf<span class="tag">&lt;/<span class="name">prop</span>&gt;</span>            </span><br><span class="line">            <span class="tag">&lt;<span class="name">prop</span> <span class="attr">key</span>=<span class="string">"girl"</span>&gt;</span>phy<span class="tag">&lt;/<span class="name">prop</span>&gt;</span>            </span><br><span class="line">            <span class="comment">&lt;!--类似键值对，但值是写在标签中--&gt;</span>        </span><br><span class="line">        <span class="tag">&lt;/<span class="name">props</span>&gt;</span>    </span><br><span class="line">    <span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p><strong>BUG：No qualifying bean of type ‘com.zephxu.bean.User’ available:<br>expected single matching bean but found 2: user,user1</strong></p>
<p><strong>原因：<a href="#锚2">如上；</a></strong></p>
<h3 id="2、注解配置"><a href="#2、注解配置" class="headerlink" title="2、注解配置"></a>2、注解配置</h3><p>a) 导包和约束：基本包、aop包+context约束；</p>
<p>maven的pom.xml文件：</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span>    </span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span>    </span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-aop<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span>   </span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>5.1.10.RELEASE<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>applicationContext.xml文件中：</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version="1.0" encoding="UTF-8"?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">beans</span> <span class="attr">xmlns:xsi</span>=<span class="string">"http://www.w3.org/2001/XMLSchema-instance"</span> <span class="attr">xmlns</span>=<span class="string">"http://www.springframework.org/schema/beans"</span> <span class="attr">xmlns:context</span>=<span class="string">"http://www.springframework.org/schema/context"</span>       <span class="attr">xsi:context</span>=<span class="string">"http://www.springframework.org/schema/context"</span>       <span class="attr">xsi:schemaLocation</span>=<span class="string">"http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd http://www.springframework.org/schema/context http://www.springframework.org/schema/context/spring-context-4.3.xsd"</span>&gt;</span>   </span><br><span class="line">    <span class="comment">&lt;!--注解开发--&gt;</span>    <span class="comment">&lt;!--开启组件扫描 base-package 扫描该包下以及子包的所有注解--&gt;</span>    <span class="tag">&lt;<span class="name">context:component-scan</span> <span class="attr">base-package</span>=<span class="string">"com.zephxu.bean"</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">beans</span>&gt;</span></span><br></pre></td></tr></table></figure>



<p>b) 将对象注册到容器内；</p>
<p>c) 用注解配置Scope属性；</p>
<p>d) 注解配置init-method与destroy-method；</p>
<p><strong>注解：</strong></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Component</span>(<span class="string">"user2"</span>)</span><br><span class="line"><span class="meta">@Scope</span>(scopeName=<span class="string">"singleton"</span>)<span class="comment">//prototype</span></span><br><span class="line"><span class="comment">//在构造方法后调用@PostConstruct</span></span><br><span class="line"><span class="comment">//在销毁方法前调用@PreDestroy</span></span><br></pre></td></tr></table></figure>

<p><strong>等于xml中：</strong></p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">name</span>=<span class="string">"user2"</span> <span class="attr">class</span>=<span class="string">"com.zephxu.bean.User2"</span> <span class="attr">init-method</span>=<span class="string">"user2Init"</span> <span class="attr">destroy-method</span>=<span class="string">"user2Destroy"</span>&gt;</span></span><br></pre></td></tr></table></figure>

<ul>
<li>注意：</li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Controller</span>()<span class="comment">//web层</span></span><br><span class="line"><span class="meta">@Service</span>()<span class="comment">//service层</span></span><br><span class="line"><span class="meta">@Repository</span>()<span class="comment">//dao层</span></span><br></pre></td></tr></table></figure>

<p>e） 注解配置属性注入，值类型与引用类型；</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Value</span>(value = <span class="string">"1226"</span>)</span><br><span class="line"><span class="keyword">private</span> Integer u_id;<span class="comment">//使用暴力反射注入@Value("🐠")</span></span><br><span class="line"><span class="comment">//推荐在set方法上使用</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setU_username</span><span class="params">(String u_username)</span> </span>&#123; </span><br><span class="line">	<span class="keyword">this</span>.u_username = u_username;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//@Autowired//自动装配，只适用于一个Pet对象时</span></span><br><span class="line"><span class="meta">@Resource</span>(name = <span class="string">"老奶猫"</span>)</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setU_pet</span><span class="params">(Pet u_pet)</span> </span>&#123;   </span><br><span class="line">	<span class="keyword">this</span>.u_pet = u_pet;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<h3 id="3、-Spring-amp-JUnit进行测试："><a href="#3、-Spring-amp-JUnit进行测试：" class="headerlink" title="3、 Spring &amp; JUnit进行测试："></a>3、 Spring &amp; JUnit进行测试：</h3><p>a) 导包： test包（依赖 aop包）；</p>
<p>b) 使用@RunWith注解创建spring容器；</p>
<p>c） 使用@ContextConfiguration读取spring配置文件</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"> <span class="meta">@RunWith</span>(SpringJUnit4ClassRunner<span class="class">.<span class="keyword">class</span>)</span></span><br><span class="line"><span class="class"> //使用<span class="title">junit</span>进行测试，帮助创建容器</span></span><br><span class="line"> @ContextConfiguration("classpath:applicationContextInjection.xml")</span><br><span class="line"> <span class="comment">//读取配置文件</span></span><br><span class="line"> publicclass TestJunit &#123;    </span><br><span class="line"> 	<span class="meta">@Resource</span>(name = <span class="string">"cat"</span>)    </span><br><span class="line"> 	<span class="keyword">private</span> Pet pet;   </span><br><span class="line">    <span class="meta">@Test</span>    </span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">test</span><span class="params">()</span> </span>&#123;        </span><br><span class="line">    System.out.println(pet); </span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<p><strong>BUG：</strong>java.lang.ExceptionInInitializerError<br> at sun.reflect.NativeConstructorAccessorImpl.newInstance0(Native<br>Method)<br> at<br>sun.reflect.NativeConstructorAccessorImpl.newInstance(NativeConstructorAccessorImpl.java:62)<br> at<br>sun.reflect.DelegatingConstructorAccessorImpl.newInstance(DelegatingConstructorAccessorImpl.java:45)<br> at java.lang.reflect.Constructor.newInstance(Constructor.java:423)<br> at<br>org.junit.internal.builders.AnnotatedBuilder.buildRunner(AnnotatedBuilder.java:29)<br> at<br>org.junit.internal.builders.AnnotatedBuilder.runnerForClass(AnnotatedBuilder.java:21)<br> at<br>org.junit.runners.model.RunnerBuilder.safeRunnerForClass(RunnerBuilder.java:59)<br> at<br>org.junit.internal.builders.AllDefaultPossibilitiesBuilder.runnerForClass(AllDefaultPossibilitiesBuilder.java:26)<br> at<br>org.junit.runners.model.RunnerBuilder.safeRunnerForClass(RunnerBuilder.java:59)<br> at<br>org.junit.internal.requests.ClassRequest.getRunner(ClassRequest.java:26)<br> at<br>org.junit.internal.requests.FilterRequest.getRunner(FilterRequest.java:31)<br> at<br>com.intellij.junit4.JUnit4IdeaTestRunner.startRunnerWithArgs(JUnit4IdeaTestRunner.java:49)<br> at<br>com.intellij.rt.execution.junit.IdeaTestRunner$Repeater.startRunnerWithArgs(IdeaTestRunner.java:47)<br> at<br>com.intellij.rt.execution.junit.JUnitStarter.prepareStreamsAndStart(JUnitStarter.java:242)<br> at<br>com.intellij.rt.execution.junit.JUnitStarter.main(JUnitStarter.java:70)<br><strong>Caused by: java.lang.IllegalStateException: SpringJUnit4ClassRunner<br>requires JUnit 4.12 or higher.</strong><br> at org.springframework.util.Assert.state(Assert.java:73)<br> at<br>org.springframework.test.context.junit4.SpringJUnit4ClassRunner.(SpringJUnit4ClassRunner.java:104)<br> … 15 more</p>
<p><strong>原因：JUnit包需要更高版本！</strong></p>
<p><strong>注意：各个jar包版本联系，避免冲突！</strong></p>
<p> <strong>错误日志需要认真分析！</strong></p>
<p><a href="https://blog.csdn.net/weixin_38771884/article/details/84136703" target="_blank" rel="noopener">相关链接1</a></p>
<p><a href="https://blog.csdn.net/guanwangzhe521/article/details/51470241" target="_blank" rel="noopener">相关链接2</a></p>
<h3 id="4、主配置文件的分包配置"><a href="#4、主配置文件的分包配置" class="headerlink" title="4、主配置文件的分包配置"></a>4、主配置文件的分包配置</h3><p>主配置文件中加入：</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">import</span> <span class="attr">resource</span>=<span class="string">"applicationContextInjection.xml"</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">import</span> <span class="attr">resource</span>=<span class="string">"applicationContextAnnotation"</span>/&gt;</span></span><br></pre></td></tr></table></figure>



<h2 id="part4-小结与练习"><a href="#part4-小结与练习" class="headerlink" title="part4 小结与练习"></a>part4 小结与练习</h2><h3 id="1、-使用servlet技术开发用户登陆功能；"><a href="#1、-使用servlet技术开发用户登陆功能；" class="headerlink" title="1、 使用servlet技术开发用户登陆功能；"></a>1、 使用servlet技术开发用户登陆功能；</h3><h3 id="2、-在项目中加入Spring框架"><a href="#2、-在项目中加入Spring框架" class="headerlink" title="2、 在项目中加入Spring框架"></a>2、 在项目中加入Spring框架</h3><p><img src="https://github.com/ZephXu07/IMG/raw/master/%E4%BD%BF%E7%94%A8Spring%E6%94%B9%E9%80%A0Servlet%E9%A1%B9%E7%9B%AE%E5%AF%B9%E8%B1%A1%E5%85%B3%E7%B3%BB%E4%BE%9D%E8%B5%96%E5%9B%BE.png" alt="关系图"></p>
<h4 id="i-将service、dao、dateSource交给Spring管理；"><a href="#i-将service、dao、dateSource交给Spring管理；" class="headerlink" title="i. 将service、dao、dateSource交给Spring管理；"></a>i. 将service、dao、dateSource交给Spring管理；</h4><p>userDaoImpl中的<code>private ComboPooledDataSource dataSource</code>配置：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"> <span class="keyword">static</span> &#123;   </span><br><span class="line"> 	<span class="keyword">try</span> &#123;       </span><br><span class="line">        <span class="comment">//配置c3p0，连接数据库       </span></span><br><span class="line">        dataSource = <span class="keyword">new</span> ComboPooledDataSource();        </span><br><span class="line">        dataSource.setDriverClass(<span class="string">"com.mysql.cj.jdbc.Driver"</span>);                 </span><br><span class="line">        dataSource.setJdbcUrl(<span class="string">"jdbc:mysql://localhost:3306/ssm_spring?serverTimezone=Asia/Shanghai"</span>);        </span><br><span class="line">        dataSource.setUser(<span class="string">"root"</span>);        </span><br><span class="line">        dataSource.setPassword(<span class="string">"10709991"</span>);   </span><br><span class="line">    &#125; <span class="keyword">catch</span> (PropertyVetoException e) &#123;        </span><br><span class="line">        e.printStackTrace();</span><br><span class="line">&#125;                          |</span><br></pre></td></tr></table></figure>

<p>改为applicationContext.xml中：</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"> <span class="comment">&lt;!--配置dataSource--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">name</span>=<span class="string">"dataSource"</span> <span class="attr">class</span>=<span class="string">"com.mchange.v2.c3p0.ComboPooledDataSource"</span>&gt;</span> </span><br><span class="line">     <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"driverClass"</span> <span class="attr">value</span>=<span class="string">"com.mysql.cj.jdbc.Driver"</span>/&gt;</span> </span><br><span class="line">     <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"jdbcUrl"</span> <span class="attr">value</span>=<span class="string">"jdbc:mysql://localhost:3306/ssm_spring?serverTimezone=Asia/Shanghai"</span>/&gt;</span>    </span><br><span class="line">     <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"user"</span> <span class="attr">value</span>=<span class="string">"root"</span>/&gt;</span>    </span><br><span class="line">     <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"password"</span> <span class="attr">value</span>=<span class="string">"10709991"</span>/&gt;</span></span><br><span class="line"> <span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>还有dao, service中的配置</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!--配置Dao--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">name</span>=<span class="string">"userDao"</span><span class="attr">class</span>=<span class="string">"com.zephxu.dao.UserDaoImpl"</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"dataSource"</span> <span class="attr">ref</span>=<span class="string">"dataSource"</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!--配置Service--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">name</span>=<span class="string">"userService"</span> <span class="attr">class</span>=<span class="string">"com.zephxu.service.UserServiceImpl"</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"userDao"</span> <span class="attr">ref</span>=<span class="string">"userDao"</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br></pre></td></tr></table></figure>



<p><strong>缺点：每一个请求都要new一个容器，而web项目中只需要一份，下一步提供解决方法。</strong></p>
<h4 id="ii-在web-xml中配置Spring监听器和读取配置文件（SSM整合相关内容链接）；"><a href="#ii-在web-xml中配置Spring监听器和读取配置文件（SSM整合相关内容链接）；" class="headerlink" title="ii. 在web.xml中配置Spring监听器和读取配置文件（SSM整合相关内容链接）；"></a>ii. 在web.xml中配置Spring监听器和读取配置文件<a href="https://zephxu07.github.io/2019/10/15/SSM%E6%A1%86%E6%9E%B6%E6%95%B4%E5%90%88/#b-%E3%80%81%E6%B3%A8%E6%84%8F%EF%BC%9A">（SSM整合相关内容链接）</a>；</h4><ul>
<li>ServletContext类生命周期随web项目启动而创建，随web项目关闭而销毁。</li>
<li>ServletContextListener可以通过配置监听器来达到要求，在web项目创建时创建Spring容器，销毁时关闭Spring容器。</li>
</ul>
<p>web.xml文件配置：</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!--配置监听器，在web项目启动时让Spring启动--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">listener</span>&gt;</span>    </span><br><span class="line">	<span class="tag">&lt;<span class="name">listener-class</span>&gt;</span>org.springframework.web.context.ContextLoaderListener<span class="tag">&lt;/<span class="name">listener-class</span>&gt;</span><span class="tag">&lt;/<span class="name">listener</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!--读取Spring的配置文件--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">context-param</span>&gt;</span>    </span><br><span class="line">	<span class="tag">&lt;<span class="name">param-name</span>&gt;</span>contextConfigLocation<span class="tag">&lt;/<span class="name">param-name</span>&gt;</span>    </span><br><span class="line">	<span class="tag">&lt;<span class="name">param-value</span>&gt;</span>classpath:applicationContext<span class="tag">&lt;/<span class="name">param-value</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">context-param</span>&gt;</span></span><br></pre></td></tr></table></figure>



<p>Servlet类由</p>
<p><code>ApplicationContext ac = new ClassPathXmlApplicationContext(&quot;applicationContext&quot;);</code></p>
<p>改为：</p>
<p><code>WebApplicationContext wac = WebApplicationContextUtils.getWebApplicationContext(getServletContext());</code></p>
<h2 id="part5-Spring-aop"><a href="#part5-Spring-aop" class="headerlink" title="part5 Spring-aop "></a>part5 Spring-aop </h2><h3 id="1、-aop思想介绍（面向切面编程）：将纵向重复代码，横向抽取解决，简称：横切"><a href="#1、-aop思想介绍（面向切面编程）：将纵向重复代码，横向抽取解决，简称：横切" class="headerlink" title="1、 aop思想介绍（面向切面编程）：将纵向重复代码，横向抽取解决，简称：横切"></a>1、 aop思想介绍（面向切面编程）：将纵向重复代码，横向抽取解决，简称：横切</h3><p><img src="https://github.com/ZephXu07/IMG/raw/master/aop%E6%80%9D%E6%83%B3%E6%A6%82%E5%BF%B5%E4%B8%BE%E4%BE%8B.png" alt="例图"></p>
<h3 id="2、-Spring中的aop：无需我们自己写动态代理的代码，spring可以将容器中管理对象生成动态代理对象，前提是我们对他进行一些设置；"><a href="#2、-Spring中的aop：无需我们自己写动态代理的代码，spring可以将容器中管理对象生成动态代理对象，前提是我们对他进行一些设置；" class="headerlink" title="2、 Spring中的aop：无需我们自己写动态代理的代码，spring可以将容器中管理对象生成动态代理对象，前提是我们对他进行一些设置；"></a>2、 Spring中的aop：无需我们自己写动态代理的代码，spring可以将容器中管理对象生成动态代理对象，前提是我们对他进行一些设置；</h3><h3 id="3、-Spring-aop是基于动态代理的-–-优先选用JDKProxy动态代理；"><a href="#3、-Spring-aop是基于动态代理的-–-优先选用JDKProxy动态代理；" class="headerlink" title="3、 Spring-aop是基于动态代理的 – 优先选用JDKProxy动态代理；"></a>3、 Spring-aop是基于动态代理的 – 优先选用JDKProxy动态代理；</h3><p><a href="https://zephxu07.github.io/2019/10/02/%E5%8A%A8%E6%80%81%E4%BB%A3%E7%90%86%E7%AC%94%E8%AE%B0/">更加详细的动态代理</a></p>
<p><img src="https://github.com/ZephXu07/IMG/raw/master/Snipaste_2019-10-02_18-01-30.png" alt="example"></p>
<h4 id="a-Proxy动态代理：被代理的对象必须要实现接口；"><a href="#a-Proxy动态代理：被代理的对象必须要实现接口；" class="headerlink" title="a) Proxy动态代理：被代理的对象必须要实现接口；"></a>a) Proxy动态代理：被代理的对象必须要实现接口；</h4><h4 id="b-Cglib动态代理：被代理的对象不能被final修饰，基于继承；"><a href="#b-Cglib动态代理：被代理的对象不能被final修饰，基于继承；" class="headerlink" title="b) Cglib动态代理：被代理的对象不能被final修饰，基于继承；"></a>b) Cglib动态代理：被代理的对象不能被final修饰，基于继承；</h4><h3 id="4、-Spring-aop相关名词说明-；"><a href="#4、-Spring-aop相关名词说明-；" class="headerlink" title="4、 Spring aop相关名词说明 ；"></a>4、 Spring aop相关名词说明 ；</h3><p><img src="https://github.com/ZephXu07/IMG/raw/master/Snipaste_2019-10-02_18-07-38.png" alt="conceptual
graphs"></p>
<h3 id="5、-Spring-aop配置："><a href="#5、-Spring-aop配置：" class="headerlink" title="5、 Spring aop配置："></a>5、 Spring aop配置：</h3><h4 id="a-导包："><a href="#a-导包：" class="headerlink" title="a) 导包："></a>a) 导包：</h4><h5 id="i-基本包；"><a href="#i-基本包；" class="headerlink" title="i. 基本包；"></a>i. 基本包；</h5><h5 id="ii-spring-aspects和spring-aop-；"><a href="#ii-spring-aspects和spring-aop-；" class="headerlink" title="ii. spring-aspects和spring-aop ；"></a>ii. spring-aspects和spring-aop ；</h5><h5 id="iii-aop联盟包-–-aopalliance；"><a href="#iii-aop联盟包-–-aopalliance；" class="headerlink" title="iii. aop联盟包 – aopalliance；"></a>iii. aop联盟包 – aopalliance；</h5><h5 id="v-aop织入包-aspectj-weaver；"><a href="#v-aop织入包-aspectj-weaver；" class="headerlink" title="v. aop织入包 - aspectj.weaver；"></a>v. aop织入包 - aspectj.weaver；</h5><h4 id="b-自定义通知，五种自定义通知类型："><a href="#b-自定义通知，五种自定义通知类型：" class="headerlink" title="b) 自定义通知，五种自定义通知类型："></a>b) 自定义通知，五种自定义通知类型：</h4><h5 id="i-before-前置通知：在目标方法前调用"><a href="#i-before-前置通知：在目标方法前调用" class="headerlink" title="i. before 前置通知：在目标方法前调用"></a>i. before 前置通知：在目标方法前调用</h5><h5 id="ii-after-最终通知（后置通知）：在目标方法后调用，无论是否出现异常都会调用，类似finally"><a href="#ii-after-最终通知（后置通知）：在目标方法后调用，无论是否出现异常都会调用，类似finally" class="headerlink" title="ii. after 最终通知（后置通知）：在目标方法后调用，无论是否出现异常都会调用，类似finally"></a>ii. after 最终通知（后置通知）：在目标方法后调用，无论是否出现异常都会调用，类似finally</h5><h5 id="iii-afterReturning-成功通知（后置通知）：在目标方法后执行后，并且执行成功时调用，出现异常则不调用"><a href="#iii-afterReturning-成功通知（后置通知）：在目标方法后执行后，并且执行成功时调用，出现异常则不调用" class="headerlink" title="iii. afterReturning 成功通知（后置通知）：在目标方法后执行后，并且执行成功时调用，出现异常则不调用"></a>iii. afterReturning 成功通知（后置通知）：在目标方法后执行后，并且执行成功时调用，出现异常则不调用</h5><h5 id="iv-afterThrowing-异常通知（后置通知）：在目标方法后执行后，并且出现异常调用，执行成功时则不调用"><a href="#iv-afterThrowing-异常通知（后置通知）：在目标方法后执行后，并且出现异常调用，执行成功时则不调用" class="headerlink" title="iv. afterThrowing 异常通知（后置通知）：在目标方法后执行后，并且出现异常调用，执行成功时则不调用"></a>iv. afterThrowing 异常通知（后置通知）：在目标方法后执行后，并且出现异常调用，执行成功时则不调用</h5><h5 id="v-around-环绕通知：需要我们手动调用目标方法，并且可以设置通知"><a href="#v-around-环绕通知：需要我们手动调用目标方法，并且可以设置通知" class="headerlink" title="v. around 环绕通知：需要我们手动调用目标方法，并且可以设置通知"></a>v. around 环绕通知：需要我们手动调用目标方法，并且可以设置通知</h5><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MyAdvice</span> </span>&#123;    </span><br><span class="line">    <span class="comment">//    before 前置通知    </span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">before</span><span class="params">()</span> </span>&#123;       </span><br><span class="line">        System.out.println(<span class="string">"before"</span>);    </span><br><span class="line">    &#125;    </span><br><span class="line">    <span class="comment">//    after 最终通知（后置通知） </span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">after</span><span class="params">()</span> </span>&#123;        </span><br><span class="line">        System.out.println(<span class="string">"after"</span>);   </span><br><span class="line">    &#125;   </span><br><span class="line">    <span class="comment">//  afterReturning 成功通知（后置通知）    </span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">afterReturning</span><span class="params">()</span> </span>&#123;        </span><br><span class="line">        System.out.println(<span class="string">"afterReturning"</span>);</span><br><span class="line">    &#125;    </span><br><span class="line">    <span class="comment">//    afterThrowing 异常通知（后置通知）    </span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">afterThrowing</span><span class="params">()</span> </span>&#123; </span><br><span class="line">        System.out.println(<span class="string">"afterThrowing"</span>);    </span><br><span class="line">    &#125;   </span><br><span class="line">    <span class="comment">//    around 环绕通知     </span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Object <span class="title">around</span><span class="params">(ProceedingJoinPoint pjp)</span> <span class="keyword">throws</span> Throwable </span>&#123;      </span><br><span class="line">        System.out.println(<span class="string">"around before"</span>); </span><br><span class="line">        Object proceed  = pjp.proceed();        </span><br><span class="line">        System.out.println(<span class="string">"around after"</span>);        </span><br><span class="line">        <span class="keyword">return</span> proceed; </span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<h4 id="c-配置applicationContext-xml："><a href="#c-配置applicationContext-xml：" class="headerlink" title="c) 配置applicationContext.xml："></a>c) 配置applicationContext.xml：</h4><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version="1.0" encoding="UTF-8"?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">beans</span> <span class="attr">xmlns:xsi</span>=<span class="string">"http://www.w3.org/2001/XMLSchema-instance"</span> <span class="attr">xmlns</span>=<span class="string">"http://www.springframework.org/schema/beans"</span>       <span class="attr">xmlns:aop</span>=<span class="string">"http://www.springframework.org/schema/aop"</span>       <span class="attr">xsi:schemaLocation</span>=<span class="string">"http://www.springframework.org/schema/beans        http://www.springframework.org/schema/beans/spring-beans-4.3.xsd            http://www.springframework.org/schema/aop              http://www.springframework.org/schema/aop/spring-aop-4.3.xsd"</span>&gt;</span>    </span><br><span class="line"><span class="comment">&lt;!--目标对象--&gt;</span>    </span><br><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">name</span>=<span class="string">"userService"</span> <span class="attr">class</span>=<span class="string">"com.zephxu.service.UserServiceImpl"</span>/&gt;</span>    <span class="comment">&lt;!--   通知对象 --&gt;</span>    </span><br><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">name</span>=<span class="string">"myAdvice"</span> <span class="attr">class</span>=<span class="string">"com.zephxu.aop.MyAdvice"</span>/&gt;</span>   </span><br><span class="line">    <span class="tag">&lt;<span class="name">aop:config</span>&gt;</span>        </span><br><span class="line">    <span class="comment">&lt;!-- 切入点           expression：切入点表达式， 可以配置要增强的方法 </span></span><br><span class="line"><span class="comment">    单独针对此方法：public void com.zephxu.service.UserServiceImpl.save()           较大范围：* com.zephxu.service.*ServiceImpl.*(..)，此表达式可对public等权限的service下所有以ServiceImpl结尾的所有方法增强不管此方法的参数几何及何返回值</span></span><br><span class="line"><span class="comment">    id：唯一标识--&gt;</span>        </span><br><span class="line">            <span class="tag">&lt;<span class="name">aop:pointcut</span> <span class="attr">id</span>=<span class="string">"servicePc"</span> <span class="attr">expression</span>=<span class="string">"execution(* com.zephxu.service.*ServiceImpl.*(..))"</span>/&gt;</span>        </span><br><span class="line">    <span class="comment">&lt;!--切面：通知 + 切入点        --&gt;</span>        </span><br><span class="line">            <span class="tag">&lt;<span class="name">aop:aspect</span> <span class="attr">ref</span>=<span class="string">"myAdvice"</span>&gt;</span></span><br><span class="line">            <span class="comment">&lt;!--绑定通知对象--&gt;</span>            </span><br><span class="line">            <span class="comment">&lt;!--通知类型--&gt;</span>            </span><br><span class="line">            <span class="comment">&lt;!-- 前置通知 --&gt;</span> </span><br><span class="line">            <span class="tag">&lt;<span class="name">aop:before</span> <span class="attr">method</span>=<span class="string">"before"</span> <span class="attr">pointcut-ref</span>=<span class="string">"servicePc"</span>/&gt;</span> </span><br><span class="line">            <span class="comment">&lt;!-- 最终通知（后置通知）           --&gt;</span>  </span><br><span class="line">            <span class="tag">&lt;<span class="name">aop:after</span> <span class="attr">method</span>=<span class="string">"after"</span> <span class="attr">pointcut-ref</span>=<span class="string">"servicePc"</span>/&gt;</span></span><br><span class="line">            <span class="comment">&lt;!-- 成功通知（后置通知）          --&gt;</span>     </span><br><span class="line">            <span class="tag">&lt;<span class="name">aop:after-returning</span> <span class="attr">method</span>=<span class="string">" afterReturning"</span> <span class="attr">pointcut-ref</span>=<span class="string">"servicePc"</span>/&gt;</span>            <span class="comment">&lt;!--    异常通知（后置通知） --&gt;</span>            </span><br><span class="line">            <span class="tag">&lt;<span class="name">aop:after-throwing</span> <span class="attr">method</span>=<span class="string">"afterThrowing"</span> <span class="attr">pointcut-ref</span>=<span class="string">"servicePc"</span>/&gt;</span>            <span class="comment">&lt;!--    环绕通知          --&gt;</span>            </span><br><span class="line">            <span class="tag">&lt;<span class="name">aop:around</span> <span class="attr">method</span>=<span class="string">"around"</span> <span class="attr">pointcut-ref</span>=<span class="string">"servicePc"</span>/&gt;</span>        </span><br><span class="line">            <span class="tag">&lt;/<span class="name">aop:aspect</span>&gt;</span>  </span><br><span class="line">    <span class="tag">&lt;/<span class="name">aop:config</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">beans</span>&gt;</span></span><br></pre></td></tr></table></figure>



<h4 id="d）测试及结果"><a href="#d）测试及结果" class="headerlink" title="d）测试及结果"></a>d）测试及结果</h4><figure class="highlight java"><table><tr><td class="code"><pre><span class="line">@RunWith(SpringJUnit4ClassRunner.class)@ContextConfiguration("classpath:applicationContext.xml")</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">AopTest</span> </span>&#123;   </span><br><span class="line">	<span class="meta">@Resource</span>(name = <span class="string">"userService"</span>)    </span><br><span class="line">	UserService us;    </span><br><span class="line">	<span class="meta">@Test</span>    </span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">test2</span><span class="params">()</span> </span>&#123;        </span><br><span class="line">		us.delete();   </span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<p><strong><em>结果：</em></strong></p>
<p><img src="https://github.com/ZephXu07/IMG/raw/master/RunningResult.png" alt="result"></p>
<p><strong><em>测试异常：</em></strong></p>
<p><img src="https://github.com/ZephXu07/IMG/raw/master/TestThrow.png" alt="testThrow"></p>
<p><img src="https://github.com/ZephXu07/IMG/raw/master/ThrowResult.png" alt="ThrowingResult"></p>
<h4 id="e）bug及原因："><a href="#e）bug及原因：" class="headerlink" title="e）bug及原因："></a>e）bug及原因：</h4><p><strong><em>BUG:</em></strong></p>
<p><strong><em>Caused by:<br>org.springframework.beans.factory.parsing.BeanDefinitionParsingException:<br>Configuration problem: tag needs aspect bean reference via ‘ref’<br>attribute when declaring advices.<br>Offending resource: class path resource [applicationContext.xml]</em></strong><br><strong><em>Aspect: ref=’’</em></strong></p>
<p><strong><em>Reason：</em></strong></p>
<p><img src="https://github.com/ZephXu07/IMG/raw/master/BugReason.png" alt="reason"></p>
<h2 id="part6、Spring与Jdbc"><a href="#part6、Spring与Jdbc" class="headerlink" title="part6、Spring与Jdbc "></a>part6、Spring与Jdbc </h2><h3 id="1、-使用JdbcTemplate操作数据库；"><a href="#1、-使用JdbcTemplate操作数据库；" class="headerlink" title="1、 使用JdbcTemplate操作数据库；"></a>1、 使用JdbcTemplate操作数据库；</h3><ul>
<li>导包：新增jdbc、tx</li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"> <span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">UserDaoImpl</span> <span class="keyword">implements</span> <span class="title">UserDao</span> </span>&#123;    </span><br><span class="line"> 	<span class="keyword">private</span> <span class="keyword">static</span> ComboPooledDataSource dataSource;</span><br><span class="line"> 	<span class="keyword">static</span> &#123;        </span><br><span class="line"> 		<span class="keyword">try</span> &#123;            <span class="comment">// 配置c3p0，连接数据库            </span></span><br><span class="line">            dataSource = <span class="keyword">new</span> ComboPooledDataSource();      </span><br><span class="line">            dataSource.setDriverClass(<span class="string">"com.mysql.cj.jdbc.Driver"</span>); </span><br><span class="line">            dataSource.setJdbcUrl(<span class="string">"jdbc:mysql://localhost:3306/ssm_spring?serverTimezone=Asia/Shanghai"</span>);            </span><br><span class="line">            dataSource.setUser(<span class="string">"root"</span>);            </span><br><span class="line">            dataSource.setPassword(<span class="string">"10709991"</span>);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (PropertyVetoException e) &#123;            </span><br><span class="line">        	e.printStackTrace();        </span><br><span class="line">        &#125;   </span><br><span class="line">	&#125;    </span><br><span class="line">	<span class="meta">@Override</span>    </span><br><span class="line">	<span class="function"><span class="keyword">public</span> User <span class="title">selectUserById</span><span class="params">(Integer id)</span> </span>&#123; </span><br><span class="line">        JdbcTemplate jt = <span class="keyword">new</span> JdbcTemplate(dataSource);</span><br><span class="line">        String sql = <span class="string">"select * from user where u_id = ?"</span>;        </span><br><span class="line">        User user = jt.queryForObject(sql, <span class="keyword">new</span> RowMapper&lt;User&gt;() &#123;</span><br><span class="line">            <span class="meta">@Override</span>            </span><br><span class="line">            <span class="function"><span class="keyword">public</span> User <span class="title">mapRow</span><span class="params">(ResultSet rs, <span class="keyword">int</span> index)</span> <span class="keyword">throws</span> SQLException </span>&#123;           	User u = <span class="keyword">new</span> User();</span><br><span class="line">                u.setU_id(rs.getInt(<span class="string">"u_id"</span>));</span><br><span class="line">                u.setU_username(rs.getString(<span class="string">"u_username"</span>));</span><br><span class="line">                u.setU_password(rs.getString(<span class="string">"u_password"</span>));                </span><br><span class="line">                <span class="keyword">return</span> u;</span><br><span class="line">            &#125;        </span><br><span class="line">		&#125;, id);        </span><br><span class="line">		<span class="keyword">return</span> user;   </span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="2、-JdbcTemplate的增删改查操作；"><a href="#2、-JdbcTemplate的增删改查操作；" class="headerlink" title="2、 JdbcTemplate的增删改查操作；"></a>2、 JdbcTemplate的增删改查操作；</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Override</span>   </span><br><span class="line"><span class="function"><span class="keyword">public</span> List&lt;User&gt; <span class="title">selectAllUser</span><span class="params">()</span> </span>&#123;       </span><br><span class="line">    String sql = <span class="string">"select * from user"</span>;       </span><br><span class="line">    List&lt;User&gt; userList = jt.query(sql, <span class="keyword">new</span> RowMapper&lt;User&gt;() &#123;           			<span class="meta">@Override</span> </span><br><span class="line">        <span class="function"><span class="keyword">public</span> User <span class="title">mapRow</span><span class="params">(ResultSet rs, <span class="keyword">int</span> index)</span> <span class="keyword">throws</span> SQLException </span>&#123;   </span><br><span class="line">       		User u = <span class="keyword">new</span> User();              </span><br><span class="line">			u.setU_id(rs.getInt(<span class="string">"u_id"</span>));              </span><br><span class="line">			u.setU_username(rs.getString(<span class="string">"u_username"</span>));     </span><br><span class="line">            u.setU_password(rs.getString(<span class="string">"u_password"</span>));               </span><br><span class="line">            <span class="keyword">return</span> u;           </span><br><span class="line">        &#125;      </span><br><span class="line">    &#125;);        </span><br><span class="line">    <span class="keyword">return</span> userList;  </span><br><span class="line">&#125;   </span><br><span class="line"><span class="meta">@Override</span>   </span><br><span class="line"><span class="function"><span class="keyword">public</span> Integer <span class="title">selectUserCount</span><span class="params">()</span> </span>&#123; </span><br><span class="line">    String sql = <span class="string">"select count(*) from user"</span>;       </span><br><span class="line">    <span class="keyword">return</span> jt.queryForObject(sql, Integer<span class="class">.<span class="keyword">class</span>)</span>; </span><br><span class="line">&#125;   </span><br><span class="line"><span class="meta">@Override</span>   <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">addUser</span><span class="params">(User user)</span> </span>&#123;     </span><br><span class="line">    String sql = <span class="string">"insert into user values(null, ?, ?)"</span>;   </span><br><span class="line">    jt.update(sql, user.getU_username(), user.getU_username());  </span><br><span class="line">&#125;   </span><br><span class="line"><span class="meta">@Override</span> </span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">deleteUser</span><span class="params">(Integer id)</span> </span>&#123;       </span><br><span class="line">    String sql = <span class="string">"delete from user where u_id = ?"</span>;       </span><br><span class="line">    jt.update(sql, id);   </span><br><span class="line">&#125;   </span><br><span class="line"><span class="meta">@Override</span>  </span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">update</span><span class="params">(User user)</span> </span>&#123;   </span><br><span class="line">    String sql = <span class="string">"update user set u_username = ?, u_password = ? where u_id = ?"</span> ;       </span><br><span class="line">    jt.update(sql, user.getU_username(), user.getU_password(), user.getU_id()); </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="3、-让Spring容器管理JdbcTemplate；"><a href="#3、-让Spring容器管理JdbcTemplate；" class="headerlink" title="3、 让Spring容器管理JdbcTemplate；"></a>3、 让Spring容器管理JdbcTemplate；</h3><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"> <span class="comment">&lt;!--依赖关系：dao -&gt; jdbcTemplate -&gt;  dataSource --&gt;</span></span><br><span class="line"> <span class="comment">&lt;!--    dataSource--&gt;</span></span><br><span class="line"> <span class="tag">&lt;<span class="name">bean</span> <span class="attr">name</span>=<span class="string">"dataSource"</span> <span class="attr">class</span>=<span class="string">"com.mchange.v2.c3p0.ComboPooledDataSource"</span>&gt;</span>   	</span><br><span class="line"> 	<span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"driverClass"</span> <span class="attr">value</span>=<span class="string">"com.mysql.cj.jdbc.Driver"</span>/&gt;</span> </span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"jdbcUrl"</span> <span class="attr">value</span>=<span class="string">"jdbc:mysql://localhost:3306/ssm_spring?serverTimezone=Asia/Shanghai"</span>/&gt;</span>   </span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"user"</span> <span class="attr">value</span>=<span class="string">"root"</span>/&gt;</span> </span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"password"</span> <span class="attr">value</span>=<span class="string">"10709991"</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!--    jdbcTemplate--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">name</span>=<span class="string">"jdbcTemplate"</span> <span class="attr">class</span>=<span class="string">"org.springframework.jdbc.core.JdbcTe mplate"</span>&gt;</span>    </span><br><span class="line">	<span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"dataSource"</span> <span class="attr">ref</span>=<span class="string">"dataSource"</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!--dao--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">name</span>=<span class="string">"userDao"</span> <span class="attr">class</span>=<span class="string">"com.zephxu.dao.UserDaoImpl"</span>&gt;</span>   </span><br><span class="line">	<span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"jt"</span> <span class="attr">ref</span>=<span class="string">"jdbcTemplate"</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br></pre></td></tr></table></figure>



<h3 id="4、-继承JdbcDaoSupport甩开JdbcTemplat"><a href="#4、-继承JdbcDaoSupport甩开JdbcTemplat" class="headerlink" title="4、 继承JdbcDaoSupport甩开JdbcTemplat"></a>4、 继承JdbcDaoSupport甩开JdbcTemplat</h3><p><code>public class UserDaoImpl extends JdbcDaoSupport implements UserDao { }</code></p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!--依赖关系：dao -&gt; dataSource --&gt;</span></span><br><span class="line"><span class="comment">&lt;!--    dataSource--&gt;</span>    </span><br><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">name</span>=<span class="string">"dataSource"</span> <span class="attr">class</span>=<span class="string">"com.mchange.v2.c3p0.ComboPooledDataSource"</span>&gt;</span>           </span><br><span class="line">	<span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"driverClass"</span> <span class="attr">value</span>=<span class="string">"com.mysql.cj.jdbc.Driver"</span>/&gt;</span> </span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"jdbcUrl"</span> <span class="attr">value</span>=<span class="string">"jdbc:mysql://localhost:3306/ssm_spring?serverTimezone=Asia/Shanghai"</span>/&gt;</span>       </span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"user"</span> <span class="attr">value</span>=<span class="string">"root"</span>/&gt;</span>          </span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"password"</span> <span class="attr">value</span>=<span class="string">"10709991"</span>/&gt;</span> </span><br><span class="line"><span class="tag">&lt;/<span class="name">bean</span>&gt;</span> </span><br><span class="line">    <span class="tag">&lt;<span class="name">bean</span> <span class="attr">name</span>=<span class="string">"userDao"</span> <span class="attr">class</span>=<span class="string">"com.zephxu.dao.UserDaoImpl"</span>&gt;</span>  </span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"dataSource"</span> <span class="attr">ref</span>=<span class="string">"dataSource"</span>/&gt;</span> </span><br><span class="line"><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br></pre></td></tr></table></figure>



<h3 id="5、-在Spring中读取配置文件"><a href="#5、-在Spring中读取配置文件" class="headerlink" title="5、 在Spring中读取配置文件"></a>5、 在Spring中读取配置文件</h3><p>db.properties：</p>
<figure class="highlight properties"><table><tr><td class="code"><pre><span class="line"><span class="meta">jdbc.driverClass</span>=<span class="string">com.mysql.cj.jdbc.Driver</span></span><br><span class="line"><span class="meta">jdbc.jdbcUrl</span>=<span class="string">jdbc:mysql://localhost:3306/ssm_spring?serverTimezone=Asia/Shanghai</span></span><br><span class="line"><span class="meta">jdbc.user</span>=<span class="string">rootjdbc. password=10709991</span></span><br></pre></td></tr></table></figure>

<p>applicationContext.xml：</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version="1.0" encoding="UTF-8"?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">beans</span> <span class="attr">xmlns:xsi</span>=<span class="string">"http://www.w3.org/2001/XMLSchema-instance"</span> <span class="attr">xmlns</span>=<span class="string">"http://www.springframework.org/schema/beans"</span>       <span class="attr">xmlns:context</span>=<span class="string">"http://www.springframework.org/schema/context"</span>       <span class="attr">xsi:schemaLocation</span>=<span class="string">"http://www.springframework.org/schema/beans       http://www.springframework.org/schema/beans/spring-beans.xsd        http://www.springframework.org/schema/context        http://www.springframework.org/schema/context/spring-context.xsd"</span>&gt;</span>   </span><br><span class="line"><span class="comment">&lt;!--读取配置文件--&gt;</span>        </span><br><span class="line"><span class="tag">&lt;<span class="name">context:property-placeholder</span> <span class="attr">location</span>=<span class="string">"db.properties"</span>/&gt;</span>   </span><br><span class="line">	<span class="tag">&lt;<span class="name">bean</span> <span class="attr">name</span>=<span class="string">"dataSource"</span> <span class="attr">class</span>=<span class="string">"com.mchange.v2.c3p0.ComboPooledDataSource"</span>&gt;</span>      </span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"driverClass"</span> <span class="attr">value</span>=<span class="string">"$&#123;jdbc.driverClass&#125;"</span>/&gt;</span>        </span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"jdbcUrl"</span> <span class="attr">value</span>=<span class="string">"$&#123;jdbc.jdbcUrl&#125;"</span>/&gt;</span>        </span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"user"</span> <span class="attr">value</span>=<span class="string">"$&#123;jdbc.user&#125;"</span>/&gt;</span>     </span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"password"</span> <span class="attr">value</span>=<span class="string">"$&#123;jdbc.password&#125;"</span>/&gt;</span>  </span><br><span class="line"><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">beans</span>&gt;</span></span><br></pre></td></tr></table></figure>



<h2 id="part7-Spring中的aop事务"><a href="#part7-Spring中的aop事务" class="headerlink" title="part7 Spring中的aop事务 "></a>part7 Spring中的aop事务 </h2><h3 id="1、事务相关知识"><a href="#1、事务相关知识" class="headerlink" title="1、事务相关知识"></a>1、事务相关知识</h3><h4 id="a-什么是事务："><a href="#a-什么是事务：" class="headerlink" title="a) 什么是事务："></a>a) 什么是事务：</h4><p>把多条数据库操作捆绑到一起执行，要么都成功，要么都失败；</p>
<h4 id="b-事务的原则ACID："><a href="#b-事务的原则ACID：" class="headerlink" title="b) 事务的原则ACID："></a>b) 事务的原则ACID：</h4><p>i.<br>原子性：事务包含的所有操作，要么全部成功，要么全部失败回滚，成功全部应用到数据库，失败不能对数据库有任何影响；</p>
<p>ii.<br>一致性：事务在执行前和执行后必须一致；例如A和B一共有100块钱，无论A、B之间如何转账，他们的钱始终相加都是100；</p>
<p>iii.<br>隔离性：多用户并发访问同一张表时，数据库为每一个用户开启新的事务，该事务不能被其他事务所影响，相互有隔离；</p>
<p>iv.<br>持久性：一个事务一旦提交，则对数据库中数据的改变是永久的，即便系统故障也不会丢失；</p>
<h4 id="c-并发可能引起的问题："><a href="#c-并发可能引起的问题：" class="headerlink" title="c) 并发可能引起的问题："></a>c) 并发可能引起的问题：</h4><p>i. 脏读：一个事务读取到另一个事务未提交的数据；</p>
<p>ii.<br>不可重复读：一个事务读取到另一个事务已提交(Update操作)的数据，导致前后读取不一致；</p>
<p>iii.<br>幻读（虚读）：一个事务中读取到别的事务插入(Insert操作)的数据，导致前后读取不一致；</p>
<h4 id="d-事务的隔离级别：根据实际情况选择；"><a href="#d-事务的隔离级别：根据实际情况选择；" class="headerlink" title="d) 事务的隔离级别：根据实际情况选择；"></a>d) 事务的隔离级别：根据实际情况选择；</h4><p>i. Serializable串行化：可避免脏读、不可重复读和幻读；</p>
<p>ii. Repeatable read可重复读：可避免脏读、不可重复读；（MySql默认值）</p>
<p>ii. Read committed读已提交：可避免脏读；</p>
<p>iv. Read uncommitted读未提交：任何情况都无法保证；</p>
<h4 id="e-更加详细的事务介绍"><a href="#e-更加详细的事务介绍" class="headerlink" title="e) 更加详细的事务介绍"></a>e) <a href="https://www.cnblogs.com/xdp-gacl/p/3984001.html" target="_blank" rel="noopener">更加详细的事务介绍</a></h4><h3 id="2、Spring-aop事务-搭建环境"><a href="#2、Spring-aop事务-搭建环境" class="headerlink" title="2、Spring-aop事务-搭建环境"></a>2、Spring-aop事务-搭建环境</h3><h4 id="a-事务基本操作：打开事务、提交事务、回滚事务；"><a href="#a-事务基本操作：打开事务、提交事务、回滚事务；" class="headerlink" title="a) 事务基本操作：打开事务、提交事务、回滚事务；"></a>a) 事务基本操作：打开事务、提交事务、回滚事务；</h4><h4 id="b-Spring中利用接口来管理不同框架的事务操作；"><a href="#b-Spring中利用接口来管理不同框架的事务操作；" class="headerlink" title="b) Spring中利用接口来管理不同框架的事务操作；"></a>b) Spring中利用接口来管理不同框架的事务操作；</h4><p>i.<br>通过实现PlatformTransactionManager接口支持不同的框架完成各自的事务处理；</p>
<p>ii. 为不同平台提供对应的事务管理器的实现：</p>
<p>JDBC&amp;Mybatis：DataSourceTransactionManager；</p>
<h3 id="3、Spring-aop事务通过配置事务的隔离级别、事务传播行为、是否只读来操作；"><a href="#3、Spring-aop事务通过配置事务的隔离级别、事务传播行为、是否只读来操作；" class="headerlink" title="3、Spring-aop事务通过配置事务的隔离级别、事务传播行为、是否只读来操作；"></a>3、Spring-aop事务通过配置事务的隔离级别、事务传播行为、是否只读来操作；</h3><h4 id="i-隔离级别：串行化、可重复读、读已提交、读未提交；"><a href="#i-隔离级别：串行化、可重复读、读已提交、读未提交；" class="headerlink" title="i. 隔离级别：串行化、可重复读、读已提交、读未提交；"></a>i. 隔离级别：串行化、可重复读、读已提交、读未提交；</h4><h4 id="ii-是否只读："><a href="#ii-是否只读：" class="headerlink" title="ii. 是否只读："></a>ii. 是否只读：</h4><ol>
<li><p>true：不可改变数据库中的数据，查询操作推荐，</p>
</li>
<li><p>false：可以改变数据库数据；</p>
</li>
</ol>
<h4 id="iii-事务传播行为：事务方法嵌套调用的规则："><a href="#iii-事务传播行为：事务方法嵌套调用的规则：" class="headerlink" title="iii. 事务传播行为：事务方法嵌套调用的规则："></a>iii. 事务传播行为：事务方法嵌套调用的规则：</h4><p> xService.x(); -&gt; yService.y();</p>
<p> 1.<br>REQUIRED：如果当前没有事务，就创建一个新事务，如果当前存在事务，就加入该事务，<strong><em>该设置是最常用的设置</em></strong>；</p>
<ol start="2">
<li><p>REQUIRES_NEW：创建新事务，无论当前存不存在事务，都创建新事务；</p>
<p>3.<br>SUPPORTS：支持当前事务，如果当前存在事务，就加入该事务，如果当前不存在事务，就以非事务执行；</p>
<p>4.<br>NOT_SUPPORTED：以非事务方式执行操作，如果当前存在事务，就把当前事务挂起（暂停）；</p>
<p>5.<br>MANDATORY：支持当前事务，如果当前存在事务，就加入该事务，如果当前不存在事务，就抛出异常；</p>
</li>
<li><p>NEVER：以非事务方式执行，如果当前存在事务，则抛出异常；</p>
<p>7.<br>NESTED：如果当前存在事务，则在嵌套事务内执行（y开启新的事务）。如果当前没有事务，则执行与REQUIRED类似的操作。</p>
</li>
</ol>
<h3 id="4、Spring-aop事务-–-从麻烦的事务代码中走出之xml配置版aop事务；"><a href="#4、Spring-aop事务-–-从麻烦的事务代码中走出之xml配置版aop事务；" class="headerlink" title="4、Spring-aop事务-– 从麻烦的事务代码中走出之xml配置版aop事务；"></a>4、Spring-aop事务-– 从麻烦的事务代码中走出之xml配置版aop事务；</h3><h4 id="a-使用经典的转账案例进行测试，准备数据：bean、service、dao；"><a href="#a-使用经典的转账案例进行测试，准备数据：bean、service、dao；" class="headerlink" title="a) 使用经典的转账案例进行测试，准备数据：bean、service、dao；"></a>a) 使用经典的转账案例进行测试，准备数据：bean、service、dao；</h4><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">transferAccounts</span><span class="params">()</span> </span>&#123; </span><br><span class="line">    <span class="comment">//转账        </span></span><br><span class="line">    <span class="comment">//A - 50         </span></span><br><span class="line">    accountDao.subMoney(<span class="number">1</span>, <span class="number">50</span>d);      </span><br><span class="line">    <span class="comment">//异常        </span></span><br><span class="line">    <span class="keyword">int</span> value = <span class="number">1</span> / <span class="number">0</span>;      </span><br><span class="line">    <span class="comment">//B + 50        </span></span><br><span class="line">    accountDao.addMoney(<span class="number">2</span>, <span class="number">50</span>d);   </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<h4 id="b-使用事务需要额外导入tx包和tx约束；"><a href="#b-使用事务需要额外导入tx包和tx约束；" class="headerlink" title="b) 使用事务需要额外导入tx包和tx约束；"></a>b) 使用事务需要额外导入tx包和tx约束；</h4><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"> <span class="meta">&lt;?xml version="1.0" encoding="UTF-8"?&gt;</span></span><br><span class="line"> <span class="tag">&lt;<span class="name">beans</span> <span class="attr">xmlns:xsi</span>=<span class="string">"http://www.w3.org/2001/XMLSchema-instance"</span> <span class="attr">xmlns</span>=<span class="string">"http://www.springframework.org/schema/beans"</span>       <span class="attr">xmlns:context</span>=<span class="string">"http://www.springframework.org/schema/context"</span>       <span class="attr">xmlns:tx</span>=<span class="string">"http://www.springframework.org/schema/tx"</span> <span class="attr">xmlns:aop</span>=<span class="string">"http://www.springframework.org/schema/aop"</span>      </span></span><br><span class="line"><span class="tag"><span class="attr">xsi:schemaLocation</span>=<span class="string">"http://www.springframework.org/schema/beans       http://www.springframework.org/schema/beans/spring-beans.xsd        http://www.springframework.org/schema/context</span></span></span><br><span class="line"><span class="tag"><span class="string">http://www.springframework.org/schema/context/spring-context.xsd </span></span></span><br><span class="line"><span class="tag"><span class="string">http://www.springframework.org/schema/tx        </span></span></span><br><span class="line"><span class="tag"><span class="string">http://www.springframework.org/schema/tx/spring-tx.xsd  </span></span></span><br><span class="line"><span class="tag"><span class="string">http://www.springframework.org/schema/aop        </span></span></span><br><span class="line"><span class="tag"><span class="string">http://www.springframework.org/schema/aop/spring-aop.xsd"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">beans</span>&gt;</span></span><br></pre></td></tr></table></figure>



<h4 id="c-配置事务核心管理器-DataSourceTransactionManager；"><a href="#c-配置事务核心管理器-DataSourceTransactionManager；" class="headerlink" title="c) 配置事务核心管理器: DataSourceTransactionManager；"></a>c) 配置事务核心管理器: DataSourceTransactionManager；</h4><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!--配置事务核心管理器，不同平台不一样--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">name</span>=<span class="string">"transactionManager"</span> <span class="attr">class</span>=<span class="string">"org.springframework.jdbc.datasource.DataSourceTransactionManager"</span>&gt;</span> </span><br><span class="line">	<span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"dataSource"</span> <span class="attr">ref</span>=<span class="string">"dataSource"</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br></pre></td></tr></table></figure>



<h4 id="d-配置事务通知-tx-Advice；"><a href="#d-配置事务通知-tx-Advice；" class="headerlink" title="d) 配置事务通知 tx:Advice；"></a>d) 配置事务通知 tx:Advice；</h4><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!--配置事务通知    --&gt;</span>    </span><br><span class="line"><span class="tag">&lt;<span class="name">tx:advice</span> <span class="attr">id</span>=<span class="string">"txAdvice"</span> <span class="attr">transaction-manager</span>=<span class="string">"transactionManager"</span>&gt;</span>        </span><br><span class="line">    <span class="tag">&lt;<span class="name">tx:attributes</span>&gt;</span>                 </span><br><span class="line">        <span class="tag">&lt;<span class="name">tx:method</span> <span class="attr">name</span>=<span class="string">"transferAccounts"</span> <span class="attr">isolation</span>=<span class="string">"DEFAULT"</span> <span class="attr">propagation</span>=<span class="string">"REQUIRED"</span> <span class="attr">read-only</span>=<span class="string">"false"</span>/&gt;</span>           </span><br><span class="line">        <span class="comment">&lt;!--isolation隔离级别，propagation传播行为，read-only="false"为有对数据库进行修改--&gt;</span>    </span><br><span class="line">        <span class="tag">&lt;<span class="name">tx:method</span> <span class="attr">name</span>=<span class="string">"save*"</span> <span class="attr">isolation</span>=<span class="string">"DEFAULT"</span> <span class="attr">propagation</span>=<span class="string">"REQUIRED"</span> <span class="attr">read-only</span>=<span class="string">"false"</span>/&gt;</span>            </span><br><span class="line">        <span class="tag">&lt;<span class="name">tx:method</span> <span class="attr">name</span>=<span class="string">"delete*"</span> <span class="attr">isolation</span>=<span class="string">"DEFAULT"</span> <span class="attr">propagation</span>=<span class="string">"REQUIRED"</span> <span class="attr">read-only</span>=<span class="string">"false"</span>/&gt;</span>       </span><br><span class="line">        <span class="tag">&lt;<span class="name">tx:method</span> <span class="attr">name</span>=<span class="string">"update*"</span> <span class="attr">isolation</span>=<span class="string">"DEFAULT"</span> <span class="attr">propagation</span>=<span class="string">"REQUIRED"</span> <span class="attr">read-only</span>=<span class="string">"false"</span>/&gt;</span>           </span><br><span class="line">        <span class="tag">&lt;<span class="name">tx:method</span> <span class="attr">name</span>=<span class="string">"select*"</span> <span class="attr">isolation</span>=<span class="string">"DEFAULT"</span> <span class="attr">propagation</span>=<span class="string">"REQUIRED"</span> <span class="attr">read-only</span>=<span class="string">"true"</span>/&gt;</span></span><br><span class="line">        <span class="comment">&lt;!--没有对数据库进行修改--&gt;</span>    </span><br><span class="line">    <span class="tag">&lt;/<span class="name">tx:attributes</span>&gt;</span>    </span><br><span class="line"><span class="tag">&lt;/<span class="name">tx:advice</span>&gt;</span></span><br></pre></td></tr></table></figure>



<h4 id="e-配置aop；"><a href="#e-配置aop；" class="headerlink" title="e) 配置aop；"></a>e) 配置aop；</h4><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!--配置aop--&gt;</span><span class="tag">&lt;<span class="name">aop:config</span>&gt;</span>   </span><br><span class="line"><span class="tag">&lt;<span class="name">aop:pointcut</span> <span class="attr">id</span>=<span class="string">"txPc"</span> <span class="attr">expression</span>=<span class="string">"execution(* com.zephxu.service.*ServiceImpl.*(.. ))"</span>/&gt;</span>   </span><br><span class="line"><span class="comment">&lt;!--切入点--&gt;</span>    </span><br><span class="line"><span class="tag">&lt;<span class="name">aop:advisor</span> <span class="attr">advice-ref</span>=<span class="string">"txAdvice"</span> <span class="attr">pointcut-ref</span>=<span class="string">"txPc"</span>/&gt;</span>  </span><br><span class="line"><span class="comment">&lt;!--通知-- &gt;</span></span><br><span class="line"><span class="comment">&lt;/aop:config&gt;</span></span><br></pre></td></tr></table></figure>



<p><strong>出现异常<code>int value = 1 / 0;</code>时因为加入事务管理，自动事务回滚。</strong></p>
<p><img src="https://github.com/ZephXu07/IMG/raw/master/exist.png" alt="存在事务管理"></p>
<p><strong><em>若没有事务管理，则前者转出成功，但后者并没有收到。</em></strong></p>
<p><img src="https://github.com/ZephXu07/IMG/raw/master/Simple.png" alt="不存在事务管理"></p>
<h4 id="f-BUG："><a href="#f-BUG：" class="headerlink" title="f) BUG："></a>f) BUG：</h4><p>Caused by: org.springframework.beans.factory.BeanCreationException:<br>Error creating bean with name ‘dataSource’ defined in class path<br>resource [applicationContext.xml]: Initialization of bean failed; nested<br>exception is java.lang.IllegalArgumentException: Pointcut is not<br>well-formed: expecting ‘name pattern’ at character position 45<br><strong><em>execution(*com.zephxu.service.*ServiceImpl.\</em>(.. ))*</strong></p>
<p><strong><em>原因：</em></strong></p>
<p><code>&lt;aop:pointcut id=&quot;txPc&quot; expression=&quot;execution(* com.zephxu.service.*ServiceImpl.*(..))&quot;/&gt;</code></p>
<p><strong>在 * 与com之间需要空格！</strong></p>
<h3 id="5、Spring-aop事务-–-从麻烦的事务代码中走出之注解版aop事务。"><a href="#5、Spring-aop事务-–-从麻烦的事务代码中走出之注解版aop事务。" class="headerlink" title="5、Spring-aop事务 – 从麻烦的事务代码中走出之注解版aop事务。"></a>5、Spring-aop事务 – 从麻烦的事务代码中走出之注解版aop事务。</h3><p><strong>配置事务通知 tx:Advice</strong>与<strong>配置aop</strong>更改为：</p>
<p><code>&lt;!--开启注解事务--&gt;&lt;tx:annotation-driven/&gt;</code></p>
<p><code>@Transactional(isolation = Isolation.DEFAULT, propagation = Propagation.REQUIRED, readOnly = false)</code></p>
<p><strong>注解在方法上就此方法开启事务，也可以将注解放在此类上，则此类所有方法都开启事务，若某方法有特别的事务配置仅需在那方法上设置新的注解。</strong></p>
<p><strong>BUG：</strong></p>
<p><strong>Error creating bean with name ‘dataSource’ defined in class path<br>resource [applicationContext2.xml]: Initialization of bean failed;<br>nested exception is java.lang.NoSuchMethodError:<br>org.springframework.core.annotation.AnnotationUtils.isCandidateClass(Ljava/lang/Class;Ljava/lang/Class;)Z</strong></p>
<p><strong>原因：导包缺少，仔细与视频中对比，发现少了spring-aspects，com.springsource.org.aspectj.weaver，com.springsource.org.aopalliance三个jar包，且<a href="https://mvnrepository.com/artifact/org.springframework/spring-core" target="_blank" rel="noopener">Spring<br>Core</a>需要最新！</strong></p>
<p><strong>强烈建议：Spring版本通过maven版本锁定，<a href="https://blog.csdn.net/qq_37393900/article/details/80240015" target="_blank" rel="noopener">相关链接</a></strong></p>
<p><img src="https://github.com/ZephXu07/IMG/raw/master/SpringVersion.png" alt="版本锁定"></p>
<p><img src="https://github.com/ZephXu07/IMG/raw/master/FollowSpringVersion.png" alt="跟随版本"></p>
<h2 id="part8、Spring整合Mybatis加入事务操作数据库"><a href="#part8、Spring整合Mybatis加入事务操作数据库" class="headerlink" title="part8、Spring整合Mybatis加入事务操作数据库 "></a>part8、Spring整合Mybatis加入事务操作数据库 </h2><h3 id="1、-整合Mybatis"><a href="#1、-整合Mybatis" class="headerlink" title="1、 整合Mybatis"></a>1、 整合Mybatis</h3><h4 id="a-导包：-1"><a href="#a-导包：-1" class="headerlink" title="a) 导包："></a>a) 导包：</h4><p>i. Spring：基本包、aop、aspects、jdbc、tx、test；</p>
<p>ii. Mybatis：mybatis</p>
<p>iii. 整合包：mybatis-spring</p>
<p>iv. 三方包：</p>
<ol>
<li><p>aopalliance</p>
</li>
<li><p>aspectj.weaver</p>
</li>
<li><p>c3p0</p>
</li>
<li><p>mchange-commons-java</p>
</li>
<li><p>mysql-connector-java</p>
</li>
</ol>
<h4 id="b-创建项目结构-package-：bean、service、mapper、test；"><a href="#b-创建项目结构-package-：bean、service、mapper、test；" class="headerlink" title="b) 创建项目结构(package)：bean、service、mapper、test；"></a>b) 创建项目结构(package)：bean、service、mapper、test；</h4><p><img src="https://github.com/ZephXu07/IMG/raw/master/ssm_spring_mybatis_txProjectStructure.png" alt="项目结构"></p>
<h4 id="c-创建配置文件：sqlMapperConfig、applicaitonContext"><a href="#c-创建配置文件：sqlMapperConfig、applicaitonContext" class="headerlink" title="c) 创建配置文件：sqlMapperConfig、applicaitonContext"></a>c) 创建配置文件：sqlMapperConfig、applicaitonContext</h4><p>sqlMapperConfig：</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version="1.0" encoding="UTF-8"?&gt;</span></span><br><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">configuration</span> <span class="meta-keyword">PUBLIC</span><span class="meta-string">"-//mybatis.org//DTD Config 3.0//EN"</span> <span class="meta-string">"http://mybatis.org/dtd/mybatis-3-config.dtd"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">configuration</span>&gt;</span>        </span><br><span class="line"><span class="tag">&lt;<span class="name">typeAliases</span>&gt;</span>             </span><br><span class="line">	<span class="tag">&lt;<span class="name">package</span> <span class="attr">name</span>=<span class="string">"com.zephxu.bean"</span>/&gt;</span>     </span><br><span class="line"><span class="tag">&lt;/<span class="name">typeAliases</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">configuration</span>&gt;</span></span><br></pre></td></tr></table></figure>



<p>applicaitonContext：</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version="1.0" encoding="UTF-8"?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">beans</span> <span class="attr">xmlns:xsi</span>=<span class="string">"http://www.w3.org/2001/XMLSchema-instance"</span> <span class="attr">xmlns</span>=<span class="string">"http://www.springframework.org/schema/beans"</span>    </span></span><br><span class="line"><span class="tag"><span class="attr">xmlns:context</span>=<span class="string">"http://www.springframework.org/schema/context"</span>       <span class="attr">xmlns:tx</span>=<span class="string">"http://www.springframework.org/schema/tx"</span> <span class="attr">xmlns:aop</span>=<span class="string">"http://www.springframework.org/schema/aop"</span> <span class="attr">xsi:schemaLocation</span>=<span class="string">"http://www.springframework.org/schema/beans       http://www.springframework.org/schema/beans/spring-beans.xsd        http://www.springframework.org/schema/contexthttp://www.springframework.org/schema/context/spring-context.xsd http://www.springframework.org/schema/tx        http://www.springframework.org/schema/tx/spring-tx.xsd http://www.springframework.org/schema/aop http://www.springframework.org/schema/aop/spring-aop.xsd"</span>&gt;</span> </span><br><span class="line"><span class="comment">&lt;!--数据源--&gt;</span>    </span><br><span class="line"><span class="tag">&lt;<span class="name">context:property-placeholder</span> <span class="attr">location</span>=<span class="string">"db.properties"</span>/&gt;</span></span><br><span class="line"><span class="comment">&lt;!--读取配置文件--&gt;</span>   </span><br><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">name</span>=<span class="string">"dataSource"</span> <span class="attr">class</span>=<span class="string">"com.mchange.v2.c3p0.ComboPooledDataSource"</span>&gt;</span><span class="comment">&lt;!--配置DataSource--&gt;</span>        </span><br><span class="line"><span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"driverClass"</span> <span class="attr">value</span>=<span class="string">"$&#123;jdbc.driverClass&#125;"</span>/&gt;</span>       </span><br><span class="line"><span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"jdbcUrl"</span> <span class="attr">value</span>=<span class="string">"$&#123;jdbc.jdbcUrl&#125;"</span>/&gt;</span> </span><br><span class="line"><span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"user"</span> <span class="attr">value</span>=<span class="string">"$&#123;jdbc.user&#125;"</span>/&gt;</span> </span><br><span class="line"><span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"password"</span> <span class="attr">value</span>=<span class="string">"$&#123;jdbc.password&#125;"</span>/&gt;</span>   </span><br><span class="line"><span class="tag">&lt;/<span class="name">bean</span>&gt;</span>    </span><br><span class="line"><span class="comment">&lt;!--mybatis--&gt;</span> </span><br><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">name</span>=<span class="string">"sqlSessionFactory"</span> <span class="attr">class</span>=<span class="string">"org.mybatis.spring.SqlSessionFactoryBean"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"dataSource"</span> <span class="attr">ref</span>=<span class="string">"dataSource"</span>/&gt;</span>        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"configLocation"</span> <span class="attr">value</span>=<span class="string">"classpath:sqlMapConfig.xml"</span>/&gt;</span> </span><br><span class="line"><span class="tag">&lt;/<span class="name">bean</span>&gt;</span>    </span><br><span class="line"><span class="comment">&lt;!--mapper工厂--&gt;</span>   </span><br><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">class</span>=<span class="string">"org.mybatis.spring.mapper.MapperScannerConfigurer"</span>&gt;</span>        </span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"basePackage"</span> <span class="attr">value</span>=<span class="string">"com.zephxu.mapper"</span>/&gt;</span> </span><br><span class="line"><span class="tag">&lt;/<span class="name">bean</span>&gt;</span>   </span><br><span class="line"><span class="comment">&lt;!--service--&gt;</span>   </span><br><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">name</span>=<span class="string">"accountService"</span> <span class="attr">class</span>=<span class="string">"com.zephxu.service.AccountServiceImpl"</span>/&gt;</span><span class="tag">&lt;/<span class="name">beans</span>&gt;</span></span><br></pre></td></tr></table></figure>



<h3 id="2、-创建测试用例：使用Mapper扫描开发，转账；"><a href="#2、-创建测试用例：使用Mapper扫描开发，转账；" class="headerlink" title="2、 创建测试用例：使用Mapper扫描开发，转账；"></a>2、 创建测试用例：使用Mapper扫描开发，转账；</h3><p>AccountMapper.xml：</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line">   <span class="meta">&lt;?xml version="1.0" encoding="UTF-8"?&gt;</span></span><br><span class="line">   <span class="meta">&lt;!DOCTYPE <span class="meta-keyword">mapper</span>        <span class="meta-keyword">PUBLIC</span><span class="meta-string">"-//mybatis.org//DTD Mapper 3.0//EN"</span>        <span class="meta-string">"http://mybatis.org/dtd/mybatis-3-mapper.dtd"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">mapper</span> <span class="attr">namespace</span>=<span class="string">"com.zephxu.mapper.AccountMapper"</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">update</span> <span class="attr">id</span>=<span class="string">"transferOutMoney"</span> <span class="attr">parameterType</span>=<span class="string">"Account"</span>&gt;</span>        </span><br><span class="line">       update account set money = money - #&#123;transferMoney&#125; where id = #&#123;id&#125;   </span><br><span class="line">   <span class="tag">&lt;/<span class="name">update</span>&gt;</span>    </span><br><span class="line">   <span class="tag">&lt;<span class="name">update</span> <span class="attr">id</span>=<span class="string">"transferInMoney"</span> <span class="attr">parameterType</span>=<span class="string">"Account"</span>&gt;</span> </span><br><span class="line">   updat e account set money = money + #&#123;transferMoney&#125; where id = #&#123;id&#125;    	</span><br><span class="line">   <span class="tag">&lt;/<span class="name">update</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">mapper</span>&gt;</span></span><br></pre></td></tr></table></figure>



<h3 id="3、-在service中加入事务：利用Spring-aop事务解决转账异常问题；"><a href="#3、-在service中加入事务：利用Spring-aop事务解决转账异常问题；" class="headerlink" title="3、 在service中加入事务：利用Spring-aop事务解决转账异常问题；"></a>3、 在service中加入事务：利用Spring-aop事务解决转账异常问题；</h3><p>xml：</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!--事务核心管理器--&gt;</span>    </span><br><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">name</span>=<span class="string">"transactionManager"</span> <span class="attr">class</span>=<span class="string">"org.springframework.jdbc.datasource.DataSourceTransactionManager"</span>&gt;</span>        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"dataSource"</span> <span class="attr">ref</span>=<span class="string">"dataSource"</span>/&gt;</span>   </span><br><span class="line"><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!--    事务通知--&gt;</span>  </span><br><span class="line"><span class="tag">&lt;<span class="name">tx:advice</span> <span class="attr">id</span>=<span class="string">"txAdvice"</span> <span class="attr">transaction-manager</span>=<span class="string">"transactionManager"</span>&gt;</span>        <span class="tag">&lt;<span class="name">tx:attributes</span>&gt;</span>            </span><br><span class="line"><span class="tag">&lt;<span class="name">tx:method</span> <span class="attr">name</span>=<span class="string">"update*"</span> <span class="attr">isolation</span>=<span class="string">"DEFAULT"</span> <span class="attr">propagation</span>=<span class="string">"REQUIRED"</span> <span class="attr">read-only</span>=<span class="string">"false"</span>/&gt;</span>        </span><br><span class="line"><span class="tag">&lt;/<span class="name">tx:attributes</span>&gt;</span> </span><br><span class="line"><span class="tag">&lt;/<span class="name">tx:advice</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!--    aop--&gt;</span>   </span><br><span class="line"><span class="tag">&lt;<span class="name">aop:config</span>&gt;</span>        </span><br><span class="line"><span class="tag">&lt;<span class="name">aop:pointcut</span> <span class="attr">id</span>=<span class="string">"txPc"</span> <span class="attr">expression</span>=<span class="string">"execution(* com.zephxu.service.*ServiceImpl.*(..))"</span>/&gt;</span> </span><br><span class="line"><span class="tag">&lt;<span class="name">aop:advisor</span> <span class="attr">advice-ref</span>=<span class="string">"txAdvice"</span> <span class="attr">pointcut-ref</span>=<span class="string">"txPc"</span>/&gt;</span>  </span><br><span class="line"><span class="tag">&lt;/<span class="name">aop:config</span>&gt;</span></span><br></pre></td></tr></table></figure>



<p>注解：<a href="#aop">如上</a></p>
<p><strong>BUG：Invalid bound statement (not found):<br>com.zephxu.mapper.AccountMapper.transferOutMoney</strong></p>
<p><strong>原因：maven项目，xml文件不在resource目录下，而在java目录下，需要在pom.xml中加上</strong></p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">build</span>&gt;</span>   </span><br><span class="line"><span class="tag">&lt;<span class="name">resources</span>&gt;</span>        </span><br><span class="line">	<span class="tag">&lt;<span class="name">resource</span>&gt;</span>   </span><br><span class="line">		<span class="tag">&lt;<span class="name">directory</span>&gt;</span>src/main/java<span class="tag">&lt;/<span class="name">directory</span>&gt;</span> </span><br><span class="line">      <span class="tag">&lt;<span class="name">includes</span>&gt;</span> </span><br><span class="line">      	<span class="tag">&lt;<span class="name">include</span>&gt;</span>**/*.xml<span class="tag">&lt;/<span class="name">include</span>&gt;</span>   </span><br><span class="line">      <span class="tag">&lt;/<span class="name">includes</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;/<span class="name">resource</span>&gt;</span></span><br><span class="line"> <span class="tag">&lt;/<span class="name">resources</span>&gt;</span></span><br><span class="line"> <span class="tag">&lt;/<span class="name">build</span>&gt;</span></span><br></pre></td></tr></table></figure>



<p><a href="https://blog.csdn.net/ccoran/article/details/85044096" target="_blank" rel="noopener">解决方法来源</a></p>
<h2 id="part9、未完待续……"><a href="#part9、未完待续……" class="headerlink" title="part9、未完待续…… "></a>part9、未完待续…… </h2>]]></content>
      <tags>
        <tag>笔记</tag>
        <tag>ssm</tag>
        <tag>java</tag>
        <tag>spring</tag>
      </tags>
  </entry>
  <entry>
    <title>ssm框架简介</title>
    <url>/2020/01/23/ssm%E6%A1%86%E6%9E%B6%E7%AE%80%E4%BB%8B/</url>
    <content><![CDATA[<h1 id="SSM框架简介个人笔记"><a href="#SSM框架简介个人笔记" class="headerlink" title="SSM框架简介个人笔记"></a>SSM框架简介个人笔记</h1><h1 id="SSM框架简介"><a href="#SSM框架简介" class="headerlink" title="SSM框架简介 "></a>SSM框架简介 </h1><p><a href="http://www.sikiedu.com/my/course/258/material" target="_blank" rel="noopener">来源</a></p>
<h2 id="why框架"><a href="#why框架" class="headerlink" title="why框架"></a>why框架</h2><p>框架，framework，半成品，舞台，使用者表演。其完成了底层基础工作，使用者关注项目本身，框架有稳定，易用，安全等特性。</p>
<a id="more"></a>

<h2 id="what-SSM框架"><a href="#what-SSM框架" class="headerlink" title="what SSM框架 "></a>what SSM框架 </h2><p>SSM，Spring+SpringMVC+MyBatis的简称，相比于SSH（Struts+Spring+Hibernate），更加轻量化和灵活，是目前比较主流的JavaWeb开发框架。其优点：简化原始开发流程，轻量级易上手，使用人群多，解决方案多，稳定、安全。</p>
<h2 id="SSM-is-made-of"><a href="#SSM-is-made-of" class="headerlink" title="SSM is made of "></a>SSM is made of </h2><p> <strong>Spring</strong><br>：容器大管家，可管理项目中对象的生命周期，同时AOP事务大大的优化了事务的操作等，轻量级的控制反转（IoC）和面向切面（AOP）的容器框架。</p>
<p> <strong>SpringMVC</strong><br>：所属web层，取代了servlet技术负责处理请求，成为连接前端的桥梁，属于SpringFrameWork的后续产品，分离了控制器、模型对象、分派器以及处理程序对象的角色。</p>
<p> <strong>MyBatis</strong><br>：属dao层，简化了数据库操作，使用动态sql让程序员只需要关注sql语句。MyBatis一个基于Java的持久层框架,包括SQLMaps和DataAccess<br>Objects（DAO）MyBatis<br>消除了几乎所有的JDBC代码和参数的手工设置以及结果集的检索。MyBatis使用简单的<br>XML或注解用于配置和原始映射，将接口和Java 的POJOs（Plain Old Java<br>Objects，普通的 Java对象）映射成数据库中的记录。</p>
<h2 id="SSM框架在web项目中所处的位置"><a href="#SSM框架在web项目中所处的位置" class="headerlink" title="SSM框架在web项目中所处的位置 "></a>SSM框架在web项目中所处的位置 </h2><p><img src="https://github.com/ZephXu07/IMG/raw/master/ssm%E7%AE%80%E4%BB%8B1.png" alt="1"></p>
<h2 id="SSM学习路线"><a href="#SSM学习路线" class="headerlink" title="SSM学习路线 "></a>SSM学习路线 </h2><p> <strong>第一部分：使用Mybatis取代Jdbc、dbutils等原始方法操作数据库；</strong></p>
<p><strong>第二部分：学习Spring框架理解IOC、AOP思想，使用Spring来管理对象、事务；</strong></p>
<p><strong>第三部分：学习SpringMVC框架取代Servlet技术，整合三大框架完成超市货物后台管理案例；</strong></p>
<h2 id="学习SSM框架预备知识"><a href="#学习SSM框架预备知识" class="headerlink" title="学习SSM框架预备知识 "></a>学习SSM框架预备知识 </h2><p> <strong>1、</strong> <strong>Java基础；</strong></p>
<p> <strong>2、</strong> <strong>JavaWeb技术；</strong></p>
]]></content>
      <tags>
        <tag>笔记</tag>
        <tag>ssm</tag>
        <tag>java</tag>
      </tags>
  </entry>
  <entry>
    <title>maven笔记</title>
    <url>/2020/01/23/maven%E7%AC%94%E8%AE%B0/</url>
    <content><![CDATA[<h1 id="maven笔记"><a href="#maven笔记" class="headerlink" title="maven笔记 "></a>maven笔记 </h1><p><strong>Maven</strong>项目管理</p>
<p><a href="http://www.sikiedu.com/course/284/material/14783/download" target="_blank" rel="noopener">siki</a></p>
<p><strong>Maven</strong>是什么？<br>Maven是Apache下的项目管理工具，它由纯Java语言开发，可以帮助我们更方便的管理和构建Java项目。</p>
<a id="more"></a>

<p><strong>为什么要使用Maven？</strong></p>
<p>1、 jar包管理：</p>
<p>a)<br>从Maven中央仓库获取标准的规范的jar包以及相关依赖的jar包，避免自己下载到错误的jar包；</p>
<p>b) 本地仓库统一管理jar包，使jar包与项目分离，减轻项目体积。</p>
<p>2、 maven是跨平台的可以在window、linux上使用。</p>
<p>3、 清晰的项目结构；</p>
<p>4、 多工程开发，将模块拆分成若干工程，利于团队协作开发。</p>
<p>5、<br>一键构建项目：使用命令可以对项目进行一键构建，操作系统中无需安装eclipse和tomcat。</p>
<p><strong>我能从这门课中学到什么？</strong></p>
<p>1、 了解Maven和它的优点；</p>
<p>2、 掌握Maven项目配置、命令；</p>
<p>3、 使用Maven+Tomcat进行热部署；</p>
<p>4、 使用Maven集成SSM框架；</p>
<p>5、 使用Maven分模块开发；</p>
<p>6、 学会Maven私服的搭建和使用；</p>
<p><a href="http://maven.apache.org/download.cgi" target="_blank" rel="noopener">Maven从哪获取？</a></p>
<p><strong>开始学习Maven项目管理工具</strong></p>
<p>Part.1 Maven入门：</p>
<p>1、 下载、安装、配置环境变量Maven；</p>
<p>a) 安装JDK 1.8；</p>
<p>b) 配置环境变量；</p>
<p> i. win + r 打开运行窗口 或者 进入cmd命令窗口；</p>
<p> ii. 输入sysdm.cpl打开系统属性 -&gt; 高级 -&gt; 环境变量；</p>
<p> iii. 新建系统变量，变量名：MAVEN_HOME，变量值：Maven安装路径；</p>
<p> iv. 在Path下追加一条属性指向Maven的bin目录 %MAVEN_HOME%/bin</p>
<p>2、 Maven的优点：</p>
<p>a) jar包管理：依赖管理</p>
<p> i.<br>从Maven中央仓库获取标准的规范的jar包以及相关依赖的jar包，避免自己下载到错误的jar包；</p>
<p> ii. 本地仓库统一管理jar包，使jar包与项目分离，减轻项目体积。</p>
<p><img src="https://github.com/ZephXu07/IMG/raw/master/1.png?raw=true" alt="1"></p>
<p>(Maven项目获取jar包的方式)</p>
<p> iii. Maven项目通过坐标的方式从本地仓库获取jar包；</p>
<p>\1. 坐标：由公司/组织名(groupId) + 项目名/子项目名(artifactId) +<br>版本号(version)组成；</p>
<p>\2. 本地仓库：存放很多jar包，供Maven项目使用；</p>
<p>\3.<br>Maven通过建立本地仓库索引，可以快速的找到符合要求的jar包，从而解决效率问题；</p>
<p>\4. 多个Maven项目都可以从本地仓库获取jar包；</p>
<p>\5. 设置本地仓库：maven根目录 -&gt; conf -&gt;<br>settings.xml，将localRepository标签中的路径替换成自己本地仓库的路径；</p>
<p> iv. Maven三种仓库概念：本地仓库、远程仓库、中央仓库</p>
<p><img src="https://github.com/ZephXu07/IMG/raw/master/2.png?raw=true" alt="2"></p>
<p>(Maven三种仓库概念)</p>
<p> v. 设置阿里云Maven仓库镜像：</p>
<p>\1. 在settings.xml文件中的mirrors下添加mirror标签；</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">mirror</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">id</span>&gt;</span>alimaven<span class="tag">&lt;/<span class="name">id</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">name</span>&gt;</span>aliyunmaven<span class="tag">&lt;/<span class="name">name</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">url</span>&gt;</span>http://maven.aliyun.com/nexus/content/groups/public/<span class="tag">&lt;/<span class="name">url</span>&gt;</span>			</span><br><span class="line">	<span class="tag">&lt;<span class="name">mirrorOf</span>&gt;</span>central<span class="tag">&lt;/<span class="name">mirrorOf</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">mirror</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>b) maven由纯Java语言开发，是跨平台的可以在window、linux、mac上使用。</p>
<p>c) 清晰的项目结构；</p>
<p>d)<br>使用Maven将大型项目按照模块拆分成若干工程，不同的团队维护各自的工程，可大大的提升开发效率；</p>
<p> i. 大型商城项目按业务分成商品管理、用户管理、订单管理等等模块。</p>
<p><img src="https://github.com/ZephXu07/IMG/raw/master/3.png?raw=true" alt="3"></p>
<p>(大型项目，分模块开发)</p>
<p> ii.<br>中小型项目按照传统项目分为Web、Service、Dao层，依照员工自身的业务能力分配工作。</p>
<p><img src="https://github.com/ZephXu07/IMG/raw/master/4.png" alt="4"></p>
<p>(中小型项目，分层开发)</p>
<p>e)<br>一键构建项目：使用命令可以对项目进行一键构建，操作系统中无需安装eclipse和tomcat。</p>
<p>3、 Maven常用命令：</p>
<p>a) clean： 清理，编译后的目录；</p>
<p>b) compile： 编译，只编译main目录，不编译test中的代码；</p>
<p>c) test-compile：编译test目录中的代码；</p>
<p>d) test： 运行test里边的代码；</p>
<p>e) package： 打包</p>
<p> i. java项目-&gt;打成jar包；</p>
<p> ii. web项目-&gt;打成war包；</p>
<p>f)<br>install：发布项目到本地仓库，用在打jar包上，打成jar包可以被其他项目使用；</p>
<p>g) tomcat:run：一键构建项目；</p>
<p>4、 Maven命令的生命周期：</p>
<p>a) Clean 生命周期：clean；</p>
<p>b) Default 生命周期：compile、test-compile、test、package、install</p>
<p>c) Site 生命周期：site命令，生成项目描述文档静态页；</p>
<p>d) 不同的生命周期可以一起执行，例如先clean 再compile；</p>
<p>5、 Maven命令的执行顺序：</p>
<p>a) 在相同生命周期中的命令才会受执行顺序的影响；</p>
<p>b) Default生命周期中的命令执行顺序：</p>
<p>compile &lt;- test-compile &lt;- test &lt;- package &lt;- install；</p>
<p>Part.2 Maven入门程序：</p>
<p>Ø 入门程序：</p>
<p>1、 创建Maven项目；</p>
<p>2、 在src -&gt; main -&gt; webapp下创建WEB-INF目录，并在目录下创建web.xml；</p>
<p>3、 修改Maven默认编译级别：</p>
<p>a) 全局编译级别 -&gt; 修改settings.xml</p>
<p>b) 项目级别修改 -&gt; 项目对应的pom.xml</p>
<p>4、 在Java Resourcese -&gt; src/main/java下写代码，创建包和Servlet；</p>
<p>5、 添加servlet-api：</p>
<p>6、 在servlet-api中添加scope标签，值为：proviede；</p>
<p>a)<br>如果不加此标签有很大几率报错，因为tomcat中也有servlet-api的包导致冲突；</p>
<p>7、<br>运行：发生错误，原因是maven默认使用tomcat6.xx，不支持@WebServle注解；</p>
<p>a) 解决方案1：需要去web.xml中配置Servlet;</p>
<p>b) 解决方案2：配置高版本tomcat插件；</p>
<p>8、 最后测试，启动服务，在地址栏输入请求，显示结果；</p>
<p>Ø 使用tomcat7插件运行项目；</p>
<p>Ø<br>Scope依赖作用域也可称作依赖范围：maven中的依赖，会根据程序所处的阶段和场景发生变化，所以maven用scope属性来做限制；</p>
<p>a) compile（默认值）：在编译、运行、测试、打包都有效；</p>
<p>b) provided：编译、测试时有效，运行、打包无效；</p>
<p>c) test：仅在测试时有效；</p>
<p>d) runtime：测试、运行、打包时有效；</p>
<p>e)<br>system：不推荐使用，使用system作用域不会去本地仓库寻找依赖，要指定本地路径；</p>
<p><img src="https://github.com/ZephXu07/IMG/raw/master/5.png" alt="5"></p>
<p>（依赖关系中作用域说明）</p>
<p><strong>Part.3 Maven 3.5.4 + tomcat 8.5.32</strong> <strong>热部署：</strong></p>
<p> 热部署：在tomcat运行时将项目部署上去；</p>
<p>1、 开启tomcat热部署：</p>
<p>a) 修改tomcat -&gt; conf-&gt; tomcat-users.xml 配置文件；</p>
<p>b) 在tomcat-users标签中加入以下代码：</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">role</span> <span class="attr">rolename</span>=<span class="string">"manager-gui"</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">role</span> <span class="attr">rolename</span>=<span class="string">"manager-script"</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">user</span> <span class="attr">username</span>=<span class="string">"joey"</span> <span class="attr">password</span>=<span class="string">"123123"</span> <span class="attr">roles</span>=<span class="string">"manager-gui, manager-script"</span>/&gt;</span></span><br></pre></td></tr></table></figure>

<p>c) 启动tomcat；</p>
<p>d) 修改项目中pom.xml，在tomcat7的插件上添加以下代码：</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">configuration</span>&gt;</span> </span><br><span class="line">	<span class="tag">&lt;<span class="name">url</span>&gt;</span>http://localhost:8080/manager/text<span class="tag">&lt;/<span class="name">url</span>&gt;</span> </span><br><span class="line">	<span class="tag">&lt;<span class="name">username</span>&gt;</span>joey<span class="tag">&lt;/<span class="name">username</span>&gt;</span> </span><br><span class="line">	<span class="tag">&lt;<span class="name">password</span>&gt;</span>123123<span class="tag">&lt;/<span class="name">password</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">configuration</span>&gt;</span>          |</span><br></pre></td></tr></table></figure>

<p>e) 右键项目-&gt; run as -&gt; maven build…<br>在goals中使用tomcat7:deploy或tomcat7:redeploy来进行热部署；</p>
<p> i. tomcat7:deploy，第一次部署时使用。</p>
<p> ii. tomcat7:redeploy，非第一次部署时使用。</p>
<p>f) 部署完毕，打开浏览器测试；</p>
<p><strong>Part.4 Maven</strong> <strong>整合SSM框架 ：</strong></p>
<p>1、 Maven+SSM框架整合；</p>
<p>a) 加入SSM框架所需的依赖；</p>
<p>b) 配置插件；</p>
<p>c) 导入SSM框架所需配置文件；</p>
<p>d) 配置Maven Resources资源放行：</p>
<p> i.<br>因为Maven会把src/main/java下的*.java文件文件编译放到target/classes目录目录中，但这目录中的其他文件会被忽略；</p>
<p> ii. Mybatis Mapper映射文件也要放在src/main/java下，所以不能忽略；</p>
<p> iii. 因此我们需要对src/main/java下的配置文件进行过滤，不能被忽略；</p>
<p> iv. 利用Maven中的Resources标签可以进行配置；</p>
<p>2、 测试；</p>
<p>a) 新建名为User的bean对象，有username，password俩字段；</p>
<p>b) 新建login.jsp，可以输入用户名和密码，通过表单提交到后台；</p>
<p>c) 后台接受用户名和密码，跳转页面，并显示；</p>
<p>3、 读取数据库显示游戏列表；</p>
<p>a) 导入item_info表；</p>
<p>b) 在login.jsp中增加button，点击后跳转页面，显示列表；</p>
<p><strong>Part.5 Maven</strong> <strong>模块化开发 ：</strong></p>
<p><img src="https://github.com/ZephXu07/IMG/raw/master/6.png" alt="6"></p>
<p>（Maven模块化开发项目依赖关系）</p>
<p>Ø 需求：将Maven-SSM项目以层为单位拆分，按模块开发；</p>
<p>1、 创建父项目，在父项目中加入依赖；</p>
<p>2、 创建mapper层子项目继承父项目；</p>
<p>3、 子项目可以继承父项目的依赖；</p>
<p>4、 利用junit测试mapper模块项目；</p>
<p>5、 Maven的依赖传递，与依赖版本管理；</p>
<p>a) 依赖传递：添加依赖的jar包如果还依赖其他jar包，则在添加时会一起引入；</p>
<p>b) 依赖冲突：Base-project由3个子项目组成，A-project依赖Tools.jar<br>1.0版本，C-project依赖Tools.jar<br>2.0版本，根据依赖传递机制，Base-project将同时依赖Tools.jar两个版本，但这造成了冲突。根据路径最近获胜策略，该项目最终依赖Tools.jar<br>1.0，导致C-project无法调用getAll方法从而报错，因此我们要手动选择一个适合项目的版本。</p>
<p><img src="https://github.com/ZephXu07/IMG/raw/master/7.png" alt="7"></p>
<p>（Maven模块化开发项目依赖关系）</p>
<p>c) 解决依赖冲突的办法：</p>
<p> i. 直接声明：直接添加Tools.jar 2.0依赖；</p>
<p> ii.<br>排除：使用<code>&lt;dependency&gt;</code>标签中的<code>&lt;exclusions&gt;</code>标签排除A-project中的Tools.jar<br>1.0依赖；</p>
<p> iii. 依赖管理，版本锁定：<code>&lt;dependencyManagement&gt;</code></p>
<p>\1.<br><code>&lt;dependencyManagement&gt;</code>是依赖管理，该标签下添加的<code>&lt;dependencies&gt;</code>可以声明依赖，但是不会引入jar包；</p>
<p>\2.<br>只有声明在<code>&lt;project&gt;</code>标签下<code>&lt;dependencies&gt;</code>中的依赖才会被引用到项目中；</p>
<p>\3.<br>在<code>&lt;dependencyManagement&gt;</code>下添加jar包坐标后，<code>&lt;project&gt;</code>标签下<code>&lt;dependencies&gt;</code>标签的版本号可以忽略不写；</p>
<p>\4.<br><code>&lt; properties&gt;</code>标签可以自定义版本号，用el表达式赋值给<code>&lt;version&gt;</code>标签；</p>
<p>\5. 统一管理jar包版本，修改方便；</p>
<p>6、 创建scervice模块项目，利用junit测试service模块项目；</p>
<p>7、 依赖作用域对依赖传递的影响；</p>
<p>8、 创建controller模块项目，运行程序；</p>
<p><strong>Part.6 Maven</strong> <strong>远程仓库Nexus（私服） ：</strong></p>
<p>Ø Nexus获取与配置：</p>
<p>1、 下载Nexus<br><a href="https://www.sonatype.com/download-oss-sonatype?hsCtaTracking=920dd7b5-7ef3-47fe-9600-10fecad8aa32|f59d5f10-099f-4c66-a622-0254373f4a92" target="_blank" rel="noopener">点击我下载</a></p>
<p>2、 Nexus安装，解压缩到本地即可；</p>
<p>3、<br>Nexus安装目录下nexus-3.14.0-04/etc/nexus-default.properties配置表中可以修改以下属性：</p>
<p>a) application-host : Nexus服务监听的主机；</p>
<p>b) application-port: Nexus服务监听的端口；</p>
<p>c) nexus-context-path : Nexus服务的上下文路径；</p>
<p>4、 Nexus服务配置和启动：</p>
<p>a) 以管理员身份运行cmd -&gt;<br>进入到nexus安装目录../nexus-3.14.0-04/bin目录下；</p>
<p>b) 在cmd中运行 nexus.exe/install 可以安装nexus服务；</p>
<p>c) 在cmd中运行 nexus.exe/start 可以启动nexus服务；</p>
<p>d) 在cmd中运行 nexus.exe/stop 可以停止nexus服务；</p>
<p>5、 登录Nexus：</p>
<p>a)<br>启动服务后，根据nexus-default.properties的配置进行登录，如果没有修改，可以<a href="http://localhost:8081" target="_blank" rel="noopener">点击此处</a>来登录；</p>
<p>b) 默认用户名是admin，密码是admin123；</p>
<p>6、 仓库类型：nexus有多种仓库类型：</p>
<p><img src="https://github.com/ZephXu07/IMG/raw/master/8.png" alt="8"></p>
<p>（Nexus仓库类型介绍）</p>
<p>Ø Nexus使用：</p>
<p>需求：将项目中的mapper.jar包提交到远程仓库中，<br>使service项目从远程仓库获取；</p>
<p>² 上传jar包到远程仓库；</p>
<p>1、 在Maven的 setting.xml中配置nexus访问权限；</p>
<p>2、 在项目的pom.xml中配置nexus仓库位置；</p>
<p>3、 以上2个配置标签中的id要一致；</p>
<p>4、 使用deploy命令将项目打包，发布到nexus中；</p>
<p>5、 检查仓库中是否有上传好的jar包；</p>
<p>² 从远程仓库下载jar包：</p>
<p>1、 使用profiles标签在Maven的setting.xml中配置仓库位置；</p>
<p>2、 激活profiles标签，使它发生作用；</p>
<p>3、 如果之前打包了，删除本地仓库下的mapper.jar；</p>
<p>4、 关闭mapper子项目，让service子项目依赖mapper.jar包；</p>
<p>5、 更新项目，从远程仓库中获取mapper.jar；</p>
<p>² 使用自定义用户和自定义仓库进行上传和下载jar包：</p>
<p>1、 建议先将管理员密码修改；</p>
<p>2、 在Roles中可以增加用户权限组，里边可以自定义用户权限；</p>
<p>3、 在Users中可以增加用户，分配设置好的权限；</p>
<p>4、 在Repositories中新建仓库；</p>
<p>a) name：仓库名称；</p>
<p>b) version pollcy：版本策略；</p>
<p> i. Release：发行版；</p>
<p> ii. Snapshot：快照版；</p>
<p> iii. Mixed：混合模式；</p>
<p>c) Layout pollcy：布局策略；</p>
<p> i. Strict：严格；</p>
<p> ii. Permissive：宽松；</p>
<p>d) Deployment pollcy：部署策略；</p>
<p> i. Allow redeploy：允许重新部署；</p>
<p> ii. Disable redeploy：禁止重新部署；</p>
<p> iii. Read-only：只读；</p>
<p>5、 修改配置，将jar包上传到自定义仓库，然后从自定义仓库下载jar包；a</p>
]]></content>
      <tags>
        <tag>笔记</tag>
        <tag>maven</tag>
      </tags>
  </entry>
  <entry>
    <title>Hugo从零搭建博客</title>
    <url>/2020/01/23/Hugo%E4%BB%8E%E9%9B%B6%E6%90%AD%E5%BB%BA%E5%8D%9A%E5%AE%A2/</url>
    <content><![CDATA[<h1 id="hugo版从零搭建个人博客"><a href="#hugo版从零搭建个人博客" class="headerlink" title="hugo版从零搭建个人博客"></a>hugo版从零搭建个人博客</h1><a id="more"></a>

<p><a href="https://www.bilibili.com/video/av51574688" target="_blank" rel="noopener">B站教程</a></p>
<blockquote>
<p>1：在<a href="https://github.com/gohugoio/hugo/releases" target="_blank" rel="noopener">此处</a>地址下找到Windows压缩文件下载</p>
<p>2:如何看hugo安装成没成功，打开cmd，输入hugo version</p>
<p>3：安装成功后，用Hugo来创建自己的博客，命令：hugo new site myblog<br>注：myblog为文件夹名字</p>
<p>4:下载设置主题，去<a href="https://themes.gohugo.io/" target="_blank" rel="noopener">主题网址</a>选择自己喜欢的主题进行下载</p>
<p>5.下载主题<br><img src="https://github.com/ZephXu07/IMG/raw/master/1033328-20190513110131643-1221757335.pn" alt="img"></p>
<p>6.启动博客命令，输入 hugo server -t m10c –buildDrafts</p>
<p>7.创建文章，在根目录下创建，hugo new post/（名字）.md</p>
<p>8.md文档语法：</p>
<p><a href="https://www.jianshu.com/p/399e5a3c7cc5" target="_blank" rel="noopener">md语法</a></p>
<p>9.部署远端：</p>
<blockquote>
<p>1.仓库：<img src="https://github.com/ZephXu07/IMG/raw/master/UC%E6%88%AA%E5%9B%BE20190822213904.png" alt="img3"></p>
<p>2.仓库已经有了，但是个空仓库，接下来敲命令hugo –theme=m10c<br>–baseUrl=”地址” –buildDrafts，</p>
<p>3.成功后会在根目录下生成一个public文件，把这个public传到github仓库</p>
<blockquote>
<p>cd public/</p>
<p>git init</p>
<p>git add .</p>
<p>git commit -m”相关信息”</p>
<p>git remote add origin<br><a href="https://github.com/ZephXu07/zephxu07.github.io.git" target="_blank" rel="noopener">https://github.com/ZephXu07/zephxu07.github.io.git</a></p>
<p>git push -u origin master</p>
</blockquote>
</blockquote>
</blockquote>
<blockquote>
<blockquote>
<p>4.访问：<a href="https://zephxu07.github.io/">个人博客</a></p>
</blockquote>
</blockquote>
]]></content>
      <tags>
        <tag>笔记</tag>
      </tags>
  </entry>
  <entry>
    <title>Hexo从零搭建博客</title>
    <url>/2020/01/23/Hexo%E4%BB%8E%E9%9B%B6%E6%90%AD%E5%BB%BA%E5%8D%9A%E5%AE%A2/</url>
    <content><![CDATA[<h1 id="hexo版从零搭建个人博客"><a href="#hexo版从零搭建个人博客" class="headerlink" title="hexo版从零搭建个人博客"></a>hexo版从零搭建个人博客</h1><a id="more"></a>

<blockquote>
<blockquote>
<h1 id="从零搭建自己的博客-hexo版"><a href="#从零搭建自己的博客-hexo版" class="headerlink" title="从零搭建自己的博客 hexo版"></a>从零搭建自己的博客 hexo版</h1><p><a href="https://www.bilibili.com/video/av44544186" target="_blank" rel="noopener">B站教程</a></p>
<h2 id="准备：Git-Node-js"><a href="#准备：Git-Node-js" class="headerlink" title="准备：Git Node.js"></a>准备：Git Node.js</h2><h2 id="以下全在DOS窗口执行"><a href="#以下全在DOS窗口执行" class="headerlink" title="(以下全在DOS窗口执行)"></a>(以下全在DOS窗口执行)</h2><h2 id="安装npm：npm-install-g-cnpm-–registry-https-registry-npm-taobao-org-（安装镜像提速）"><a href="#安装npm：npm-install-g-cnpm-–registry-https-registry-npm-taobao-org-（安装镜像提速）" class="headerlink" title="安装npm：npm install -g cnpm –registry=https://registry.npm.taobao.org （安装镜像提速）"></a>安装npm：npm install -g cnpm –registry=<a href="https://registry.npm.taobao.org" target="_blank" rel="noopener">https://registry.npm.taobao.org</a> （安装镜像提速）</h2><h2 id="安装hexo：npm-install-g-hexo-cli"><a href="#安装hexo：npm-install-g-hexo-cli" class="headerlink" title="安装hexo：npm install -g hexo-cli"></a>安装hexo：npm install -g hexo-cli</h2><h2 id="准备博客目录blog：-出错可直接删除重新开始"><a href="#准备博客目录blog：-出错可直接删除重新开始" class="headerlink" title="准备博客目录blog：(出错可直接删除重新开始)"></a>准备博客目录blog：(出错可直接删除重新开始)</h2><blockquote>
<p>1.初始化： hexo init 生成各种文件</p>
<p>2.启动： hexo s <a href="http://localhost:4000/" target="_blank" rel="noopener">本地访问</a></p>
<p>3.写博客： hexo n “标题” 自动生成并在blog下，格式为：.md</p>
</blockquote>
<blockquote>
<blockquote>
<p>md语法：<a href="https://www.jianshu.com/p/399e5a3c7cc" target="_blank" rel="noopener">简书</a></p>
</blockquote>
</blockquote>
<blockquote>
<p>4.清理： hexo clean</p>
<p>5.生成： hexo g</p>
</blockquote>
<h2 id="部署到GitHub上"><a href="#部署到GitHub上" class="headerlink" title="部署到GitHub上"></a>部署到GitHub上</h2><blockquote>
<p>1.创建仓库：用户部署个人博客的github仓库的命名需符合规范：</p>
</blockquote>
<blockquote>
<blockquote>
<p>用户名 + .github.io</p>
</blockquote>
</blockquote>
<blockquote>
<p>2.git部署插件：npm install hexo-deployer-git –save</p>
<ul>
<li>npm audit fix</li>
<li>npm audit fix –force</li>
</ul>
<p>3.设置 _config.yml文件</p>
<blockquote>
<p>最后面增加配置：<img src="https://github.com/ZephXu07/IMG/raw/master/UC%E6%88%AA%E5%9B%BE20190821141914.png" alt="img1"></p>
</blockquote>
</blockquote>
<blockquote>
<blockquote>
<ul>
<li>三个冒号后面需要一个空格！！！！！！！！！</li>
</ul>
</blockquote>
<p>4.部署到远端： hexo d</p>
</blockquote>
<h2 id="更换主题（演示）主题网站"><a href="#更换主题（演示）主题网站" class="headerlink" title="更换主题（演示）主题网站"></a>更换主题（演示）<a href="https://hexo.io/themes/" target="_blank" rel="noopener">主题网站</a></h2><blockquote>
<p>1.git clone他人主题： git clone https://…… themes（主题存储文件夹）/（主题名）（链接）</p>
<blockquote>
<p>git clone 慢，两种方法：</p>
<blockquote>
<p><a href="https://blog.csdn.net/TeFuirnever/article/details/99110367" target="_blank" rel="noopener">第一种</a></p>
<p><a href="https://blog.csdn.net/zhouchangyu1221/article/details/86613081" target="_blank" rel="noopener">第二种</a></p>
</blockquote>
</blockquote>
</blockquote>
<blockquote>
<p>2.修改_config.yml 配置：<img src="https://github.com/ZephXu07/IMG/raw/master/UC%E6%88%AA%E5%9B%BE20190821145114.png" alt="img2"></p>
<p>冒号后面可能也需要空格！！！！！！！！！！！！！！！！</p>
<p>3.后续操作：</p>
<blockquote>
<p>hexo clean</p>
<p>hexo g</p>
<p>hexo s</p>
<p>本地停止（ctrl + c）</p>
<p>hexo d</p>
</blockquote>
</blockquote>
</blockquote>
</blockquote>
<h2 id="修改"><a href="#修改" class="headerlink" title="修改"></a>修改</h2><ul>
<li><p>缺失模块。<br>1、请确保node版本大于6.2<br>2、在博客根目录（注意不是yilia根目录）执行以下命令：<br>npm i hexo-generator-json-content –save</p>
</li>
<li><p>3、在根目录_config.yml里添加配置</p>
<figure class="highlight yml"><table><tr><td class="code"><pre><span class="line"><span class="attr">jsonContent:</span></span><br><span class="line">  <span class="attr">meta:</span> <span class="literal">false</span></span><br><span class="line">  <span class="attr">pages:</span> <span class="literal">false</span></span><br><span class="line">  <span class="attr">posts:</span></span><br><span class="line">    <span class="attr">title:</span> <span class="literal">true</span></span><br><span class="line">    <span class="attr">date:</span> <span class="literal">true</span></span><br><span class="line">    <span class="attr">path:</span> <span class="literal">true</span></span><br><span class="line">    <span class="attr">text:</span> <span class="literal">false</span></span><br><span class="line">    <span class="attr">raw:</span> <span class="literal">false</span></span><br><span class="line">    <span class="attr">content:</span> <span class="literal">false</span></span><br><span class="line">    <span class="attr">slug:</span> <span class="literal">false</span></span><br><span class="line">    <span class="attr">updated:</span> <span class="literal">false</span></span><br><span class="line">    <span class="attr">comments:</span> <span class="literal">false</span></span><br><span class="line">    <span class="attr">link:</span> <span class="literal">false</span></span><br><span class="line">    <span class="attr">permalink:</span> <span class="literal">false</span></span><br><span class="line">    <span class="attr">excerpt:</span> <span class="literal">false</span></span><br><span class="line">    <span class="attr">categories:</span> <span class="literal">false</span></span><br><span class="line">    <span class="attr">tags:</span> <span class="literal">true</span></span><br></pre></td></tr></table></figure>





</li>
</ul>
]]></content>
      <tags>
        <tag>笔记</tag>
      </tags>
  </entry>
  <entry>
    <title>MyBatis笔记</title>
    <url>/2020/01/23/MyBatis%E7%AC%94%E8%AE%B0/</url>
    <content><![CDATA[<h1 id="MyBatis笔记"><a href="#MyBatis笔记" class="headerlink" title="MyBatis笔记"></a>MyBatis笔记</h1><h2 id="SSM框架系列之一-MyBatis"><a href="#SSM框架系列之一-MyBatis" class="headerlink" title="SSM框架系列之一 MyBatis"></a>SSM框架系列之一 MyBatis</h2><h2 id="what"><a href="#what" class="headerlink" title="what"></a>what</h2><p> MyBatis 本是apache的一个开源项目iBatis, 2010年由apache software foundation 迁移到了google code，并且改名为MyBatis 。2013年11月迁移到Github。</p>
<p> MyBatis是支持定制化 SQL、存储过程以及高级映射的优秀的持久层框架。MyBatis 避免了几乎所有的 JDBC 代码和手动设置参数以及获取结果集。MyBatis 可以对配置和原生Map使用简单的 XML 或注解，将接口和 Java 的 POJOs(Plain Old Java Objects,普通的 Java对象)映射成数据库中的记录。（专业语言，抄的……）</p>
<p> 总而言之MyBatis是一个轻量级简化数据库操作的框架。</p>
<a id="more"></a>

<h2 id="why-using-MyBatis"><a href="#why-using-MyBatis" class="headerlink" title="why using MyBatis"></a>why using MyBatis</h2><p><em>解决JDBC存在的问题和简化数据库操作</em>：</p>
<ul>
<li><p>可以通过主配置文件配置连接池解决频繁创建、释放数据库连接造成的性能影响</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!--  使用jdbc的事务          --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">transactionManager</span> <span class="attr">type</span>=<span class="string">"JDBC"</span>/&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">dataSource</span> <span class="attr">type</span>=<span class="string">"POOLED"</span>&gt;</span></span><br><span class="line">		<span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"driver"</span> <span class="attr">value</span>=<span class="string">"com.mysql.cj.jdbc.Driver"</span>/&gt;</span></span><br><span class="line">		<span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"url"</span> <span class="attr">value</span>=<span class="string">"jdbc:mysql://localhost:3306/ssm_mybatis?serverTimezone=Asia/Shanghai"</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"username"</span> <span class="attr">value</span>=<span class="string">"root"</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"password"</span> <span class="attr">value</span>=<span class="string">"10709991"</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dataSource</span>&gt;</span></span><br></pre></td></tr></table></figure>
</li>
<li><p>动态SQL解决JDBC中硬编码问题</p>
</li>
<li><ul>
<li>Where条件改变</li>
<li>占位符位置变化</li>
<li>mapper.xml 文件书写</li>
</ul>
</li>
<li><p>可通过包装类方便的获取数据库查询结果集对象</p>
</li>
<li><p>使Dao层业务逻辑和数据库访问分离更易维护和测试</p>
</li>
</ul>
<h2 id="learn-what"><a href="#learn-what" class="headerlink" title="learn what"></a>learn what</h2><ul>
<li>了解MyBatis架构；</li>
<li>掌握MyBatis框架搭建、配置</li>
<li>使用MyBatis完成对数据库的增、删、改、查操作</li>
<li>掌握Mapper代理开发</li>
<li>掌握输入和输出映射</li>
<li>掌握多表关联查询</li>
<li>掌握动态SQL编写SQL语句</li>
<li>使用MyBatis Generator工具快速生成Bean、Interface、mapper.xml</li>
<li>掌握MyBatis+Spring开发(需要部分Spring知识)</li>
</ul>
<h1 id="开始学习MyBatis-框架"><a href="#开始学习MyBatis-框架" class="headerlink" title="开始学习MyBatis 框架"></a>开始学习MyBatis 框架</h1><h2 id="part1-MyBatis架构图："><a href="#part1-MyBatis架构图：" class="headerlink" title="part1 MyBatis架构图："></a>part1 MyBatis架构图：</h2><p><img src="https://github.com/ZephXu07/IMG/raw/master/MyBatis%E6%9E%B6%E6%9E%84%E5%9B%BE.png" alt="架构图"></p>
<ul>
<li>顶部算入口</li>
<li>SqlMapConfig.xml主配置文件</li>
<li>Mapper.xml对应一张表，几张对应几个xml文件</li>
<li>SqlSessionFactory是上述配置文件通过SqlSessionFactoryBuilder创建的</li>
<li>实线是初步学习关注的，虚线为后续深入学习需要关注的</li>
</ul>
<h2 id="part2-HelloMyBatis：搭建MyBatis-HelloWorld项目"><a href="#part2-HelloMyBatis：搭建MyBatis-HelloWorld项目" class="headerlink" title="part2 HelloMyBatis：搭建MyBatis HelloWorld项目"></a>part2 HelloMyBatis：搭建MyBatis HelloWorld项目</h2><p>1、 下载MyBatis、创建项目、导包；</p>
<p>2、 创建测试用例，测试数据库、测试Bean对象；</p>
<p>3、 创建sqlMapConfig.xml主配置文件；</p>
<ul>
<li>导入主配置文件头：</li>
</ul>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version="1.0" encoding="UTF-8" ?&gt;</span></span><br><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">configuration</span></span></span><br><span class="line"><span class="meta">PUBLIC <span class="meta-string">"-//mybatis.org//DTD Config 3.0//EN"</span></span></span><br><span class="line"><span class="meta"><span class="meta-string">"http://mybatis.org/dtd/mybatis-3-config.dtd"</span>&gt;</span></span><br></pre></td></tr></table></figure>



<p>4、 创建Mapper.xml映射文件；</p>
<ul>
<li>导入Mapper文件头：</li>
</ul>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version="1.0" encoding="UTF-8" ?&gt;</span></span><br><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">mapper</span></span></span><br><span class="line"><span class="meta">PUBLIC <span class="meta-string">"-//mybatis.org//DTD Mapper 3.0//EN"</span></span></span><br><span class="line"><span class="meta"><span class="meta-string">"http://mybatis.org/dtd/mybatis-3-mapper.dtd"</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>5、 导入约束；</p>
<h2 id="part3-使用MyBatis对表进行增、删、改、查操作"><a href="#part3-使用MyBatis对表进行增、删、改、查操作" class="headerlink" title="part3 使用MyBatis对表进行增、删、改、查操作"></a>part3 使用MyBatis对表进行增、删、改、查操作</h2><p><strong>SqlSession对象对数据库有增加、修改、删除都需要commit!</strong></p>
<p>1、 通过ID去查询一个用户</p>
<p><img src="https://github.com/ZephXu07/IMG/raw/master/mybatis.png" alt="1"></p>
<ul>
<li>需要一个UserMapper接口，方法名，返回值，参数的需要一致。</li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//读取配置文件</span></span><br><span class="line">   String resource = <span class="string">"sqlMapConfig.xml"</span>;</span><br><span class="line">   InputStream is = Resources.getResourceAsStream(resource);</span><br><span class="line">    </span><br><span class="line">    <span class="comment">//需要sqlSessionFactoryBuilder</span></span><br><span class="line">    SqlSessionFactoryBuilder saab = <span class="keyword">new</span> SqlSessionFactoryBuilder();</span><br><span class="line">       </span><br><span class="line">    <span class="comment">//创建sqlSessionFactory</span></span><br><span class="line">    SqlSessionFactory ssf = saab.build(is);</span><br><span class="line">       </span><br><span class="line">    <span class="comment">//生产一个sqlSession</span></span><br><span class="line">    SqlSession ss = ssf.openSession();</span><br><span class="line">       </span><br><span class="line">    <span class="comment">//操作数据库</span></span><br><span class="line">    <span class="comment">//参1：sql，参2：sql语句中参数</span></span><br><span class="line">    User user = ss.selectOne(<span class="string">"com.zephxu.bean.UserMapper.selectUserById"</span>, <span class="number">1</span>);</span><br></pre></td></tr></table></figure>

<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">"selectUserById"</span> <span class="attr">parameterType</span>=<span class="string">"Integer"</span> <span class="attr">resultType</span>=<span class="string">"com.zephxu.bean.User"</span>&gt;</span></span><br><span class="line">        select * from user where u_id = #&#123;id&#125;<span class="comment">&lt;!--mapper中间为sql语句--&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br></pre></td></tr></table></figure>

<ul>
<li>#{id}占位符，即?</li>
<li>log4j.properties文件应只有一份且存在于src\main\resources\下且不在其他子文件下。</li>
</ul>
<p>2、 通过用户名模糊查找匹配的用户列表</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">List&lt;User&gt; userList = ss.selectList(<span class="string">"com.zephxu.bean.UserMapper.selectUserByName"</span>, <span class="string">"c"</span>);</span><br></pre></td></tr></table></figure>

<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">"selectUserByName"</span> <span class="attr">parameterType</span>=<span class="string">"String"</span> <span class="attr">resultType</span>=<span class="string">"com.zephxu.bean.User"</span>&gt;</span><span class="comment">&lt;!--其他同上--&gt;</span></span><br><span class="line"><span class="comment">&lt;!--         select * from user where u_username like '%$&#123;value&#125;%'--&gt;</span></span><br><span class="line">        select * from user where u_username like "%"#&#123;name&#125;"%"</span><br><span class="line"><span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br></pre></td></tr></table></figure>

<ul>
<li>${value}：字符串拼接符，容易导致sql注入，如1 = 1，避免使用。</li>
<li>#{value}：占位符，预处理，即PreparedStatement，可以防止sql注入，尽量使用。</li>
</ul>
<p>3、 完成添加用户</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">User user = <span class="keyword">new</span> User(<span class="number">50</span>, <span class="string">"xz"</span>, <span class="string">"1079991"</span>, <span class="string">"1"</span>, <span class="keyword">new</span> Date(), <span class="number">2</span>);</span><br><span class="line">ss.insert(<span class="string">"com.zephxu.bean.UserMapper.insertUser"</span>, user);</span><br></pre></td></tr></table></figure>

<ul>
<li>BUG：Cannot add or update a child row: a foreign key constraint fails (<code>ssm_mybatis</code>.<code>user</code>, CONSTRAINT <code>FK_user_cid</code> FOREIGN KEY (<code>u_cid</code>) REFERENCES <code>country</code> (<code>c_id</code>))<ul>
<li>这个表某字段与其他表某字段有外键连接时，此时数据应为另一个表已存在数据。</li>
</ul>
</li>
</ul>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">insert</span> <span class="attr">id</span>=<span class="string">"insertUser"</span> <span class="attr">parameterType</span>=<span class="string">"com.zephxu.bean.User"</span>&gt;</span></span><br><span class="line">        INSERT into user values (#&#123;u_id&#125;, #&#123;u_username&#125;, #&#123;u_password&#125;, #&#123;u_sex&#125;, #&#123;u_createTime&#125;, #&#123;u_cid&#125;)</span><br><span class="line"><span class="tag">&lt;/<span class="name">insert</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>4、 修改用户</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">ss.update(<span class="string">"com.zephxu.bean.UserMapper.updateUser"</span>, user);</span><br></pre></td></tr></table></figure>

<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">update</span> <span class="attr">id</span>=<span class="string">"updateUser"</span> <span class="attr">parameterType</span>=<span class="string">"com.zephxu.bean.User"</span>&gt;</span></span><br><span class="line">        update user set u_username = #&#123;u_username&#125; where u_id = #&#123;u_id&#125;</span><br><span class="line"><span class="tag">&lt;/<span class="name">update</span>&gt;</span></span><br></pre></td></tr></table></figure>

<ul>
<li>同上</li>
</ul>
<p>5、 根据id删除用户</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">ss.delete(<span class="string">"com.zephxu.bean.UserMapper.deleteUserById"</span>, <span class="number">90</span>);</span><br></pre></td></tr></table></figure>

<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">delete</span> <span class="attr">id</span>=<span class="string">"deleteUserById"</span> <span class="attr">parameterType</span>=<span class="string">"Integer"</span>&gt;</span></span><br><span class="line">        delete from user where u_id = #&#123;u_id&#125;</span><br><span class="line"><span class="tag">&lt;/<span class="name">delete</span>&gt;</span></span><br></pre></td></tr></table></figure>

<ul>
<li>同上</li>
</ul>
<p>6、 使用MyBatis 开发Dao层并测试；</p>
<p>7、 小结1：Jdbc与MyBatis开发的区别(MyBatis的优点)，回顾MyBatis开发流程；</p>
<h2 id="part4-MyBatis-Mapper动态代理开发4-1-4原则-1注意-："><a href="#part4-MyBatis-Mapper动态代理开发4-1-4原则-1注意-：" class="headerlink" title="part4 MyBatis Mapper动态代理开发4+1 (4原则+1注意)："></a>part4 <strong>MyBatis Mapper动态代理开发4+1 (4原则+1注意)：</strong></h2><p>1、 接口方法名需要与mapper.xml的要调用的sql语句的id一致；</p>
<p>2、 接口的形参类型需要与mapper.xml parameterType一致；</p>
<p>3、 接口的返回值需要与mapper.xml resultType一致；</p>
<p>4、 mapper.xml中namespace要与接口的全包名一致；</p>
<p>5、 注意mapper动态代理开发中，根据返回值类型来自动选择；</p>
<p><img src="https://github.com/ZephXu07/IMG/raw/master/mybatis4.png" alt="4"></p>
<p><img src="https://github.com/ZephXu07/IMG/raw/master/mybatis5.png" alt="5"></p>
<ul>
<li>上两图对应1-4点</li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Test</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">test1</span><span class="params">()</span> <span class="keyword">throws</span> IOException </span>&#123;</span><br><span class="line">        <span class="comment">//读取配置文件</span></span><br><span class="line">        String resource = <span class="string">"sqlMapConfig.xml"</span>;</span><br><span class="line">        InputStream is = Resources.getResourceAsStream(resource);</span><br><span class="line">        <span class="comment">//创建sqlSessionFactory</span></span><br><span class="line">        SqlSessionFactory ssf = <span class="keyword">new</span> SqlSessionFactoryBuilder().build(is);</span><br><span class="line">        <span class="comment">//生产一个sqlSession</span></span><br><span class="line">        SqlSession ss = ssf.openSession();</span><br><span class="line">        UserMapper userMapper = ss.getMapper(UserMapper<span class="class">.<span class="keyword">class</span>)</span>;</span><br><span class="line">        User user = userMapper.selectUserById(<span class="number">99</span>);</span><br><span class="line">        System.out.println(user);</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure>

<ul>
<li>倒数三行是动态代理原理，获得UserMapper唯一的模板去创建一个对象，但现在如何从未实现的UserMapper接口和一个相关的UserMapper.xml文件创建未知，可能Mybatis中已有具体方法从接口及相关xml文件生成具有具体实现方法的代理类。</li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">User user = ss.selectOne(<span class="string">"com.zephxu.mapper.UserMapper.selectUserById"</span>, <span class="number">1</span>);</span><br></pre></td></tr></table></figure>

<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">userMapper.insertUser(user);</span><br><span class="line">   user.setU_username(<span class="string">"王yang"</span>);</span><br><span class="line">   userMapper.updateUserById(user);</span><br><span class="line">   List&lt;User&gt; userList = userMapper.selectUserByName(<span class="string">"王"</span>);</span><br><span class="line">   <span class="keyword">for</span> (User u:userList) &#123;</span><br><span class="line">   	System.out.println(u);</span><br><span class="line">   &#125;</span><br><span class="line">   userMapper.deleteUserById(<span class="number">88</span>);</span><br></pre></td></tr></table></figure>

<p>相比之下虽代码多了，但其实更加好理解，一个UserMapper的对象，其有各种各样的方法，只需要调用，而不需要通过参数方式”com.zephxu.mapper.UserMapper.selectUserById”进行调用。</p>
<h2 id="part5-主配置文件SqlMapConfig-xml说明：（注意顺序）"><a href="#part5-主配置文件SqlMapConfig-xml说明：（注意顺序）" class="headerlink" title="part5 主配置文件SqlMapConfig.xml说明：（注意顺序）"></a>part5 主配置文件SqlMapConfig.xml说明：（注意顺序）</h2><p><strong>（加粗为前期学习重点）</strong></p>
<p>1、 <strong>properties（读取配置文件）</strong></p>
<ul>
<li><p>不使用时：</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"driver"</span> <span class="attr">value</span>=<span class="string">"com.mysql.cj.jdbc.Driver"</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"url"</span> <span class="attr">value</span>=<span class="string">"jdbc:mysql://localhost:3306/ssm_mybatis?serverTimezone=Asia/Shanghai"</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"username"</span> <span class="attr">value</span>=<span class="string">"root"</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"password"</span> <span class="attr">value</span>=<span class="string">"10709991"</span>/&gt;</span></span><br></pre></td></tr></table></figure>
</li>
<li><p>使用时将包内的映射器接口实现全部注册为映射器：</p>
<p><img src="https://github.com/ZephXu07/IMG/raw/master/UC%E6%88%AA%E5%9B%BE20190918194909.png" alt="00"></p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">properties</span> <span class="attr">resource</span>=<span class="string">"db.properties"</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"driver"</span> <span class="attr">value</span>=<span class="string">"$&#123;jdbc.driver&#125;"</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"url"</span> <span class="attr">value</span>=<span class="string">"$&#123;jdbc.url&#125;"</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"username"</span> <span class="attr">value</span>=<span class="string">"$&#123;jdbc.username&#125;"</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"password"</span> <span class="attr">value</span>=<span class="string">"$&#123;jdbc.password&#125;"</span>/&gt;</span></span><br></pre></td></tr></table></figure>

<ul>
<li>如果属性在不只一个地方进行了配置，那么 MyBatis 将按照下面的顺序来加载：<ul>
<li>在 properties 元素体内指定的属性首先被读取。</li>
</ul>
</li>
<li>然后根据 properties 元素中的 resource 属性读取类路径下属性文件或根据 url 属性指定的路径读取属性文件，并覆盖已读取的同名属性。<ul>
<li>最后读取作为方法参数传递的属性，并覆盖已读取的同名属性。</li>
</ul>
</li>
</ul>
</li>
</ul>
<p>2、 settings（全局配置参数）</p>
<p>3、 <strong>typeAliases（类型别名）</strong></p>
<p><img src="https://github.com/ZephXu07/IMG/raw/master/mybatis.5.3.png" alt="5.3"></p>
<ul>
<li><p>别名可用于此处，省略包名。</p>
</li>
<li><p><code>&lt;typeAliases&gt;&lt;/typeAliases&gt;</code>中有两种用法：</p>
<ol>
<li>单独： <code>&lt;typeAlias type=&quot;com.zephxu.bean.User&quot; alias=&quot;User&quot;/&gt;</code></li>
<li>（推荐）包：<code>&lt;package name=&quot;com.zephxu.bean&quot;/&gt;</code></li>
</ol>
<ul>
<li><p><code>resultType=&quot;User&quot;</code></p>
</li>
<li><p><code>resultType=&quot;user&quot;</code></p>
</li>
<li><p>大小写均可。</p>
<p> BUG：</p>
<ul>
<li>Cause: org.apache.ibatis.builder.BuilderException: Error creating document instance. Cause: org.xml.sax.SAXParseException; lineNumber: 57; columnNumber: 17; 元素类型为 “configuration” 的内容必须匹配 “(properties?,settings?,typeAliases?,typeHandlers?,objectFactory?,objectWrapperFactory?,reflectorFactory?,plugins?,environments?,databaseIdProvider?,mappers?)”。</li>
<li>原因：<code>&lt;configuration&gt;</code>标签中的小标签需要符合一定顺序：</li>
<li>==properties–settings–typeAliases–typeHandlers–objectFactory–objectWrapperFactory–reflectorFactory–plugins–environments–databaseIdProvider–mappers==</li>
</ul>
</li>
</ul>
</li>
</ul>
<p>4、 typeHandlers（类型处理器）</p>
<p>5、 objectFactory（对象工厂）</p>
<p>6、 plugins（插件）</p>
<p>7、 environments（环境集合属性对象，与Spring框架整合后Say Good Bye）</p>
<p> a) environment（环境子属性对象）</p>
<p> b) transactionManager（事务管理）</p>
<p> c) dataSource（数据源）</p>
<p>8、 <strong>mappers（配置映射器位置）</strong>(1-3单独，4包)</p>
<p> （1）使用相对于类路径的资源引用</p>
<p><code>&lt;mapper resource=&quot;mapper/UserMapper.xml&quot;/&gt;</code></p>
<p> （2）使用完全限定资源定位符（URL）</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">mapper</span> <span class="attr">url</span>=<span class="string">"file:///D:\IDEAWorkSpace\ssm_MyBatis\src\main\resources\mapper\UserMapper.xml"</span>/&gt;</span> </span><br><span class="line"><span class="comment">&lt;!--"file:///" + 绝对路径--&gt;</span></span><br></pre></td></tr></table></figure>

<p> （3）使用映射器接口实现类的完全限定类名</p>
<p> <code>&lt;mapper class=&quot;com.zephxu.mapper.UserMapper&quot;/&gt;</code></p>
<p> <strong>注意：把同名xml文件复制到接口同个包下，且在resource目录下的包名需要完全一致，编译后在target目录下才会在同一包内。<a href="https://zephxu07.github.io/2019/09/27/Spring-Learning-Notes/#3%E3%80%81-%E5%9C%A8service%E4%B8%AD%E5%8A%A0%E5%85%A5%E4%BA%8B%E5%8A%A1%EF%BC%9A%E5%88%A9%E7%94%A8Spring-aop%E4%BA%8B%E5%8A%A1%E8%A7%A3%E5%86%B3%E8%BD%AC%E8%B4%A6%E5%BC%82%E5%B8%B8%E9%97%AE%E9%A2%98%EF%BC%9B">或者此BUG对应的解决方法</a></strong></p>
<p><img src="https://github.com/ZephXu07/IMG/raw/master/mybatis.5.8.3.png" alt="5.8.3"></p>
<p> （4）将包内的映射器接口实现全部注册为映射器</p>
<p> <strong>规则同3，但是为一整个包为单位</strong></p>
<h2 id="part6-MyBatis输入和输出映射"><a href="#part6-MyBatis输入和输出映射" class="headerlink" title="part6 MyBatis输入和输出映射"></a>part6 MyBatis输入和输出映射</h2><p>1、 输入映射parameterType；</p>
<p> a) 基本类型；</p>
<p> b) 自定义对象；</p>
<p> c) 自定义包装类：本对象之外额外的信息。</p>
<p>2、 输出映射resultType、resultMap；<strong>不能同时使用！！！</strong></p>
<p> a) resultType：bean包中类中属性名需完全一致才能自动映射。</p>
<p> i. 基本类型；</p>
<p> ii. 自定义对象；</p>
<p> iii. 集合；</p>
<p><strong>BUG</strong> : <code>select count(*) from user</code></p>
<p><strong>count后面没有空格！！！</strong></p>
<p>b) resultMap；</p>
<p> i. bean对象字段与数据表字段不匹配，如下；</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">private</span> Integer id;</span><br><span class="line"><span class="keyword">private</span> String name;</span><br><span class="line"><span class="keyword">private</span> String capital;</span><br></pre></td></tr></table></figure>

<p><img src="https://github.com/ZephXu07/IMG/raw/master/mybatis.6.b.i.png" alt="6.b.i"></p>
<p><img src="https://github.com/ZephXu07/IMG/raw/master/mybatis.6.b.i.1.png" alt="6.i.1"></p>
<p><strong>注意：单表查询时<code>&lt;resultMap&gt;</code>中不能用id标签，需要用reslut标签，特别是java/com/zephxu/mapper中的mapper.xml文件</strong></p>
<p> ii. 自定义包装类；</p>
<p> iii. 关联查询；</p>
<h2 id="part7-MyBatis关联查询"><a href="#part7-MyBatis关联查询" class="headerlink" title="part7 MyBatis关联查询"></a>part7 MyBatis关联查询</h2><ol>
<li>一对一；</li>
<li>一对多；<ul>
<li><strong>多表查询中resultMap中建议主键时用id，而其他字段使用result，提升性能。</strong></li>
<li><strong>单表查询中bean对象字段与数据表字段匹配时可以不用映射，但多表关联查询需要。</strong></li>
</ul>
</li>
</ol>
<p><img src="https://github.com/ZephXu07/IMG/raw/master/mybatis.7.1.png" alt="7.1"></p>
<p>1 . 一对一：</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">resultMap</span> <span class="attr">id</span>=<span class="string">"uservolist"</span> <span class="attr">type</span>=<span class="string">"UserVo"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">id</span> <span class="attr">property</span>=<span class="string">"u_id"</span> <span class="attr">column</span>=<span class="string">"u_id"</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">result</span> <span class="attr">property</span>=<span class="string">"u_username"</span> <span class="attr">column</span>=<span class="string">"u_username"</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">result</span> <span class="attr">property</span>=<span class="string">"u_sex"</span> <span class="attr">column</span>=<span class="string">"u_sex"</span>/&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--多表查询中resultMap中建议主键时用id，而其他字段使用result--&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--一对一的关系，上为主表，下为辅表，使用&lt;association&gt;标签--&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">association</span> <span class="attr">property</span>=<span class="string">"country"</span> <span class="attr">javaType</span>=<span class="string">"Country"</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">id</span> <span class="attr">property</span>=<span class="string">"id"</span> <span class="attr">column</span>=<span class="string">"c_id"</span>/&gt;</span></span><br><span class="line">            <span class="comment">&lt;!--单表查询中bean对象字段与数据表字段匹配时可以不用映射，但多表关联查询需要--&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">result</span> <span class="attr">property</span>=<span class="string">"name"</span> <span class="attr">column</span>=<span class="string">"c_countryname"</span>/&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">result</span> <span class="attr">property</span>=<span class="string">"capital"</span> <span class="attr">column</span>=<span class="string">"c_capital"</span>/&gt;</span></span><br><span class="line">            <span class="comment">&lt;!--同上--&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">association</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">resultMap</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">"selectAllUserVo"</span> <span class="attr">resultMap</span>=<span class="string">"uservolist"</span>&gt;</span></span><br><span class="line">        select</span><br><span class="line">            u.`u_id`, u.`u_username`, u.`u_sex`,c.`c_id`, c.`c_countryname` , c.`c_capital`</span><br><span class="line">                from user u</span><br><span class="line">                    left join country c</span><br><span class="line">                        on u.`u_cid`=c.`c_id`</span><br><span class="line"><span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>2.一对多</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">resultMap</span> <span class="attr">id</span>=<span class="string">"countryVo"</span> <span class="attr">type</span>=<span class="string">"CountryVo"</span>&gt;</span></span><br><span class="line">    	<span class="comment">&lt;!--id、result使用同上--&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">id</span> <span class="attr">property</span>=<span class="string">"id"</span> <span class="attr">column</span>=<span class="string">"c_id"</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">result</span> <span class="attr">property</span>=<span class="string">"name"</span> <span class="attr">column</span>=<span class="string">"c_countryname"</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">result</span> <span class="attr">property</span>=<span class="string">"capital"</span> <span class="attr">column</span>=<span class="string">"c_capital"</span>/&gt;</span></span><br><span class="line">        <span class="comment">&lt;!--一对多关系使用collection--&gt;</span></span><br><span class="line">        &lt;collection property="userList" &lt;!--一对多中的多对应的泛型集合--&gt; ofType="User"&lt;!--泛型集合中的数据类型--&gt;</span><br><span class="line">            <span class="tag">&lt;<span class="name">id</span> <span class="attr">property</span>=<span class="string">"u_id"</span> <span class="attr">column</span>=<span class="string">"u_id"</span>/&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">result</span> <span class="attr">property</span>=<span class="string">"u_username"</span> <span class="attr">column</span>=<span class="string">"u_username"</span>/&gt;</span></span><br><span class="line">    		<span class="comment">&lt;!--id、result使用同上--&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">collection</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">resultMap</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">"selectAllCountryVo"</span> <span class="attr">resultMap</span>=<span class="string">"countryVo"</span>&gt;</span></span><br><span class="line">        select</span><br><span class="line">            c.`c_id`, c.`c_countryname`, c.`c_capital`,</span><br><span class="line">                u.`u_id`, u.`u_username`</span><br><span class="line">                    from country c</span><br><span class="line">                        left join</span><br><span class="line">                            user u on</span><br><span class="line">                                u.`u_cid`=c.`c_id`</span><br><span class="line"><span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h2 id="part8MyBatis动态sql：更方便的拼接sql语句！"><a href="#part8MyBatis动态sql：更方便的拼接sql语句！" class="headerlink" title="part8MyBatis动态sql：更方便的拼接sql语句！"></a>part8MyBatis动态sql：更方便的拼接sql语句！</h2><p>1、 if标签 - 多条件查询，获取用户列表；</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">"selectUserListByUser"</span> <span class="attr">parameterType</span>=<span class="string">"User"</span> <span class="attr">resultType</span>=<span class="string">"User"</span>&gt;</span></span><br><span class="line">        select * from user</span><br><span class="line">            where</span><br><span class="line">                <span class="tag">&lt;<span class="name">if</span> <span class="attr">test</span>=<span class="string">"u_sex != null and u_sex != ''"</span>&gt;</span></span><br><span class="line">                    u_sex = #&#123;u_sex&#125;</span><br><span class="line">                <span class="tag">&lt;/<span class="name">if</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">if</span> <span class="attr">test</span>=<span class="string">"u_username != null and u_username != ''"</span>&gt;</span></span><br><span class="line">                    and u_username like "%"#&#123;u_username&#125;"%"</span><br><span class="line">                <span class="tag">&lt;/<span class="name">if</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">if</span> <span class="attr">test</span>=<span class="string">"u_cid != null"</span>&gt;</span></span><br><span class="line">                    and u_cid = #&#123;u_cid&#125;</span><br><span class="line">                <span class="tag">&lt;/<span class="name">if</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p><strong>注意：可能因为某个if出现sql语句错误，如</strong></p>
<p> <strong><code>select * from user where and u_username like &quot;%&quot;?&quot;%&quot;</code></strong></p>
<p>解决方法如2。</p>
<p>2、 where标签 - 解决if标签拼接字符串AND符号问题；</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">"selectUserListByUser"</span> <span class="attr">parameterType</span>=<span class="string">"User"</span> <span class="attr">resultType</span>=<span class="string">"User"</span>&gt;</span></span><br><span class="line">        select * from user</span><br><span class="line">            <span class="tag">&lt;<span class="name">where</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">if</span> <span class="attr">test</span>=<span class="string">"u_sex != null and u_sex != ''"</span>&gt;</span></span><br><span class="line">                    u_sex = #&#123;u_sex&#125;</span><br><span class="line">                <span class="tag">&lt;/<span class="name">if</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">if</span> <span class="attr">test</span>=<span class="string">"u_username != null and u_username != ''"</span>&gt;</span></span><br><span class="line">                    and u_username like "%"#&#123;u_username&#125;"%"</span><br><span class="line">                <span class="tag">&lt;/<span class="name">if</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">if</span> <span class="attr">test</span>=<span class="string">"u_cid != null"</span>&gt;</span></span><br><span class="line">                    and u_cid = #&#123;u_cid&#125;</span><br><span class="line">                <span class="tag">&lt;/<span class="name">if</span>&gt;</span></span><br><span class="line">        	<span class="tag">&lt;/<span class="name">where</span>&gt;</span><span class="comment">&lt;!--&lt;where&gt;标签可智能去除开头的and符号--&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>3、 trim标签 - 定制where标签的规则</p>
<ul>
<li><p><code>&lt;trim prefix=&quot;WHERE&quot; prefixOverrides=&quot;AND&quot;&gt;</code> 代替 <code>&lt;where&gt;</code></p>
</li>
<li><p>prefix（suffix）替换前缀的where ，prefixOverrides（suffixOverrides）自动去掉开头的and，此外还有其他如下：</p>
</li>
</ul>
<p><img src="https://github.com/ZephXu07/IMG/raw/master/Snipaste_2019-09-22_18-02-01_%E4%B8%AD%E5%9B%BD%E6%A0%87%E5%87%86%E6%97%B6%E9%97%B4_351ep18xu.png" alt="0"></p>
<p><img src="https://github.com/ZephXu07/IMG/raw/master/Snipaste_2019-09-22_18-02-44_%E4%B8%AD%E5%9B%BD%E6%A0%87%E5%87%86%E6%97%B6%E9%97%B4_45ep18xu.png" alt="3"></p>
<p>4、 set标签 - 解决更新数据表时字符串拼接逗号”,”问题；</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">update</span> <span class="attr">id</span>=<span class="string">"updateSetUser"</span> <span class="attr">parameterType</span>=<span class="string">"User"</span>&gt;</span></span><br><span class="line">        update user</span><br><span class="line">            <span class="tag">&lt;<span class="name">set</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">if</span> <span class="attr">test</span>=<span class="string">"u_username != null and u_username != ''"</span>&gt;</span></span><br><span class="line">                    u_username = #&#123;u_username&#125;,</span><br><span class="line">                <span class="tag">&lt;/<span class="name">if</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">if</span> <span class="attr">test</span>=<span class="string">"u_password != null and u_password != ''"</span>&gt;</span></span><br><span class="line">                    u_password = #&#123;u_password&#125;,</span><br><span class="line">                <span class="tag">&lt;/<span class="name">if</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">if</span> <span class="attr">test</span>=<span class="string">"u_sex != null and u_sex != ''"</span>&gt;</span></span><br><span class="line">                    u_sex = #&#123;u_sex&#125;</span><br><span class="line">                <span class="tag">&lt;/<span class="name">if</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">set</span>&gt;</span></span><br><span class="line">                where u_id = #&#123;u_id&#125;</span><br><span class="line"><span class="tag">&lt;/<span class="name">update</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p><strong><code>&lt;set&gt;</code>标签代替set，来处理<code>&lt;if&gt;</code>标签可能由于’,’造成的sql语句错误，且’,’可放置前面或后面，不似<code>&lt;where&gt;</code>标签只能处理前缀and！</strong></p>
<p>5、 foreach标签 – 如果需要使用IN查询多条相同数据，可以使用foreach遍历；</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">"selectUserListByIds"</span> <span class="attr">resultType</span>=<span class="string">"User"</span>&gt;</span></span><br><span class="line">        select * from user where u_id in (1, 7, 18, 99);</span><br><span class="line"><span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>SQL语句如上，使用<code>&lt;foreach&gt;</code>标签后如下：</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">"selectUserListByIds"</span> <span class="attr">resultType</span>=<span class="string">"User"</span>&gt;</span></span><br><span class="line">        select *</span><br><span class="line">            from user</span><br><span class="line">                where u_id in <span class="comment">&lt;!--(1, 7, 18, 99);--&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">foreach</span> <span class="attr">collection</span>=<span class="string">"array"</span> <span class="attr">item</span>=<span class="string">"id"</span> <span class="attr">open</span>=<span class="string">"("</span> <span class="attr">close</span>=<span class="string">")"</span> <span class="attr">separator</span>=<span class="string">","</span>&gt;</span></span><br><span class="line">                    <span class="comment">&lt;!--使用标签后拼接为 "(1,7,18,99)" --&gt;</span></span><br><span class="line">                        #&#123;id&#125;</span><br><span class="line">                    <span class="tag">&lt;/<span class="name">foreach</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br></pre></td></tr></table></figure>

<ul>
<li><p><code>List&lt;User&gt; selectUserListByIds(Integer[] integers);</code></p>
<p> <strong>参数为<code>Integer[] integers</code> 则<code>&lt;collecction&gt;</code>参数为”array”。</strong></p>
</li>
<li><p><code>List&lt;User&gt; selectUserListByIdList(List&lt;Integer&gt; idList);</code></p>
<p> <strong>参数为<code>List&lt;Integer&gt; idList</code>则<code>&lt;collection&gt;</code>参数为”list”。</strong></p>
</li>
<li><p><code>List&lt;User&gt; selectUserListByUserVo(UserVo uv);</code></p>
<p> <strong>参数<code>UserVo uv</code>则<code>&lt;collection&gt;</code>参数为包装类中的属性”idList”。</strong></p>
<p><img src="https://github.com/ZephXu07/IMG/raw/master/Snipaste_2019-09-24_16-55-10.png" alt="包装类信息"></p>
</li>
</ul>
<p>6、 sql标签 – 可以提取重复sql语句片段；</p>
<ul>
<li>定义：</li>
</ul>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">sql</span> <span class="attr">id</span>=<span class="string">"mySelect"</span>&gt;</span></span><br><span class="line">        select * from user</span><br><span class="line"><span class="tag">&lt;/<span class="name">sql</span>&gt;</span></span><br></pre></td></tr></table></figure>

<ul>
<li>使用：</li>
</ul>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">include</span> <span class="attr">refid</span>=<span class="string">"mySelect"</span>/&gt;</span></span><br></pre></td></tr></table></figure>

<h2 id="part9-MyBatis-Generator（MBG）："><a href="#part9-MyBatis-Generator（MBG）：" class="headerlink" title="part9 MyBatis Generator（MBG）："></a>part9 MyBatis Generator（MBG）：</h2><ul>
<li><p>作用：根据数据库表自动生成Bean对象、Java接口及SqlMapper.xml配置文件；</p>
</li>
<li><p><a href="http://www.mybatis.org/generator/" target="_blank" rel="noopener">官方文档</a></p>
</li>
<li><p><a href="https://github.com/mybatis/generator/releases" target="_blank" rel="noopener">下载地址</a></p>
</li>
</ul>
<p>1、 搭建MBG项目；</p>
<p>a) 下载MBG核心包；</p>
<p>b) 创建java项目；</p>
<p>c) 从官方文档获取配置表、实例代码；</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version="1.0" encoding="UTF-8"?&gt;</span></span><br><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">generatorConfiguration</span></span></span><br><span class="line"><span class="meta">        <span class="meta-keyword">PUBLIC</span> <span class="meta-string">"-//mybatis.org//DTD MyBatis Generator Configuration 1.0//EN"</span></span></span><br><span class="line"><span class="meta">        <span class="meta-string">"http://mybatis.org/dtd/mybatis-generator-config_1_0.dtd"</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">generatorConfiguration</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--&lt;classPathEntry location="/Program Files/IBM/SQLLIB/java/db2java.zip" /&gt;--&gt;</span></span><br><span class="line">	<span class="comment">&lt;!--配置数据库的包，maven已导入，注释掉--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">context</span> <span class="attr">id</span>=<span class="string">"MyGenarator"</span> <span class="attr">targetRuntime</span>=<span class="string">"MyBatis3"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">commentGenerator</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"suppressAllComments"</span> <span class="attr">value</span>=<span class="string">"true"</span>/&gt;</span></span><br><span class="line">            <span class="comment">&lt;!--取消注释，当为true--&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"suppressDate"</span> <span class="attr">value</span>=<span class="string">"true"</span>/&gt;</span></span><br><span class="line">            <span class="comment">&lt;!--取消时间戳，当为true--&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">commentGenerator</span>&gt;</span></span><br><span class="line">        </span><br><span class="line">        <span class="comment">&lt;!--数据库连接信息--&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">jdbcConnection</span> <span class="attr">driverClass</span>=<span class="string">"com.mysql.cj.jdbc.Driver"</span></span></span><br><span class="line"><span class="tag">                        <span class="attr">connectionURL</span>=<span class="string">"jdbc:mysql://localhost:3306/ssm_mybatis?serverTimezone=Asia/Shanghai"</span></span></span><br><span class="line"><span class="tag">                        <span class="attr">userId</span>=<span class="string">"root"</span></span></span><br><span class="line"><span class="tag">                        <span class="attr">password</span>=<span class="string">"10709991"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">jdbcConnection</span>&gt;</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">&lt;!--java JDBC数据类型转换，具体看https://mybatis.org/generator/configreference/javaTypeResolver.html--&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">javaTypeResolver</span> &gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"forceBigDecimals"</span> <span class="attr">value</span>=<span class="string">"false"</span> /&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">javaTypeResolver</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!--重点：javaModelGenerator Bean配置</span></span><br><span class="line"><span class="comment">			targetPackage：输入包名，输出路径</span></span><br><span class="line"><span class="comment">			targetProject：输出项目位置，相对路径，不需要写项目名，从src下开始--&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">javaModelGenerator</span> <span class="attr">targetPackage</span>=<span class="string">"com.zephxu.bean"</span> <span class="attr">targetProject</span>=<span class="string">"src\main\java"</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"enableSubPackages"</span> <span class="attr">value</span>=<span class="string">"false"</span> /&gt;</span></span><br><span class="line">            <span class="comment">&lt;!--是否开启子包名称，即是否在包名后边加scheme名称--&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"trimStrings"</span> <span class="attr">value</span>=<span class="string">"false"</span> /&gt;</span></span><br><span class="line">            <span class="comment">&lt;!--在Set中加入.trim--&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">javaModelGenerator</span>&gt;</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">&lt;!--mappper.xml文件配置--&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">sqlMapGenerator</span> <span class="attr">targetPackage</span>=<span class="string">"com.zephxu.mapper"</span>  <span class="attr">targetProject</span>=<span class="string">"src\main\java"</span>&gt;</span></span><br><span class="line">            <span class="comment">&lt;!--targetPackage，targetProject同上--&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"enableSubPackages"</span> <span class="attr">value</span>=<span class="string">"false"</span> /&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">sqlMapGenerator</span>&gt;</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">&lt;!--java接口配置--&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">javaClientGenerator</span> <span class="attr">type</span>=<span class="string">"XMLMAPPER"</span> <span class="attr">targetPackage</span>=<span class="string">"com.zephxu.mapper"</span>  <span class="attr">targetProject</span>=<span class="string">"src\main\java"</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"enableSubPackages"</span> <span class="attr">value</span>=<span class="string">"true"</span> /&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">javaClientGenerator</span>&gt;</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">&lt;!--数据库：根据数据库中的表来生成--&gt;</span></span><br><span class="line">   <span class="comment">&lt;!--     &lt;table schema="DB2ADMIN" tableName="ALLTYPES" domainObjectName="Customer" &gt;</span></span><br><span class="line"><span class="comment">            &lt;property name="useActualColumnNames" value="true"/&gt;</span></span><br><span class="line"><span class="comment">            &lt;generatedKey column="ID" sqlStatement="DB2" identity="true" /&gt;</span></span><br><span class="line"><span class="comment">            &lt;columnOverride column="DATE_FIELD" property="startDate" /&gt;</span></span><br><span class="line"><span class="comment">            &lt;ignoreColumn column="FRED" /&gt;</span></span><br><span class="line"><span class="comment">            &lt;columnOverride column="LONG_VARCHAR_FIELD" jdbcType="VARCHAR" /&gt;</span></span><br><span class="line"><span class="comment">        &lt;/table&gt; --&gt;</span></span><br><span class="line">        <span class="comment">&lt;!--过于复杂，简单如下--&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">table</span> <span class="attr">tableName</span>=<span class="string">"user"</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">table</span> <span class="attr">tableName</span>=<span class="string">"country"</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">context</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">generatorConfiguration</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>上述标签中在MYSQL中trim用法：</p>
<ul>
<li><strong>重要知识点都在上面xml文档的注释中！</strong></li>
</ul>
<p>d) 导入依赖包；</p>
<p><img src="https://github.com/ZephXu07/IMG/raw/master/Snipaste_2019-09-25_19-12-48_%E4%B8%AD%E5%9B%BD%E6%A0%87%E5%87%86%E6%97%B6%E9%97%B4_334ep19xu.png" alt="依赖包"></p>
<ul>
<li><ul>
<li><p>git使用出现BUG：**error: failed to push some refs to……</p>
</li>
<li><p><strong>解决方法：git pull –rebase origin master</strong></p>
<p> <strong>git push -u origin master</strong></p>
</li>
<li><p>详解：</p>
</li>
</ul>
</li>
</ul>
<p>2、 MBG配置以及根据数据库表生成所需文件（Bean、Interface、Mapper.xml）；</p>
<p>3、 使用自动生成的文件操作数据库：根据生成的Mapper类、UserExample类中特有的属性或方法去操作数据库，具体看方法。</p>
<h2 id="part10、Mybatis-Spring-整合开发"><a href="#part10、Mybatis-Spring-整合开发" class="headerlink" title="part10、Mybatis + Spring 整合开发"></a>part10、Mybatis + Spring 整合开发</h2><h3 id="1、目的："><a href="#1、目的：" class="headerlink" title="1、目的："></a>1、目的：</h3><p>a) 使用Spring容器用单例模式管理Mybatis的sqlSessionFactory；</p>
<p>b) 使用Spring管理连接池、数据源等；</p>
<p>c) 将Dao/Mapper动态代理对象注入到Spring容器中，使用时直接获取；</p>
<h3 id="2、-Mybatis和Spring框架整合；"><a href="#2、-Mybatis和Spring框架整合；" class="headerlink" title="2、 Mybatis和Spring框架整合；"></a>2、 Mybatis和Spring框架整合；</h3><p>a) 导入所需的包；</p>
<p>b) 创建Mybatis主配置文件sqlMapConfig.xml；</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version="1.0" encoding="UTF-8"?&gt;</span></span><br><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">configuration</span> <span class="meta-keyword">PUBLIC</span> <span class="meta-string">"-//mybatis.org//DTD Config 3.0//EN"</span> <span class="meta-string">"http://mybatis.org/dtd/mybatis-3-config.dtd"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">configuration</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--配置别名--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">typeAliases</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">package</span> <span class="attr">name</span>=<span class="string">"com.zephxu.bean"</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">typeAliases</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">configuration</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>c) 创建Spring主配置文件applicationContext.xml (以下是spring框架xml的头，需要导入约束)；</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version="1.0" encoding="UTF-8"?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">beans</span> <span class="attr">xmlns:xsi</span>=<span class="string">"http://www.w3.org/2001/XMLSchema-instance"</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xmlns</span>=<span class="string">"http://www.springframework.org/schema/beans"</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xmlns:context</span>=<span class="string">"http://www.springframework.org/schema/context"</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xmlns:tx</span>=<span class="string">"http://www.springframework.org/schema/tx"</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xmlns:aop</span>=<span class="string">"http://www.springframework.org/schema/aop"</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xsi:schemaLocation</span>=<span class="string">"http://www.springframework.org/schema/beans</span></span></span><br><span class="line"><span class="tag"><span class="string">       http://www.springframework.org/schema/beans/spring-beans.xsd</span></span></span><br><span class="line"><span class="tag"><span class="string">        http://www.springframework.org/schema/context</span></span></span><br><span class="line"><span class="tag"><span class="string">        http://www.springframework.org/schema/context/spring-context.xsd</span></span></span><br><span class="line"><span class="tag"><span class="string">        http://www.springframework.org/schema/tx</span></span></span><br><span class="line"><span class="tag"><span class="string">        http://www.springframework.org/schema/tx/spring-tx.xsd</span></span></span><br><span class="line"><span class="tag"><span class="string">        http://www.springframework.org/schema/aop</span></span></span><br><span class="line"><span class="tag"><span class="string">        http://www.springframework.org/schema/aop/spring-aop.xsd"</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!--数据源--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">context:property-placeholder</span> <span class="attr">location</span>=<span class="string">"db.properties"</span>/&gt;</span><span class="comment">&lt;!--读取配置文件--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">bean</span> <span class="attr">name</span>=<span class="string">"dataSource"</span> <span class="attr">class</span>=<span class="string">"com.mchange.v2.c3p0.ComboPooledDataSource"</span>&gt;</span><span class="comment">&lt;!--配置DataSource--&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"driverClass"</span> <span class="attr">value</span>=<span class="string">"$&#123;jdbc.driverClass&#125;"</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"jdbcUrl"</span> <span class="attr">value</span>=<span class="string">"$&#123;jdbc.jdbcUrl&#125;"</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"user"</span> <span class="attr">value</span>=<span class="string">"$&#123;jdbc.user&#125;"</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"password"</span> <span class="attr">value</span>=<span class="string">"$&#123;jdbc.password&#125;"</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">beans</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>d) 配置C3P0连接池；</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!--数据源--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">context:property-placeholder</span> <span class="attr">location</span>=<span class="string">"db.properties"</span>/&gt;</span><span class="comment">&lt;!--读取配置文件--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">bean</span> <span class="attr">name</span>=<span class="string">"dataSource"</span> <span class="attr">class</span>=<span class="string">"com.mchange.v2.c3p0.ComboPooledDataSource"</span>&gt;</span><span class="comment">&lt;!--配置DataSource--&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"driverClass"</span> <span class="attr">value</span>=<span class="string">"$&#123;jdbc.driverClass&#125;"</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"jdbcUrl"</span> <span class="attr">value</span>=<span class="string">"$&#123;jdbc.jdbcUrl&#125;"</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"user"</span> <span class="attr">value</span>=<span class="string">"$&#123;jdbc.user&#125;"</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"password"</span> <span class="attr">value</span>=<span class="string">"$&#123;jdbc.password&#125;"</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>e) 读取db.properties；</p>
<figure class="highlight properties"><table><tr><td class="code"><pre><span class="line"><span class="meta">jdbc.driverClass</span>=<span class="string">com.mysql.cj.jdbc.Driver</span></span><br><span class="line"><span class="meta">jdbc.jdbcUrl</span>=<span class="string">jdbc:mysql://localhost:3306/ssm_spring?serverTimezone=Asia/Shanghai</span></span><br><span class="line"><span class="meta">jdbc.user</span>=<span class="string">root</span></span><br><span class="line"><span class="meta">jdbc.password</span>=<span class="string">10709991</span></span><br></pre></td></tr></table></figure>

<p>f) 配置sqlSessionFactory；</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!--mybatis--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">bean</span> <span class="attr">name</span>=<span class="string">"sqlSessionFactory"</span> <span class="attr">class</span>=<span class="string">"org.mybatis.spring.SqlSessionFactoryBean"</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!--配置数据源--&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"dataSource"</span> <span class="attr">ref</span>=<span class="string">"dataSource"</span>/&gt;</span></span><br><span class="line">        <span class="comment">&lt;!--告知Spring MyBatis的核心配置文件--&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"configLocation"</span> <span class="attr">value</span>=<span class="string">"classpath:sqlMapConfig.xml"</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>g) 测试</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">ApplicationContext ac = <span class="keyword">new</span> ClassPathXmlApplicationContext(<span class="string">"applicationContext.xml"</span>);</span><br><span class="line">        SqlSessionFactoryBean sqlSessionFactoryBean = ac.getBean(SqlSessionFactoryBean<span class="class">.<span class="keyword">class</span>)</span>;</span><br><span class="line">System.out.println(sqlSessionFactoryBean);</span><br></pre></td></tr></table></figure>

<h3 id="3、-Dao式开发；"><a href="#3、-Dao式开发；" class="headerlink" title="3、 Dao式开发；"></a>3、 Dao式开发；</h3><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!-- userDao --&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"userDaoImpl"</span> <span class="attr">class</span>=<span class="string">"com.sikiedu.dao.UserDaoImpl"</span>&gt;</span></span><br><span class="line">		<span class="comment">&lt;!-- 将工厂注入到dao的父类 sqlSessionFactory --&gt;</span></span><br><span class="line">		<span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"sqlSessionFactory"</span> <span class="attr">ref</span>=<span class="string">"sqlSessionFactoryBean"</span>/&gt;</span></span><br><span class="line">	<span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h3 id="4、-Mapper动态代理开发；"><a href="#4、-Mapper动态代理开发；" class="headerlink" title="4、 Mapper动态代理开发；"></a>4、 Mapper动态代理开发；</h3><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!-- mapper动态代理开发 --&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"userMapper"</span> <span class="attr">class</span>=<span class="string">"org.mybatis.spring.mapper.MapperFactoryBean"</span>&gt;</span></span><br><span class="line">		<span class="comment">&lt;!-- 注入 sqlSessionFactory --&gt;</span></span><br><span class="line">		<span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"sqlSessionFactory"</span> <span class="attr">ref</span>=<span class="string">"sqlSessionFactoryBean"</span>/&gt;</span></span><br><span class="line">		<span class="comment">&lt;!-- 配置接口 --&gt;</span></span><br><span class="line">		<span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"mapperInterface"</span> <span class="attr">value</span>=<span class="string">"com.sikiedu.mapper.UserMapper"</span>/&gt;</span></span><br><span class="line">	<span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h3 id="5、-Mapper动态扫描开发：不需要配置多个接口；"><a href="#5、-Mapper动态扫描开发：不需要配置多个接口；" class="headerlink" title="5、 Mapper动态扫描开发：不需要配置多个接口；"></a>5、 Mapper动态扫描开发：不需要配置多个接口；</h3><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!-- mapper动态扫描开发 --&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">bean</span> <span class="attr">class</span>=<span class="string">"org.mybatis.spring.mapper.MapperScannerConfigurer"</span>&gt;</span></span><br><span class="line">		<span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"basePackage"</span> <span class="attr">value</span>=<span class="string">"com.sikiedu.mapper"</span>/&gt;</span></span><br><span class="line">	<span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h2 id="part11、未完待续……"><a href="#part11、未完待续……" class="headerlink" title="part11、未完待续……"></a>part11、未完待续……</h2>]]></content>
      <tags>
        <tag>笔记</tag>
        <tag>ssm</tag>
        <tag>java</tag>
        <tag>mybatis</tag>
      </tags>
  </entry>
  <entry>
    <title>杂记</title>
    <url>/2020/01/23/%E6%9D%82%E8%AE%B0/</url>
    <content><![CDATA[<h1 id="杂记"><a href="#杂记" class="headerlink" title="杂记 "></a>杂记 </h1><h2 id="——-记录一些松散的没有特别目的性的笔记"><a href="#——-记录一些松散的没有特别目的性的笔记" class="headerlink" title="—— 记录一些松散的没有特别目的性的笔记 "></a>—— 记录一些松散的没有特别目的性的笔记 </h2><a id="more"></a>

<ul>
<li><p><strong>火狐某些特殊网站科学上网仍上不去，原因是没有使用系统的代理。</strong></p>
</li>
<li><p><a href="https://cloudy-liu.github.io/2018/04/07/Hexo_yilia_%E4%B8%BB%E9%A2%98%E4%B8%80%E6%8F%BD%E5%AD%90%E4%BC%98%E5%8C%96%E6%96%B9%E6%A1%88/#%E9%85%8D%E7%BD%AE%E5%9B%BE%E7%89%87%E8%B5%84%E6%BA%90" target="_blank" rel="noopener">完善yilia主题笔记</a></p>
</li>
<li><p><a href="https://www.cnblogs.com/pangguoming/p/7126512.html" target="_blank" rel="noopener">数据库命名规则</a></p>
</li>
<li><p><a href="https://www.mmet.cn/article/3769.html" target="_blank" rel="noopener">Firefox出现问题，某些网址打不开，解决方法（链接中userAgent过期，看下条链接）</a></p>
</li>
<li><p><a href="https://blog.csdn.net/u012195214/article/details/78889602" target="_blank" rel="noopener">浏览器 User-Agent<br>大全</a></p>
</li>
<li><p><a href="https://blog.csdn.net/qq_41937388/article/details/89066317" target="_blank" rel="noopener">intellij<br>IDEA如何设置Maven自动导入依赖</a></p>
</li>
<li><p><a href="https://joeybling.github.io/2019/05/09/Hexo%E5%8D%9A%E5%AE%A2yilia%E4%B8%BB%E9%A2%98%E6%B7%BB%E5%8A%A0%E8%83%8C%E6%99%AF%E9%9F%B3%E4%B9%90(%E7%BD%91%E6%98%93%E4%BA%91%E9%9F%B3%E4%B9%90)/" target="_blank" rel="noopener">Hexo博客yilia主题添加背景音乐<br>（网易云音乐）</a></p>
</li>
<li><p><a href="https://blog.csdn.net/weixin_42478413/article/details/80728482" target="_blank" rel="noopener">IDEA shift<br>shift快捷键修改</a></p>
</li>
<li><p><a href="https://www.cnblogs.com/JohnTsai/p/4027229.html#jump" target="_blank" rel="noopener">页内跳转</a></p>
</li>
<li><p><a href="https://www.cnblogs.com/buyishi/p/10436131.html" target="_blank" rel="noopener">使用JavaScript获取浏览器UserAgent</a></p>
</li>
<li><p><a href="https://blog.csdn.net/m0_38106923/article/details/100130354" target="_blank" rel="noopener">程序员实用工具网站</a></p>
</li>
<li><p><a href="https://www.zhihu.com/question/42909784" target="_blank" rel="noopener">在markdown的tags中添加多个标签</a></p>
</li>
<li><p><a href="https://www.jianshu.com/p/399e5a3c7cc5" target="_blank" rel="noopener">.md语法</a></p>
</li>
<li><p><a href="https://blog.csdn.net/Homewm/article/details/83537937" target="_blank" rel="noopener">火狐如何访问http网址</a></p>
</li>
<li><p><a href="https://blog.csdn.net/qq_39136928/article/details/81240894" target="_blank" rel="noopener">解决IntelliJ<br>IDEA控制台输出中文乱码问题</a></p>
</li>
<li><p><a href="https://blog.csdn.net/zhaoyingjiao/article/details/39965661" target="_blank" rel="noopener">Error running ‘springmvc’: Address localhost:1099 is already in<br>use</a></p>
</li>
<li><ul>
<li>tomcat bin目录下有shutdown.bat双击</li>
</ul>
</li>
<li><p><a href="https://www.zhihu.com/question/20125256/answer/324121308" target="_blank" rel="noopener">Lambda<br>表达式</a></p>
</li>
<li><p><a href="https://blog.csdn.net/qinxu0611/article/details/86146099" target="_blank" rel="noopener">IntelliJ IDEA tomcat<br>热部署</a></p>
</li>
<li><p>bug：</p>
<p>[RMI TCP Connection(2)-127.0.0.1]<br>org.apache.jasper.servlet.TldScanner.scanJars或者java.lang.ClassNotFoundException:org.springframework.web.filter.CharacterEncodingFilter</p>
</li>
<li><p>原因：<strong>新建maven项目不小心把上一个项目的名字导进去了</strong></p>
<p><img src="https://github.com/ZephXu07/IMG/raw/master/Pom_XmlBugReason.png" alt="reason1"></p>
<p><strong>tomcat配置不小心点错默认配置时deployment多了上个项目两个不相干的war包，且默认配置不应该有war包！</strong></p>
<p><img src="https://github.com/ZephXu07/IMG/raw/master/Pom_XmlBugReason2.png" alt="reason2"></p>
</li>
<li><p><a href="https://zhidao.baidu.com/question/426938743505703452.html" target="_blank" rel="noopener">右键添加电源控制：</a></p>
</li>
</ul>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">Windows Registry Editor Version 5.00</span><br><span class="line">;Created by Vishal Gupta for AskVG.com</span><br><span class="line">[HKEY_CLASSES_ROOT\DesktopBackground\Shell\Power Menu]</span><br><span class="line"></span><br><span class="line">&quot;MUIVerb&quot;&#x3D;&quot;电源控制&quot;</span><br><span class="line"></span><br><span class="line">&quot;SubCommands&quot;&#x3D;&quot;sleep;hibernate;restart;shutdown&quot;</span><br><span class="line"></span><br><span class="line">&quot;Icon&quot;&#x3D;&quot;shell32.dll,215&quot;</span><br><span class="line"></span><br><span class="line">&quot;Position&quot;&#x3D;&quot;bottom&quot;</span><br><span class="line">[HKEY_LOCAL_MACHINE\SOFTWARE\Microsoft\Windows\CurrentVersion\Explorer\CommandStore\shell\sleep]</span><br><span class="line"></span><br><span class="line">@&#x3D;&quot;睡眠&quot;</span><br><span class="line">[HKEY_LOCAL_MACHINE\SOFTWARE\Microsoft\Windows\CurrentVersion\Explorer\CommandStore\shell\sleep\command]</span><br><span class="line"></span><br><span class="line">@&#x3D;&quot;rundll32.exe powrprof.dll,SetSuspendState Sleep&quot;</span><br><span class="line">[HKEY_LOCAL_MACHINE\SOFTWARE\Microsoft\Windows\CurrentVersion\Explorer\CommandStore\shell\hibernate]</span><br><span class="line"></span><br><span class="line">@&#x3D;&quot;休眠&quot;</span><br><span class="line">[HKEY_LOCAL_MACHINE\SOFTWARE\Microsoft\Windows\CurrentVersion\Explorer\CommandStore\shell\hibernate\command]</span><br><span class="line"></span><br><span class="line">@&#x3D;&quot;Shutdown -h&quot;</span><br><span class="line">[HKEY_LOCAL_MACHINE\SOFTWARE\Microsoft\Windows\CurrentVersion\Explorer\CommandStore\shell\restart]</span><br><span class="line"></span><br><span class="line">@&#x3D;&quot;重启&quot;</span><br><span class="line">[HKEY_LOCAL_MACHINE\SOFTWARE\Microsoft\Windows\CurrentVersion\Explorer\CommandStore\shell\restart\command]</span><br><span class="line"></span><br><span class="line">@&#x3D;&quot;Shutdown -r -f -t 00&quot;</span><br><span class="line">[HKEY_LOCAL_MACHINE\SOFTWARE\Microsoft\Windows\CurrentVersion\Explorer\CommandStore\shell\shutdown]</span><br><span class="line"></span><br><span class="line">@&#x3D;&quot;关机&quot;</span><br><span class="line">[HKEY_LOCAL_MACHINE\SOFTWARE\Microsoft\Windows\CurrentVersion\Explorer\CommandStore\shell\shutdown\command]</span><br><span class="line"></span><br><span class="line">@&#x3D;&quot;Shutdown -s -f -t 00&quot;</span><br></pre></td></tr></table></figure>

<ul>
<li><p><a href="https://zhuanlan.zhihu.com/p/28717374?utm_source=wechat_session&utm_medium=social&utm_oi=674565206173290496&s_s_i=L8lr5Ahu2uPbEZ0MlFXxlXPDDWOTRM3plnFlT64neA8%3D&s_r=1" target="_blank" rel="noopener">我的编码习惯 -<br>Controller规范</a></p>
</li>
<li><p><a href="https://www.bilibili.com/video/av73128937" target="_blank" rel="noopener">网站部署终极操作:一行命令搞定</a></p>
</li>
<li><p><a href="https://blog.csdn.net/qq_31150365/article/details/90447934" target="_blank" rel="noopener">Chrome-油猴插件及安装</a></p>
</li>
<li><p><a href="https://blog.csdn.net/zy499055759/article/details/71430282" target="_blank" rel="noopener">windows配置环境变量无效</a></p>
</li>
<li><p><a href="https://zhidao.baidu.com/question/518879901317371685.html" target="_blank" rel="noopener">C语言中malloc申请空间时长度+1，<br>原因是返回申请的内存的首地址，如p=malloc(len+1)的意思是申请len+1个字节的内存，并把返回的申请到的内存首地址赋给p指针<br>。</a></p>
</li>
<li><p><a href="http://mirrors.gdut.edu.cn/" target="_blank" rel="noopener">GDUT开源镜像站</a></p>
</li>
<li><p><a href="https://blog.csdn.net/hbysj/article/details/80499908" target="_blank" rel="noopener">chrome设置浏览器网页编码</a></p>
</li>
<li><p><a href="https://blog.csdn.net/top_code/article/details/50381432" target="_blank" rel="noopener">remote origin already<br>exists.</a></p>
</li>
<li><p><a href="https://www.cnblogs.com/guanghe/p/10429357.html" target="_blank" rel="noopener">SpringMVC乱码问题</a></p>
</li>
<li><p><a href="https://blog.csdn.net/qq_35425070/article/details/84037179" target="_blank" rel="noopener">IDEA设置换行符为Unix编码格式</a></p>
</li>
<li><p><a href="https://www.cnblogs.com/qinxu/p/9258751.html" target="_blank" rel="noopener">idea 控制台行数限制</a></p>
</li>
<li><p><a href="https://www.cnblogs.com/happykoukou/p/6655852.html" target="_blank" rel="noopener">端口号范围（转）</a></p>
</li>
<li><p><strong>The web application [Atcrowdfundingmain_war_exploded] appears to<br>have started a thread named [mysql-cj-abandoned-connection-cleanup]<br>but has failed to stop it. This is very likely to create a memory<br>leak. Stack trace of thread:</strong></p>
</li>
<li><ul>
<li>ssm项目关闭Tomcat报错，搜索得知的原因太复杂，静待有空解决</li>
</ul>
</li>
<li><p><a href="https://blog.csdn.net/pucao_cug/article/details/68947882" target="_blank" rel="noopener">安装程序无法继续。Microsoft<br>RuntimeDLL安装程序未能完成安装</a></p>
</li>
<li><p><a href="https://blog.csdn.net/u012343297/article/details/78743599" target="_blank" rel="noopener">安装程序无法继续。Microsoft<br>RuntimeDLL安装程序未能完成安装</a></p>
</li>
<li><p><a href="https://zhidao.baidu.com/question/269196699412875005.html" target="_blank" rel="noopener">NVIDIA Geforce<br>Overlay程序怎么关闭(游戏内关闭)</a></p>
</li>
</ul>
<ul>
<li><p><a href="https://www.jianshu.com/p/1d91c507c1dd" target="_blank" rel="noopener">Hexo 踩坑 - 不要在标题开头用[内容]、在内容里#不要与{紧挨着</a></p>
</li>
<li><p><a href="https://yuanmomo.net/2019/06/20/hexo-add-valine/" target="_blank" rel="noopener">Valine 评论区域不显示</a></p>
</li>
<li><p><a href="https://www.cnblogs.com/52liming/p/11829558.html" target="_blank" rel="noopener">Windows Defender might be impacting your build performance</a></p>
</li>
</ul>
]]></content>
      <tags>
        <tag>笔记</tag>
      </tags>
  </entry>
</search>
